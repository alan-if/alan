# Main common targets: clean build unit test
# "package" must be defined in platform dependent makefiles

ifneq ($(EMACS),)
JREGROUTPUT = -noansi
else
UNITOUTPUT ?= -c
endif

# VERSION = `venum alan -print "\\$$v.\\$$r\\$$s\\$$c" | tr -d '\n\r'`
#VERSION = `awk 'NR > 3; NR == 7 {exit}' alan.version | awk '{v[NR] = $$0}; END { printf "%s.%s%s%s", v[1], v[2], v[4], v[3]}'`
VERSION := $(shell cat NEXTRELEASE)

# PLATFORM will be part of package names
PLATFORM ?= "Make variable PLATFORM needs to be set by platform specific Makefile"

.PHONY: clean
clean:
	-$(MAKE) -C compiler clean
	-$(MAKE) -C interpreter clean
	-$(MAKE) -C converter clean
	-rm -f alan3*.tgz
	-rm -rf coverage.info coverage-report

.PHONY: unit
unit:
	$(MAKE) -C compiler UNITOUTPUT="$(UNITOUTPUT)" unit
	$(MAKE) -C interpreter UNITOUTPUT="$(UNITOUTPUT)" unit
	$(MAKE) -C converter UNITOUTPUT="$(UNITOUTPUT)" unit

.PHONY: build
build:
	$(MAKE) -C compiler BUILDNUMBER=$(BUILDNUMBER) build
	$(MAKE) -C interpreter BUILDNUMBER=$(BUILDNUMBER) build
	$(MAKE) -C converter BUILDNUMBER=$(BUILDNUMBER) build

.PHONY: test
test:
	$(MAKE) -C compiler JREGROUTPUT=$(JREGROUTPUT) test
	$(MAKE) -C interpreter JREGROUTPUT=$(JREGROUTPUT) test
	$(MAKE) -C converter JREGROUTPUT=$(JREGROUTPUT) test

.PHONY: cross
cross: PLATFORM = win32.i686
cross:
	$(MAKE) -C compiler cross
	$(MAKE) -C interpreter cross
	$(MAKE) -C converter cross

# The ci target is designed to be run in Linux with everything
# available to create command line SDK for Linux and Windows, as well
# as WinArun, WinAlan and packages and installation scripts.  So here
# we explicitly build necessary output by setting required variables
# and paths for compilation as per the Docker container
# alanif/linux-ci as specified in the dockers/linux-ci/Dockerfile.
ci: JREGROUTPUT = -xml
ci: UNITOUTPUT = --xml TEST
.PHONY: ci
ci: buildnumbers all cross package cross-package
	$(MAKE) -C interpreter WINARUN_ENABLED=true WINGLK_ROOT=$(HOME)/WindowsGlk winarun
	$(MAKE) -C compiler WINALAN_ENABLED=true winalan
	$(MAKE) WINGLK_ROOT=$(HOME)/WindowsGlk setup
	# TODO: We should also build gargoyle slot-in interpreter for Linux and Windows
	# $(MAKE) -C interpreter gararun

.PHONY: ci-upload
ci-upload:
	bin/alanupload $(PACKAGE) snapshots/$(BUILDNAME)
	bin/alanupload $(CROSS_PACKAGE) snapshots/$(BUILDNAME)
	#bin/alanupload $(WINARUN_PACKAGE) snapshots/$(BUILDNAME)
	#bin/alanupload $(WINALAN_PACKAGE) snapshots/$(BUILDNAME)
	#bin/alanupload $(GARARUN_PACKAGE) snapshots/$(BUILDNAME)
	#bin/alanupload $(GARARUN_CROSS_PACKAGE) snapshots/$(BUILDNAME)

.PHONY:
coverage: COVERAGE=--coverage
coverage:
	$(MAKE) clean
	-$(MAKE) -C compiler COVERAGE=$(COVERAGE) unit
	-$(MAKE) -C interpreter COVERAGE=$(COVERAGE) unit
	$(MAKE) -C compiler COVERAGE=$(COVERAGE) alan
	$(MAKE) -C interpreter COVERAGE=$(COVERAGE) arun
	-$(MAKE) -C compiler test
	-$(MAKE) -C interpreter test
	$(MAKE) coverage-report

.PHONY:coverage-report
coverage-report:
	lcov -q -c -d . --exclude \*/usr/\* -o coverage.info
	@# Re-create separate gcov files from total.info for Emacs cov-mode
	@# with coverage in the fringe area and auto-update. Nice!
	@# See https://github.com/AdamNiederer/cov
	if command -v info2gcov > /dev/null 2>&1 ; then \
		info2gcov -q coverage.info ; \
	fi
	genhtml -q -o coverage-report coverage.info


###########################################################
# Regularly you should run this to ensure that story/game
# files created on other platforms can be run on this.
# It also creates a new such game/story file from this
# platform that you should check in.
.PHONY: platform-check
platform-check:
	bin/jregr -bin bin -dir regression/platforms
	# Generate a new .a3c file for this platform that can be committed
	# so that it can be tested on other platforms
	cd regression/platforms; cp platforms.alan $(OS).alan; ../../bin/alan $(OS); rm $(OS).alan


###########################################################
# Snapshot boiler plate for non-major platforms
# specifics in Makefile.<platform> where 'snapshot-build'
# and 'snapshot-upload' needs to be defined.
#
snapshot: buildnumbers snapshot-build snapshot-upload


##################################################
# Build designations:
#   BUILDNUMBER is just the number
#   BUILDVERSION includes a dash, if no-empty, so can be used with $(VERSION)$(BUILDVERSION)
#   BUILDNAME is "Build"$(BUILDNUMBER), e.g. "Build1667"
#
# You can call 'buildnumbers' to pick up the latest build from Jenkins, you can also
# set a BUILDNUMBER and then call it which will set the other dependent values correctly

# If there is a file with BUILDNUMBER, use that
ifneq ($(wildcard ./BUILDNUMBER),)
  BUILDNUMBER=`cat BUILDNUMBER | tr -d '\n'`
  BUILDVERSION = -$(BUILDNUMBER)
  BULDNAME = Build$(BUILDNUMBER)
endif

ifneq ($(BUILDNUMBER),)
  BUILDVERSION = -$(BUILDNUMBER)
  BULDNAME = Build$(BUILDNUMBER)
endif


.PHONY: buildnumbers
buildnumbers: buildnumber
	$(eval BUILDVERSION := -$(BUILDNUMBER))
	$(eval BUILDNAME := Build$(BUILDNUMBER))
	@echo BUILDNUMBER = $(BUILDNUMBER)
	@echo BUILDVERSION = $(BUILDVERSION)
	@echo BUILDNAME = $(BUILDNAME)


buildnumber:
ifeq ($(BUILDNUMBER),)
	@echo "Getting BUILDNUMBER from Jenkins (should only happen when not building on Jenkins@ci.alanif.se)"
	$(eval BUILDNUMBER := $(shell wget -q -O- 'https://ci.alanif.se/job/Alan/api/xml?xpath=*/lastSuccessfulBuild/number' | $(XPATH) 'number/text()'))
else
	@echo "Have BUILDNUMBER file ($(BUILDNUMBER)), not getting from Jenkins"
endif

bin/alan:
	$(MAKE) -C compiler alan

# Need for packaging
games/adventv3/adventV3.a3c: games/adventv3/adventV3.alan bin/alan
	cd games/adventv3; ../../bin/alan adventV3

#######################################################################
# Check to see if we are running on ThoNi's machine, if so include
# special rules
ifeq ($(shell uname -n), thoni64)
-include Makefile.thoni
endif

# For debugging
.PHONY: v
v:
	@echo VERSION = $(VERSION)
	@echo BUILDNUMBER = $(BUILDNUMBER)
	@echo BUILDVERSION = $(BUILDVERSION)
	@echo BUILDNAME = $(BUILDNAME)
	@echo PACKAGE=$(PACKAGE)
	@echo PLATFORM=$(PLATFORM)

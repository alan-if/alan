# Main common targets: clean build unit test
# "package" must be defined in platform dependent makefiles

ifneq ($(EMACS),)
JREGROUTPUT = -noansi
else
UNITOUTPUT ?= -c
endif

# VERSION = `venum alan -print "\\$$v.\\$$r\\$$s\\$$c" | tr -d '\n\r'`
#VERSION = `awk 'NR > 3; NR == 7 {exit}' alan.version | awk '{v[NR] = $$0}; END { printf "%s.%s%s%s", v[1], v[2], v[4], v[3]}'`
VERSION := $(shell cat NEXTRELEASE)

# PLATFORM will be part of package names
PLATFORM ?= "Make variable PLATFORM needs to be set by platform specific Makefile"

.PHONY: clean
clean:
	-$(MAKE) -C compiler clean
	-$(MAKE) -C interpreter clean
	-$(MAKE) -C converter clean
	-rm -f alan3*.tgz

.PHONY: unit
unit:
	$(MAKE) -C compiler UNITOUTPUT="$(UNITOUTPUT)" unit
	$(MAKE) -C interpreter UNITOUTPUT="$(UNITOUTPUT)" unit
	$(MAKE) -C converter UNITOUTPUT="$(UNITOUTPUT)" unit

.PHONY: build
build:
	$(MAKE) -C compiler BUILDNUMBER=$(BUILDNUMBER) build
	$(MAKE) -C interpreter BUILDNUMBER=$(BUILDNUMBER) build
	$(MAKE) -C converter BUILDNUMBER=$(BUILDNUMBER) build

.PHONY: test
test:
	$(MAKE) -C compiler JREGROUTPUT=$(JREGROUTPUT) test
	$(MAKE) -C interpreter JREGROUTPUT=$(JREGROUTPUT) test
	$(MAKE) -C converter JREGROUTPUT=$(JREGROUTPUT) test

.PHONY: cross
cross: PLATFORM = win32.i686
cross:
	$(MAKE) -C compiler cross
	$(MAKE) -C interpreter cross
	$(MAKE) -C converter cross

.PHONY: ci
ci: JREGROUTPUT = -xml
ci: UNITOUTPUT = --xml TEST
ci: buildnumbers all cross package

###########################################################
# Snapshot boiler plate for non-major platforms
# specifics in Makefile.<platform>
#
snapshot: buildnumbers snapshot-build snapshot-upload


##################################################
# Build designations:
#   BUILDNUMBER is just the number
#   BUILDVERSION includes a dash, if no-empty, so can be used with $(VERSION)$(BUILDVERSION)
#   BUILDNAME is "Build"$(BUILDNUMBER), e.g. "Build1667"
#
# You can call 'buildnumbers' to pick up the latest build from Jenkins, you can also
# set a BUILDNUMBER and then call it which will set the other dependent values correctly

ifneq ($(wildcard ./BUILD_NUMBER),)
BUILDNUMBER=`cat BUILD_NUMBER`
endif

ifneq ($(BUILDNUMBER),)
  # For snapshots we use buildnumber for version info and filenames
  BUILDVERSION = -$(BUILDNUMBER)
endif

.PHONY: buildnumbers
buildnumbers: buildnumber
	$(eval BUILDVERSION := -$(BUILDNUMBER))
	$(eval BUILDNAME := Build$(BUILDNUMBER))
	@echo BUILDNUMBER = $(BUILDNUMBER)
	@echo BUILDVERSION = $(BUILDVERSION)
	@echo BUILDNAME = $(BUILDNAME)


buildnumber:
ifeq ($(BUILDNUMBER),)
	@echo "Getting BUILDNUMBER from Jenkins (should only happen when not building on Jenkins@thoni64)"
	$(eval BUILDNUMBER := $(shell wget -q -O- 'https://ci.alanif.se/jenkins/job/Alan/api/xml?xpath=*/lastSuccessfulBuild/number' | $(XPATH) 'number/text()'))
else
	@echo BUILDNUMBER=$BUILDNUMBER
endif

# Need for packaging
games/adventv3/adventV3.a3c: games/adventv3/adventV3.alan bin/alan
	cd games/adventv3; ../../bin/alan adventV3

#######################################################################
# Check to see if we are running on ThoNi's machine, if so include
# special rules
ifeq ($(shell uname -n), thoni64)
-include Makefile.thoni
endif

# For debugging
.PHONY: v
v:
	@echo VERSION = $(VERSION)
	@echo BUILDNUMBER = $(BUILDNUMBER)
	@echo BUILDVERSION = $(BUILDVERSION)
	@echo BUILDNAME = $(BUILDNAME)
	@echo PACKAGE=$(PACKAGE)
	@echo PLATFORM=$(PLATFORM)

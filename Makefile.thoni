#######################################################################
include mk/include_guard.mk
#
# This Makefile is included from Makefile.cygwin if running on ThoNi's
# machines, which are Windows machines. This primarily handles the release
# process.
#

CHANGES_HEADER = `head -1 CHANGES`

.PHONY: release
release:
	# Do some checking before building the release...
	@if ! printf -- '%s' "$(CHANGES_HEADER)" | egrep -q -- "$(VERSION)" ; then \
		echo "CHANGES is not updated for $(VERSION)" ; \
		exit 1 ; \
	else if ! git --no-pager diff --exit-code --quiet ; then \
		echo "Commit changes before making a release" ; \
		exit 1 ; \
	else if ! git --no-pager diff --exit-code --quiet --cached ; then \
		echo "Commit cached changes before making a release" ; \
		exit 1 ; \
	else if ! [[ -z `git rev-list @{upstream}.. -n 1` ]] ; then \
		echo "Push all local changes before making a release" ; \
		exit 1 ; \
	fi fi fi fi
	# Enable WinAlan & WinArun if not enabled already
ifeq ($(WINALAN_ENABLED),)
	@echo Enable WinAlan
	cp compiler/Makefile.local.template compiler/Makefile.local
	echo "WINALAN_ENABLED=true" >> compiler/Makefile.local
else
	@echo WinAlan already enabled! Good!
endif
ifeq ($(WINALAN_ENABLED),)
	@echo Enable WinArun
	cp interpreter/Makefile.local.template interpreter/Makefile.local
	echo "WINARUN_ENABLED=true" >> interpreter/Makefile.local
else
	@echo WinArun already enabled! Good!
endif
	$(MAKE) releasebuild
	$(MAKE) test
	# We won't make documentation since that is in the Alan Documentation project now
	#$(MAKE) documentation
	$(MAKE) zip setup
	$(MAKE) tags
	$(MAKE) release-upload


.PHONY: snapshot-build
snapshot-build:
	@echo "ERROR: Don't build snapshots on thoni, that should be done using Jenkins"
	exit 2


.PHONY: snapshot-upload
snapshot-upload: buildnumbers
	ssh alanif.se "mkdir -p /www/downloads/snapshots/$(BUILDNAME)"
	alanupload alan$(VERSION)$(BUILDVERSION).$(PLATFORM).zip snapshots/$(BUILDNAME)/
	alanupload alan$(VERSION)$(BUILDVERSION).$(PLATFORM).setup.exe snapshots/$(BUILDNAME)/
	alanupload winarun$(VERSION)$(BUILDVERSION).$(PLATFORM).setup.exe snapshots/$(BUILDNAME)/
	alanupload doc/manual/manual.pdf snapshots/$(BUILDNAME)/
	alanupload doc/manual/conversion.pdf snapshots/$(BUILDNAME)/
	alanupload doc/manual/writing.pdf snapshots/$(BUILDNAME)/
	ssh alanif.se ls -td /www/downloads/snapshots/Build* | tail -1 | xargs ssh alanif.se rm -r

.PHONY: release-upload
release-upload:
	alanupload alan$(VERSION).$(PLATFORM).zip sdks/windows
	alanupload alan$(VERSION).$(PLATFORM).setup.exe sdks/windows
	alanupload winarun$(VERSION).$(PLATFORM).setup.exe interpreters/windows
	alanupload interpreter/gargoyle-updater-alan$(VERSION).$(PLATFORM).setup.exe interpreters/windows
	alanupload interpreter/gargoyle-updater-alan$(VERSION).$(PLATFORM).zip interpreters/windows
	alanupload doc/manual/manual.pdf documentation
	alanupload doc/manual/conversion.pdf documentation
	#alanupload doc/manual/writing.pdf documentation


# OBSOLETE: Create pdf from odt
# TODO: Use alan-doc project to create documentation instead
.PHONY: documentation
documentation:
	$(MAKE) -C doc/manual


.PHONY: releasebuild
releasebuild:
	touch alan.version.h */alan.version.c
	$(MAKE) -C compiler release
	$(MAKE) -C interpreter release
	$(MAKE) -C converter release

.PHONY: tags
tags: last-release
	git tag -f v$(VERSION)
	git branch -f v$(VERSION)_$(OS)
	@echo "If you are satisfied with the result, and on thoni's machine, do a 'venum alan correction', at least"

.PHONY: last-release
last-release:
	echo -n $(VERSION) > LASTRELEASE

.PHONY: newVersion
newVersion:
	venum alan
	cvs commit -m 'New Version' alan.version

#################################################################################

.PHONY: packages
packages: zip setup

.PHONY: zip
zip: doc/manual/manual.pdf bin/alan.exe bin/arun.exe alan.readme.txt CHANGES.txt alan.readme.windows.txt games/adventv3/adventV3.a3c regression/saviour.alan regression/logo.png COPYING
	-rm alan*.zip
	zip -j alan$(VERSION)$(BUILDVERSION).$(PLATFORM).zip $^

.PHONY: setup
setup: COPYING.txt CHANGES.txt alan.readme.txt alan.readme.windows.txt converter/a2a3.readme.txt
	-rm winarun*setup.exe
	sed -e s/VERSION/$(VERSION)$(BUILDVERSION)/ -e s/PLATFORM/$(PLATFORM)/ winarun.iss > winarun_tmp.iss
	$(INNODIR)/iscc winarun_tmp.iss
	-rm winarun_tmp.iss
	-rm alan*setup.exe
	sed -e s/VERSION/$(VERSION)$(BUILDVERSION)/ -e s/PLATFORM/$(PLATFORM)/ alan.iss > alan_tmp.iss
	$(INNODIR)/iscc alan_tmp.iss
	-rm alan_tmp.iss
	-rm COPYING.txt CHANGES.txt alan.readme.txt alan.readme.windows.txt converter/a2a3.readme.txt

# Gargoyle Arun
.PHONY: gararun
gararun:
	$(MAKE) -C interpreter gararun

games/adventv3/adventV3.a3c: games/adventv3/adventV3.alan bin/alan
	cd games/adventv3; ../../bin/alan adventv3

COPYING.txt: COPYING
	unix2dos >$@ <$<

CHANGES.txt: CHANGES
	unix2dos >$@ <$<

alan.readme.txt: alan.readme
	unix2dos >$@ <$<

alan.readme.windows.txt: alan.readme.windows
	unix2dos >$@ <$<

converter/a2a3.readme.txt: converter/a2a3.readme
	unix2dos >$@ <$<

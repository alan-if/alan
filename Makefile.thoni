#######################################################################
# This Makefile is the top level for building the Alan System.
# It only works on ThoNi's machine.
#######################################################################

VERSION	= `venum alan -print '$$v_$$r{s$$s|_}$$c'`
DISTDIR	= ~/Utveckling/Alan/alanweb/downloads

.PHONY: all
all: unit build documentation test cygwintests

.PHONY: ci
ci: JREGROUTPUT = -xml
ci: UNITOUTPUT = --xml TEST
ci: unit build test

.PHONY: cygwintests
cygwintests:
	@java -jar bin/jregr.jar -bin bin -dir regression/winalan $(JREGROUTPUT)
	@java -jar bin/jregr.jar -bin bin -dir regression/transcript $(JREGROUTPUT)
	@java -jar bin/jregr.jar -bin bin -dir regression/versions/interpreter $(JREGROUTPUT)

.PHONY: release
release:
	@if git --no-pager diff --exit-code --quiet ; then \
		echo "commit changes before making a release" ; \
		exit 1 ; \
	else if git --no-pager diff --exit-code --quiet --cached ; then \
		echo "commit cached changes before making a release" ; \
		exit 1 ; \
	else if [[ -z `git rev-list @{upstream}.. -n 1` ]] ; then \
		echo "push all local changes before making a release" ; \
		exit 1 ; \
	fi fi fi
	exit 1
	@if cvs status 2> /dev/null | egrep Status | egrep -v Up-to-date ; then \
	 	exit 1 ; \
	fi
	$(MAKE) -f Makefile.thoni releasebuild
	$(MAKE) -f Makefile.thoni test
	$(MAKE) -f Makefile.thoni documentation
	$(MAKE) -f Makefile.thoni packages
#	$(MAKE) -f Makefile.thoni sync
#	$(MAKE) -f Makefile.thoni tags

.PHONY: snapshots
snapshots: zip setup lib
	-rm $(DISTDIR)/Snapshots/*win32.x86*
	-rm $(DISTDIR)/Snapshots/library*.zip
	-rm $(DISTDIR)/Snapshots/manual*.pdf
	-rm $(DISTDIR)/Snapshots/conversion*.pdf
	-rm $(DISTDIR)/Snapshots/writing*.pdf
	cp alan$(VERSION).win32.x86.zip $(DISTDIR)/Snapshots/alan$(VERSION)$(BUILD).win32.x86.zip
	cp alan$(VERSION).win32.x86.setup.exe $(DISTDIR)/Snapshots/alan$(VERSION)$(BUILD).win32.x86.setup.exe
	cp winarun$(VERSION).win32.x86.setup.exe $(DISTDIR)/Snapshots/winarun$(VERSION)$(BUILD).win32.x86.setup.exe
	cp library/library*.zip $(DISTDIR)/Snapshots/library$(LIBRARYVERSION).zip
	cp doc/manual/manual.pdf $(DISTDIR)/Snapshots/manual$(BUILD).pdf
	cp doc/manual/conversion.pdf $(DISTDIR)/Snapshots/conversion$(BUILD).pdf
	cp doc/manual/writing.pdf $(DISTDIR)/Snapshots/writing$(BUILD).pdf

# Create pdf from odt
.PHONY: documentation
documentation:
	@echo "***************** Documentation *****************"
	$(MAKE) documents

.PHONY: documents
documents: doc/manual/manual.pdf doc/manual/conversion.pdf doc/manual/writing.pdf

doc/manual/manual.pdf: doc/manual/manual.odt
	"/cygdrive/c/Program Files/OpenOffice 4/program/swriter" "macro:///Standard.Module1.ConvertWordToPDF(C:\Users\Thomas\Documents\Utveckling\Alan\alan\doc\manual\manual.odt)"

doc/manual/conversion.pdf: doc/manual/conversion.odt
	"/cygdrive/c/Program Files/OpenOffice.org 3/program/swriter" "macro:///Standard.Module1.ConvertWordToPDF(C:\Users\Thomas\Documents\Utveckling\Alan\alan\doc\manual\conversion.odt)"

doc/manual/writing.pdf: doc/manual/writing.odt
	"/cygdrive/c/Program Files/OpenOffice.org 3/program/swriter" "macro:///Standard.Module1.ConvertWordToPDF(C:\Users\Thomas\Documents\Utveckling\Alan\alan\doc\manual\writing.odt)"

.PHONY: releasebuild
releasebuild:
	cd compiler ; make release
	cd interpreter ; make release
	cd converter ; make release
	cd library ; make release

include top.mk

.PHONY: tags
tags:
	cvs rtag -F v$(VERSION) alan 
	cvs rtag -F -b v$(VERSION)_branch alan
	echo -n $(VERSION) > LASTRELEASE
	@echo "If you are satisfied with the result, and on thoni's machine, do a venum +r, at least"



#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Create all source for porting, should be done in an exported directory
#
.PHONY: srcdist
srcdist:
	@if test -d CVS; then \
		echo Do not do this in your working directory, export first ; \
		exit 1 ; \
	fi
	venum -write always -all alan
	cp version.h alan.version.[ch] compiler
	cp version.h alan.version.[ch] interpreter
	cp compiler/spa.* interpreter
	-rm -r regression/pre3 regression/special
	/usr/bin/find . -name \* -exec chmod u+w \{\} \;
	/usr/bin/find . -name Makefile\* -exec dos2unix \{\} \;
	/usr/bin/find . -name \*.\[ch\] -exec dos2unix \{\} \;
	tar zcvf alansrc$(VERSION).tgz compiler interpreter converter regression COPYING bin/regr bin/jregr bin/jregr.jar
	-rm $(DISTDIR)/Source/alansrc*.*
	cp alansrc$(VERSION).tgz $(DISTDIR)/Source

.PHONY: newVersion
newVersion:
	venum alan
	cvs commit -m 'New Version' alan.version

.PHONY: packages
packages: zip setup doc/manual/manual.pdf 
	cp alan$(VERSION).win32.x86.zip $(DISTDIR)/Complete\ Distributions/Windows
	cp alan$(VERSION).win32.x86.setup.exe $(DISTDIR)/Complete\ Distributions/Windows
	cp winarun$(VERSION).win32.x86.setup.exe $(DISTDIR)/Interpreters/Windows
	cp doc/manual/manual.pdf $(DISTDIR)/Documentation

#################################################################################

.PHONY: zip
zip: doc/manual/manual.pdf bin/alan.exe bin/arun.exe alan.readme.txt CHANGES.txt alan.readme.windows.txt games/adventv3/adventV3.a3c regression/saviour.alan regression/logo.png COPYING 
	-rm alan*.zip
	zip -j alan$(VERSION).win32.x86.zip $^

.PHONY: setup
setup: COPYING.txt CHANGES.txt alan.readme.txt alan.readme.windows.txt converter/a2a3.readme.txt
	-rm winarun*setup.exe
	sed -e s/VERSION/$(VERSION)/ winarun.iss > winarun_tmp.iss
	/cygdrive/c/Program\ Files/Inno\ Setup\ 5/iscc winarun_tmp.iss
	-rm winarun_tmp.iss
	-rm alan*setup.exe
	sed -e s/VERSION/$(VERSION)/ alan.iss > alan_tmp.iss
	/cygdrive/c/Program\ Files/Inno\ Setup\ 5/iscc alan_tmp.iss
	-rm alan_tmp.iss
	-rm COPYING.txt CHANGES.txt alan.readme.txt alan.readme.windows.txt converter/a2a3.readme.txt

.PHONY: sync
sync:
	cd /cygdrive/c/Program/FullSync; ./fullsync -r "AlanIF Snapshots"
    #	/cygdrive/c/Program\ Files/Allway\ Sync/Bin/syncappw.exe -s AlanIFDownloadSync -m -e

games/adventv3/adventV3.a3c: games/adventv3/adventV3.alan bin/alan
	cd games/adventv3; ../../bin/alan adventv3

COPYING.txt: COPYING
	unix2dos >$@ <$<

CHANGES.txt: CHANGES
	unix2dos >$@ <$<

alan.readme.txt: alan.readme
	unix2dos >$@ <$<

alan.readme.windows.txt: alan.readme.windows
	unix2dos >$@ <$<

converter/a2a3.readme.txt: converter/a2a3.readme
	unix2dos >$@ <$<

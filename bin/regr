#!/usr/bin/env bash
#
# Script for regression testing of Alan Adventure Language System
# Files:
#   .regr - the command to be run using the case name as the single arg
#           also indicates that this directory should be recursed into
#   .case - the extension (including period) to be considered test cases
#           if available indicates that there are cases in this directory
#

function run ()
{
    /bin/echo -n "$theCase : "
    if [ ! -f $theCase.suspended ]
    then
	/bin/echo "########## $theCase ##########" >$theCase.output
	./.regr $theCase >>$theCase.output 2>&1
	cases=`expr $cases + 1`
    fi
}

function verify()
{
    /bin/echo "<testcase name=\"$theCase\" classname=\"$1\">" >> TEST-regr.xml
    if [ -f $theCase.suspended ] ; then
	suspended=`expr $suspended + 1`
	/bin/echo "Suspended..."
    else if [ -f $theCase.expected ] ; then
	if diff -q -b $theCase.output $theCase.expected 1> /dev/null ; then
	    ok=`expr $ok + 1`
            if [ $interactive = 1 ] ; then
	        tput cr
                # TODO CYGWIN should be set on cygwin somehow, now it seems it's always true
                if [ CYGWIN ] ; then
	            /bin/echo -n "                                                            "
		    tput cr
                else
	            tput ce #- This should really work, but doesn't on cygwin ;-( so we need to do the two lines above instead
                fi
            else
	        /bin/echo "ok"
	    fi
	    rm $theCase.output
	else
	    failed=`expr $failed + 1`
	    /bin/echo "*** FAILED!!! ***"
	    /bin/echo "<failure message=\"Output does not match expected\">" >> TEST-regr.xml
	    diff -c -b $theCase.output $theCase.expected 1>> TEST-regr.xml
	    /bin/echo -n "</failure>" >> TEST-regr.xml
	fi
    else
	new=`expr $new + 1`
	/bin/echo -n  "<error type=\"New\" message=\"No expected output defined for case '$theCase'\">" >> TEST-regr.xml
	/bin/echo "The file '$theCase.output' does not exist" >> TEST-regr.xml
	/bin/echo -n "</error>" >> TEST-regr.xml
	/bin/echo "NEW!"
    fi
    fi
    /bin/echo "</testcase>" >> TEST-regr.xml
}

function summary ()
{
    /bin/echo -n "Total $cases tests"
    if [ $suspended -ne 0 ] ; then
	/bin/echo -n " ($suspended suspended)"
    fi
    /bin/echo -n ", "
    if [ $new -ne 0 ] ; then
	/bin/echo -n "$new new, "
    fi
    if [ $failed -eq 0 ] ; then
	if [ $new -eq 0 ] ; then
	    /bin/echo -n All OK!
	else
	    /bin/echo -n $ok OK!
	fi
    else
	/bin/echo -n "*** $failed FAILED! ***"
    fi
    /bin/echo
}

# TODO recurse should build a path to use in run/verify so that "recursing"/"leaving" is unnecessary:
# sub/test1 ok
# sub/test2 ok
# a ok
# b ok

function recurse()
{
    cd "$1"
    runall "$2"
    cd ..
}

function runall()
{
    if [ ! -f .ignore ] ; then
        local path="$1"
        for d in * ; do
	    if [ -d "$d" ] ; then
                recurse "$d" "$path.$d"
            fi
        done

        if [ -f .regr ] ; then
            echo :: $path :: 
            /bin/echo "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>" > TEST-regr.xml
            /bin/echo "<testsuite name=\"regr\">" >> TEST-regr.xml
            ext=`cat .case`
            for f in *$ext ; do
	        theCase=`basename $f $ext`
	        run "$path"
	        verify "$path"
            done
            /bin/echo "</testsuite>" >> TEST-regr.xml
        fi
    fi
}

function runselected()
{
    /bin/echo "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>" > TEST-regr.xml
    /bin/echo "<testsuite name=\"regr\">" >> TEST-regr.xml
    ext=`cat .case`
    for f in ${*} ; do
	theCase=`basename $f $ext`
	if [ "$theCase" != "$f" ] ; then
	    run
	    verify
	elif [ -f $theCase$ext ] ; then
	    run
	    verify
	fi
    done
    /bin/echo "</testsuite>" >> TEST-regr.xml
}

cases=0
ok=0
failed=0
suspended=0
new=0

if [ -t 0 ] ; then
    interactive=1
else
    interactive=0
fi

if [ $# -gt 0 ] ; then
    while getopts ni OPTION ; do
	case ${OPTION} in
            n) interactive=0;;
            i) interactive=1;;
	    \?) echo "'-n' for non-interactive, '-i' for interactive output mode"
		exit 2;;
	esac
    done
    shift $(($OPTIND-1))
fi

if [ $# != 0 ] ; then
    runselected ${*}
else
    runall `basename "$PWD"`
fi
summary

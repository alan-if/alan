#######################################################################
include ../mk/include_guard.mk
#
# Common rules for alan compiler and variants

include ../mk/venum.mk
include Makefile.tm

ifneq ($(INSIDE_EMACS),)
JREGROUTPUT = -noansi
endif

# Jenkins sets BUILD_NUMBER so use that if available
ifneq ($(BUILD_NUMBER),)
  BUILDNUMBER = $(BUILD_NUMBER)
  BUILDVERSION = -$(BUILDNUMBER)
  CFLAGS_BUILD = -DBUILD=$(BUILDNUMBER)
endif

# NOTE: for unittests -DUNITTESTING is automatically added
# so you can override system functions
CFLAGS += -g -O0 -Wall -MMD -I../interpreter $(CFLAGS_BUILD) $(COVERAGE)
LDFLAGS += $(COVERAGE)

COMPILE = $(CC) $(CFLAGS)
LINK = $(CC) $(LDFLAGS)


#######################################################################
#
# alan: Alan command line compiler - native or cross
#
ALAN_OBJDIR = .alan
OBJDIRS += $(ALAN_OBJDIR)

ALAN_OBJECTS = $(addprefix $(ALAN_OBJDIR)/,${ALAN_SRCS:.c=.o}) $(ALAN_OBJDIR)/alan.version.o

# Dependencies
-include $(ALAN_OBJECTS:.o=.d)

# Rule to compile objects to subdirectory
$(ALAN_OBJECTS): $(ALAN_OBJDIR)/%.o: %.c
	$(COMPILE) -o $@ -c $<

alan$(EXEEXT): $(ALAN_OBJECTS)
	$(LINK) -o $@$(EXEEXT) $(ALAN_OBJECTS) $(LDLIBS)
	cp $@$(EXEEXT) ../bin


#######################################################################
#
# cross: a way to cross-build for Windows
#
# Add any other Windows-targets to EXTRA_CROSS_TARGETS and they will
# be built too.
#
# TODO: we should remember that we just built cross so remove all
# objects on next non-cross build...
#
cross: cross-clean
	$(MAKE) cross-build
cross-build: CC= x86_64-w64-mingw32-gcc
cross-build: CFLAGS += -I$(WINICONV_ROOT)
cross-build: LDLIBS= -L$(WINICONV_ROOT) -lwiniconv
cross-build: EXEEXT=.exe
cross-build: build $(EXTRA_CROSS_TARGETS)

# We need to remove all *.o for the targets that may be cross built
# but are not by default
.PHONY: cross-clean
cross-clean:
	-rm -f $(ALAN_OBJDIR)/*.o alan

#######################################################################
#
# test: Run all tests!
#
UNITOUTPUT ?= -c

.PHONY: test
test:
	$(MAKE) standard_tests $(EXTRA_TESTS)

standard_tests: alan
	../bin/jregr -bin . -dir testing $(JREGROUTPUT)
# TODO: Backwards compatibility tests for the compiler (for new or changed language constructs) are not working
#	../bin/jregr -bin bin -dir regression/versions/compiler $(JREGROUTPUT)

# Clean
.PHONY: clean
clean:
	-rm -rf $(OBJDIRS) *.$(SOEXTENSION) alan alan.exe winalan.exe alan.res

#################################################################
#
# unit: Unit testing
#
# CGreen unit tests of two types:
#	- one library for all tests (*Tests.c) linked with every module that is needed
#	- one library per module (*_tests.c) with every thing needed mocked away
#
# Having both these types is just a intermediate state as all
# "linked_unittests" are being transformed into "isolated_unittests"

# Define UNITTESTING so modules can define system function calls with Cgreen mocks
unit: CFLAGS += -DUNITTESTING

.PHONY: unit
ifeq ($(CGREEN),)
unit:
	@echo "No unit tests run, Cgreen not available"
else
# Two types:
unit: linked_unittests isolated_unittests
endif

UNITTESTS_OBJECTS = $(addprefix $(UNITTESTS_OBJDIR)/,${UNITTESTS_SRCS:.c=.o}) $(UNITTESTS_OBJDIR)/alan.version.o
UNITTESTS_OBJDIR = .unittests
OBJDIRS += $(UNITTESTS_OBJDIR)

# Dependencies, if they don't exist yet
-include $(UNITTESTS_OBJECTS:.o=.d)

###################################################################
# Build a single library of all non-isolated unittests...
# until we have migrated them to isolated tests

unittests.$(SOEXTENSION): $(UNITTESTS_OBJECTS)
	$(LINK) -shared -o $@ $(UNITTESTS_OBJECTS) $(LDLIBS) -lcgreen

# ... that can be run with the cgreen runner
linked_unittests: unittests.$(SOEXTENSION)
	$(CGREEN) ./$^ --suite compiler_unit_tests $(UNITOUTPUT)

#####################################################################
# Build isolated unittests in shared libs for each module where it can
# be tested in total isolation (with everything else mocked away,
# except some extra objects)
#
# MODULES_WITH_ISOLATED_UNITTESTS is defined in sources.mk

ISOLATED_UNITTESTS_EXTRA_MODULES = util options sysdep lst dump opt charset type alan.version

isolated_unittests: SUITE = Compiler

include ../mk/isolated_unittests.mk

######################################################################
.PHONY: coverage
coverage:
	$(MAKE) COVERAGE=--coverage unit
	$(MAKE) COVERAGE=--coverage alan
	$(MAKE) test
	$(MAKE) coverage-report

.PHONY: coverage-report
coverage-report:
	lcov -q -c -d . --exclude /usr/\* -o coverage.info
	@# Re-create separate gcov files from total.info for Emacs cov-mode
	@# with coverage in the fringe area and auto-update. Nice!
	@# See https://github.com/AdamNiederer/cov
	if command -v info2gcov > /dev/null 2>&1 ; then \
		info2gcov -q coverage.info ; \
	fi
	genhtml -q -o coverage-report coverage.info

#######################################################################
#
# Check to see if we are running on ThoNi's machine, if so include
# special rules
#ifeq ($(shell uname -n), thoni64)
#  include Makefile.thoni
#endif

# Create all objdirs if necessary (at parse time)
$(info $(shell mkdir -p $(OBJDIRS)))

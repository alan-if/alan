# Generic make rules for alan compiler
# Set:
#	COMPILER : which command to run the C compiler
#	LINKER : which command to run the linker
#	OSFLAGS : what flags must be passed to both compiler and linker
#	EXTRA_COMPILER_FLAGS : what extra flags to pass to the compiler
#	EXTRA_LINKER_FLAGS : what extra flags to pass to the linker

ifneq ($(BUILDNUMBER),)
  # For snapshots we use buildnumber for version info and filenames
  BUILDVERSION = -$(BUILDNUMBER)
endif

CC = $(COMPILER)
CFLAGS = -I../interpreter $(COMPILEFLAGS) $(EXTRA_COMPILER_FLAGS) -DBUILD=$(BUILDNUMBER) $(OSFLAGS)

LINK = $(LINKER)
LINKFLAGS = $(OSFLAGS) $(EXTRA_LINKER_FLAGS)

gprof: EXTRA_COMPILER_FLAGS = -pg
gprof: EXTRA_LINKER_FLAGS = -pg

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Main target to do everything
#
.PHONY: all
all: unit build $(EXTRA_TARGETS)

# Target to just build
.PHONY: build
build gprof: alan

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Run all tests!
#
UNITOUTPUT ?= -c

.PHONY: test
test:
	@cd ..;bin/jregr -bin bin -dir compiler/testing $(JREGROUTPUT)
	@cd ..;bin/jregr -bin bin -dir compiler/testing/positions $(JREGROUTPUT)
	@cd ..;bin/jregr -bin bin -dir compiler/testing/dump $(JREGROUTPUT)
	@cd ..;bin/jregr -dir compiler/testing/arguments $(JREGROUTPUT)
	@cd ..;bin/jregr -bin bin -dir regression/debug $(JREGROUTPUT)
	@cd ../regression/platforms; ../../bin/alan $(OS)
	@cd ..;bin/jregr -bin bin -dir regression/platforms $(JREGROUTPUT)
# TODO: Since older interpreters barf on the tests for backwards compatibility of the compiler
# TODO: we need to split that up somehow
#	@cd ..;java -jar bin/jregr.jar -bin bin -dir regression/versions/compiler $(JREGROUTPUT)

# Clean
.PHONY: clean
clean:
	@-rm -f *.dll .*/*.o .*/*.d .*/*.dll .*/*.gcno .*/*.gcda alan.res ../bin/alan ../bin/winalan

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Alan command line compiler
#
ALANOBJDIR = .alan
ALANOBJECTS = $(addprefix $(ALANOBJDIR)/,${ALANSRCS:.c=.o}) $(ALANOBJDIR)/alan.version.o
-include $(ALANOBJECTS:.o=.d)
$(ALANOBJECTS): $(ALANOBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -MMD -o $@ -c $<

$(ALANOBJDIR):
	@mkdir $(ALANOBJDIR)

alan: $(ALANOBJDIR) $(ALANOBJECTS)
	$(LINK) -o alan $(ALANOBJECTS) $(LINKFLAGS)
	-@if ! test -d ../bin; then mkdir ../bin 2> /dev/null ; fi
	cp alan ../bin/alan


#################################################################
# Unit testing
#
# Two types:
.PHONY: unit
unit: cgreenrunnertests isolated_unittests

CGREENLIB ?= -lcgreen

UNITTESTSOBJDIR = .unittests
UNITTESTSOBJECTS = $(addprefix $(UNITTESTSOBJDIR)/,${UNITTESTSSRCS:.c=.o}) $(UNITTESTSOBJDIR)/alan.version.o
UNITTESTSDLLOBJECTS = $(addprefix $(UNITTESTSOBJDIR)/,${UNITTESTSDLLSRCS:.c=.o}) $(UNITTESTSOBJDIR)/alan.version.o

# Dependencies, if they don't exist yet
-include $(UNITTESTSOBJECTS:.o=.d)

# Rule to compile unittest objects to subdirectory
$(UNITTESTSOBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -MMD -o $@ -c $<
$(UNITTESTSOBJDIR)/%_tests.o: %_tests.c
	$(CC) $(CFLAGS) -MMD -o $@ -c $<

# Create directory if it doesn't exist
$(UNITTESTSOBJDIR):
	@mkdir $(UNITTESTSOBJDIR)

###################################################################
# Build a DLL of all unittests...
unittests.dll: CFLAGS += $(CGREENINCLUDE)
unittests.dll: LIBS = $(CGREENLIB)
unittests.dll: $(UNITTESTSOBJDIR) $(UNITTESTSOBJECTS)
	$(LINK) -shared -o $@ $(UNITTESTSDLLOBJECTS) $(LINKFLAGS) $(LIBS)

# ... that can be run with the cgreen runner
cgreenrunnertests: unittests.dll
	$(CGREEN_LIBRARY_PATH) $(RUNNER_PATH)cgreen-runner ./$^ --suite compiler_unit_tests $(UNITOUTPUT)


#####################################################################
# Here we try to build a runnable DLL for each module where it can be
# tested in total isolation (with everything else mocked away,
# except lists.c and memory.c)

-include $(addprefix $(UNITTESTSOBJDIR)/,$(patsubst %,%.d,$(MODULES_WITH_ISOLATED_UNITTESTS)))
-include $(addprefix $(UNITTESTSOBJDIR)/,$(patsubst %,%_tests.d,$(MODULES_WITH_ISOLATED_UNITTESTS)))

ISOLATED_UNITTESTS_EXTRA_MODULES = util options sysdep lst dump opt type alan.version
ISOLATED_UNITTESTS_EXTRA_OBJS = $(addprefix $(UNITTESTSOBJDIR)/, $(addsuffix .o, $(ISOLATED_UNITTESTS_EXTRA_MODULES)))

# A test .dll for a module is built from its .o and the _test.o (and some extras)
$(UNITTESTSOBJDIR)/%_tests.dll: $(UNITTESTSOBJDIR)/%.o $(UNITTESTSOBJDIR)/%_tests.o
	$(LINK) -shared -o $@ $(sort $(ISOLATED_UNITTESTS_EXTRA_OBJS) $^) $(LINKFLAGS) $(LIBS)

ISOLATED_UNITTESTS_DLLS = $(addprefix $(UNITTESTSOBJDIR)/,$(patsubst %,%_tests.dll,$(MODULES_WITH_ISOLATED_UNITTESTS)))

# Then run all _tests.dll's with the cgreen-runner
isolated_unittests: CFLAGS += $(CGREENINCLUDE)
isolated_unittests: LIBS = $(CGREENLIB)
isolated_unittests: $(UNITTESTSOBJDIR) $(ISOLATED_UNITTESTS_EXTRA_OBJS) $(ISOLATED_UNITTESTS_DLLS) $(ISOLATED_UNITTESTS_EXTRA_OBJS)
	$(CGREEN_LIBRARY_PATH) $(RUNNER_PATH)cgreen-runner $$f --suite Compiler $(UNITOUTPUT) $(ISOLATED_UNITTESTS_DLLS)


############################################
# Coverage
coverage: EXTRA_COMPILER_FLAGS += --coverage
coverage: EXTRA_LINKER_FLAGS += --coverage
coverage: all test
	cd ../regression; jregr
	lcov --capture --directory . -b . --output-file coverage_tmp.info
	lcov --extract coverage_tmp.info '*.c' -o coverage.info
	genhtml coverage.info --output coverage

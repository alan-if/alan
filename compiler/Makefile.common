#######################################################################
include ../mk/include_guard.mk
#
# Common rules for alan compiler and variants

include ../mk/venum.mk
include Makefile.tm

# Jenkins sets BUILD_NUMBER so use that if available
ifneq ($(BUILD_NUMBER),)
  BUILDNUMBER = $(BUILD_NUMBER)
  BUILDVERSION = -$(BUILDNUMBER)
  CFLAGS_BUILD = -DBUILD=$(BUILDNUMBER)
endif

# NOTE: for unittests -DUNITTESTING is automatically added
# so you can override system functions
CFLAGS += -g -Og -Wall -MMD -I../interpreter $(CFLAGS_BUILD) $(COVERAGE)
LDFLAGS += $(COVERAGE)

COMPILE = $(CC) $(CFLAGS)
LINK = $(CC) $(LDFLAGS)


#######################################################################
#
# alan: Alan command line compiler - native or cross
#
ALANOBJDIR = .alan
ALANOBJECTS = $(addprefix $(ALANOBJDIR)/,${ALANSRCS:.c=.o}) $(ALANOBJDIR)/alan.version.o

# Dependencies
-include $(ALANOBJECTS:.o=.d)

# Rule to compile objects to subdirectory
$(ALANOBJECTS): $(ALANOBJDIR)/%.o: %.c
	$(COMPILE) -o $@ -c $<

$(ALANOBJECTS): | $(ALANOBJDIR)
$(ALANOBJDIR):
	mkdir $(ALANOBJDIR)

alan: $(ALANOBJDIR) $(ALANOBJECTS)
	$(LINK) -o $@$(EXEEXT) $(ALANOBJECTS) $(LDLIBS)
	cp $@$(EXEEXT) ../bin


#######################################################################
#
# cross: a way to cross-build for Windows
#
# Add any other Windows-targets to EXTRA_CROSS_TARGETS and they will
# be built too.
#
# TODO: we should remember that we just built cross so remove all
# objects on next non-cross build...
#
cross: cross-clean
	$(MAKE) cross-build
cross-build: CC=i686-w64-mingw32-gcc
cross-build: LDLIBS += -l:libiconv.a
cross-build: EXEEXT=.exe
cross-build: build $(EXTRA_CROSS_TARGETS)

# We need to remove all *.o for the targets that may be cross built
# but are not by default
.PHONY: cross-clean
cross-clean:
	-rm -f $(ALANOBJDIR)/*.o

#######################################################################
#
# test: Run all tests!
#
UNITOUTPUT ?= -c

.PHONY: test
test:
	$(MAKE) standard_tests $(EXTRA_TESTS)

standard_tests: alan
	../bin/jregr -bin . -dir testing $(JREGROUTPUT)
# TODO: Backwards compatibility tests for the compiler (for new or changed language constructs) are not working
#	../bin/jregr -bin bin -dir regression/versions/compiler $(JREGROUTPUT)

# Clean
.PHONY: clean
clean:
	-rm -rf $(UNITTESTS_OBJDIR) $(ALANOBJDIR) $(WINALANOBJDIR) *.$(SOEXTENSION) alan alan.exe winalan.exe ../bin/alan ../bin/alan.exe ../bin/winalan.exe alan.res

#################################################################
#
# unit: Unit testing
#
.PHONY: unit
ifneq ($(CGREEN),yes)
unit:
	@echo "No unit tests run, cgreen not available"
unitbuild:
else
# Two types:
unit: linked_unittests isolated_unittests
.PHONY: unitbuild
unitbuild: linked_unittests_build isolated_unittests_build

# Define UNITTESTING so modules can define system function calls with Cgreen mocks
unit: CFLAGS += -DUNITTESTING
endif

UNITTESTS_OBJDIR = .unittests
UNITTESTSOBJECTS = $(addprefix $(UNITTESTS_OBJDIR)/,${UNITTESTSSRCS:.c=.o}) $(UNITTESTS_OBJDIR)/alan.version.o

# Dependencies, if they don't exist yet
-include $(UNITTESTSOBJECTS:.o=.d)

# Rule to compile unittest objects to subdirectory
$(UNITTESTS_OBJDIR)/%.o: %.c
	$(COMPILE) -o $@ -c $<
$(UNITTESTS_OBJDIR)/%_tests.o: %_tests.c
	$(COMPILE) -o $@ -c $<

$(UNITTESTSOBJECTS): | $(UNITTESTS_OBJDIR)

###################################################################
# Build a DLL of all unittests in a separate dir that should exist...
linked_unittests_build: unittests.$(SOEXTENSION)

unittests.$(SOEXTENSION): $(UNITTESTSOBJECTS)
	$(LINK) -shared -o $@ $(UNITTESTSOBJECTS) $(LDLIBS) -lcgreen

# ... that can be run with the cgreen runner
linked_unittests: unittests.$(SOEXTENSION)
	cgreen-runner ./$^ --suite compiler_unit_tests $(UNITOUTPUT)

#####################################################################
# Build isolated unittests in shared libs for each module where it can
# be tested in total isolation (with everything else mocked away,
# except some extra objects)

ISOLATED_UNITTESTS_EXTRA_MODULES = util options sysdep lst dump opt charset type alan.version

isolated_unittests: SUITE = Compiler

include ../mk/isolated_unittests.mk

######################################################################
.PHONY: coverage
coverage:
	$(MAKE) clean
	$(MAKE) COVERAGE=--coverage unit
	$(MAKE) COVERAGE=--coverage alan
	$(MAKE) test
	$(MAKE) coverage-report

.PHONY: coverage-report
coverage-report:
	lcov -q -c -d . --exclude /usr/\* -o coverage.info
	@# Re-create separate gcov files from total.info for Emacs cov-mode
	@# with coverage in the fringe area and auto-update. Nice!
	@# See https://github.com/AdamNiederer/cov
	if command -v info2gcov > /dev/null 2>&1 ; then \
		info2gcov -q coverage.info ; \
	fi
	genhtml -q -o coverage-report coverage.info

#######################################################################
#
# Check to see if we are running on ThoNi's machine, if so include
# special rules
ifeq ($(shell uname -n), thoni64)
  include Makefile.thoni
endif

#######################################################################
# This Makefile is for building the Alan Compiler from scratch
# It only works on ThoNi's machine, if you are porting try starting
# from one of the other Makefiles, e.g. Makefile.unix
# Copy it to Makefile and go from there
#######################################################################

DEBUG = -g
OPTIMIZE = 

# Cygwin or MingW?
OS_FLAGS = -mno-cygwin $(DEBUG)
OS_FLAGS = $(DEBUG)

EXTRA_COMPILER_FLAGS = $(OPTIMIZE) -Wall -funsigned-char

COMPILER	= gcc
LINKER  	= gcc
CPP	        = gcc -MM -ansi


# Include rules common for all platforms and builds
include rules.mk


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Default target on thoni is :
#
alanFromToolMaker: checkTarget tm alan


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Build all binaries
#
# 'build' is the target the continuous integration will use
build :
	$(MAKE) -f Makefile.thoni checkTarget alan
	$(MAKE) -f Makefile.thoni winalan

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# release
#
release:
	$(MAKE) -f Makefile.thoni "OPTIMIZE = -O4" checkTarget alan
	$(MAKE) -f Makefile.thoni "OPTIMIZE = -O4" winalan


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# rndalan - Progam to generate a randomized Alan source
#
rndalan: rndalan.o
	$(LINK) $(LINKFLAGS) -o rndalan rndalan.o
	-@if ! test -f ../bin; then mkdir ../bin 2> /dev/null ; fi
	cp rndalan ../bin


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# WinAlan
#
winalan: OS_FLAGS = -mwindows -mno-cygwin
winalan: EXTRA_COMPILER_FLAGS = -DWINGUI

winalan: checkTarget $(ALANOBJS) alan.res unit
	$(LINK) $(LINKFLAGS) -o winalan $(ALANOBJS) alan.res
	-@if ! test -d ../bin; then mkdir ../bin 2> /dev/null ; fi
	cp winalan ../bin

alan.res: alan.rc alan.ico
	windres $< -O coff -o $@

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
.tmstamp: $(TMSRCS)
	$(MAKE) -f Makefile.tm

.PHONY: tm
tm:
	-@if test "`uname -n`" = "ThoNi"; then \
		$(MAKE) -f Makefile.tm ; \
	fi


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
ARCH	= `echo $(CFLAGS) $(LINKFLAGS)`
.PHONY: checkTarget
checkTarget:
	-@if ! test -f .arch; then echo "none" > .arch; fi
	-@if test "`cat .arch`" != "$(ARCH)"; then \
		echo Removing objects for `cat .arch` ; \
                echo Building for         $(ARCH) ; \
		rm *.o; \
		/bin/echo -n $(ARCH) > .arch; \
	fi

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
depend:
	@for f in *.c; \
	  do \
	  $(CPP) $(CFLAGS) $$f $(FILETER) >> dependencies.new; \
	done
	mv dependencies.new dependencies.mk


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Version number generation
#
alan.version.h : ../alan.version.h
	cp ../alan.version.h .

alan.version.c:  ../alan.version.c
	cp ../alan.version.c .

version.h : ../version.h
	cp ../version.h .

../alan.version.c:
	cd ..; venum -write always alan time

../alan.version.h:
	cd ..; venum -write always alan time

../version.h:
	cd ..; venum -write always alan time

../alan.version: $(VERSIONSRCS) 
	cd ..; venum -write always alan time


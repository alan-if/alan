# Makefile for alan compiler parser, scanner and lister
#
# This makefile is to ensure that all generated sources are
# up-to-date. It will generate parser, scanner and lister files only
# if ToolMaker (tmk, pmk, smk and lmk) are available. This is tested
# by checking the variable TMHOME. If it's not available files are not
# generated. Instead the existing files in the repo will be used.
#
# NOTE that if the TMHOME variable is set, the executables are assumed
# to be available in the PATH.
#
# Any source distribution should include the resulting files and this
# Makefile will then print warnings but it should build anyway.
#
# REMEMBER: You have to set both the path to include the ToolMaker
# bin directory and the TMHOME environment variable to point there!

# ALANIDE: This Makefile also generates productions from the grammar
# that can be used in the AlanIDE.  The parsers (plural!) in AlanIDE
# needs to be in Java (as opposed to the C parsers generated by
# ParserMaker, and although it might be possible to add Java parser
# generation capabilities to ParserMaker, it has so far seemed too
# much work).
#
# The file 'alan.atg' is the CoCo/R-compatible attributed grammar
# generated from the current Alan language grammar. The file
# 'alanide.used.atg' is the file which has been used for the latest
# AlanIDE parsers.
#
# NOTE that since the parsers in the AlanIDE has various semantic
# actions any differences between the grammars has to be introduced
# manually in the actual grammar(s) used in the AlanIDE. Then parsers
# need to be generated from that using CoCo/R. And, once that is done,
# the used grammar should be saved as 'alanide.used.atg'.
#
# NOTE this Makefile uses a trick from https://stackoverflow.com/a/10609434/204658
# using intermediate files to ensure that multiple output files from
# a recipe is handled correctly even in parallel runs

# TMHOME	= $(HOME)/Utveckling/ToolMaker
TMLIB	= $(TMHOME)/lib/ansi-c


# Make all LMK output files dependent on lmList.c

lmList.c lmList.h alanCommon.h : lmk.intermediate
.INTERMEDIATE: lmk.intermediate

lmk.intermediate : alan.lmk alan.tmk $(TMLIB)/List.imp $(TMLIB)/Common.imp
ifneq ($(TMHOME),)
	lmk alan
else
	@echo "WARNING! ToolMaker (lmk) not available, not re-generating, using current lmList.c"
endif


# Make all PMK output

pmParse.c pmParse.h pmPaSema.c pmErr.c pmErr.h alan.voc alan.pml alanCommon.h : pmk.intermediate
.INTERMEDIATE: pmk.intermediate

pmk.intermediate : alan.pmk alan.tmk $(TMLIB)/Parse.imp $(TMLIB)/Err.imp $(TMLIB)/Common.imp
ifneq ($(TMHOME),)
	pmk alan
	sed -f prod.sed alan.pml > alan.prod
else
	@echo "WARNING! ToolMaker (pmk) not available, not re-generating, using current pmParse.c, pmPaSema.c pmErr.c"
endif

# Here we try to create CoCo and ANTLR grammars from the ToolMaker output
# in case we need to port or there is a editor that might need it for
# syntax highlighting or something...
alan.atg : coco.sed coco.header alan.prod
	cp coco.header alan.atg
	sed -f coco.sed alan.prod >> alan.atg

alan.g : antlr.sed antlr.header alan.prod
	cp antlr.header alan.g
	sed -f antlr.sed alan.prod >> alan.g


# Make all SMK output files dependent on smScanx.c

smScan.c smScan.h smScSema.c alanCommon.h : smk.intermediate
.INTERMEDIATE: smk.intermediate

smk.intermediate : alan.smk alan.tmk alan.voc $(TMLIB)/Scan.imp $(TMLIB)/Common.imp
ifneq ($(TMHOME),)
	smk alan
else
	@echo "WARNING! ToolMaker (smk) not available, not re-generating, using current smScan.c and smScSema.c"
endif


######################################################################
#
# Debugging
#
.PHONY: x
x :
	@echo TMLIB=$(TMLIB)
	@echo TMHOME=$(TMHOME)

%%OPTIONS

	Prefix 'pm';
	Listerprefix 'lm';
	List Grammar, Statistics;
	StackLimit 64;
	Pack RDS;

%%IMPORT

#include "smScan.h"

#include "srcp.h"
#include "token.h"

#include "lmList.h"

#include "adv.h"		/* ADV-node */
#include "lst.h"		/* LST-nodes */
#include "nam.h"		/* NAM-nodes */
#include "syn.h"                /* SYN-nodes */
#include "exp.h"                /* EXP-nodes */
#include "atr.h"                /* ATR-nodes */
#include "alt.h"                /* ALT-nodes */
#include "whr.h"                /* WHR-nodes */
#include "wht.h"                /* WHT-nodes */
#include "stm.h"		/* STM-nodes */
#include "chk.h"                /* CHK-nodes */
#include "vrb.h"                /* VRB-nodes */
#include "lim.h"		/* LIM-nodes */
#include "cnt.h"		/* CNT-nodes */
#include "obj.h"		/* OBJ-nodes */
#include "ext.h"                /* EXT-nodes */
#include "loc.h"                /* LOC-nodes */
#include "stp.h"                /* STP-nodes */
#include "stx.h"                /* STX-nodes */
#include "elm.h"                /* ELM-nodes */
#include "res.h"                /* RES-nodes */
#include "scr.h"                /* SCR-nodes */
#include "act.h"                /* ACT-nodes */
#include "evt.h"                /* EVT-nodes */
#include "rul.h"                /* RUL-nodes */
#include "msg.h"                /* MSG-nodes */

#include "str.h"		/* STRINGS */
#include "sco.h"                /* SCORES */
#include "opt.h"		/* OPTIONS */

%%SCANNER

    smScan(lexContext, token);

%%INSERTSYMBOL

    /* Make the requested token */
    sym->code = code;
    strcpy(sym->chars, sstr);


%%DECLARATIONS

#ifdef _PROTOTYPES_
static int val(char str[])
#else
static int val(str)
     char str[];
#endif
{
  int temp;

  sscanf(str, "%d", &temp);
  return(temp);
}


%%ATTRIBUTES

	alt %% AltNod *%1%%,
	alts %% List *%1%%,
	atr %% AtrNod *%1%%,
	atrs %% List *%1%%,
	vrb %% VrbNod *%1%%,
	vrbs %% List *%1%%,
	loc %% LocNod *%1%%,
	locs %% List *%1%%,
	obj %% ObjNod *%1%%,
	objs %% List *%1%%,
	cnt %% CntNod *%1%%,
	cnts %% List *%1%%,
	evt %% EvtNod *%1%%,
	evts %% List *%1%%,
	chk %% ChkNod *%1%%,
	chks %% List *%1%%,
	ext %% ExtNod *%1%%,
	exts %% List *%1%%,
	rul %% RulNod *%1%%,
	ruls %% List *%1%%,
	act %% ActNod *%1%%,
	acts %% List *%1%%,
	lim %% LimNod *%1%%,
	lims %% List *%1%%,
	exp %% ExpNod *%1%%,
	exps %% List *%1%%,
	stm %% StmNod *%1%%,
	stms %% List *%1%%,
	stms2 %% List *%1%%,
	nam %% NamNod *%1%%,
	nams %% List *%1%%,
	stx %% StxNod *%1%%,
	stxs %% List *%1%%,
	elm %% ElmNod *%1%%,
	elms %% List *%1%%,
	res %% ResNod *%1%%,
	ress %% List *%1%%,
	classkd %% NamKind %1%%,
	single %% Boolean %1%%,
	syn %% SynNod *%1%%,
	syns %% List *%1%%,
	scr %% ScrNod *%1%%,
	scrs %% List *%1%%,
	stp %% StpNod *%1%%,
	stps %% List *%1%%,
	qual %% QualKind %1%%,
	whr %% WhrNod *%1%%,
	wht %% WhtNod *%1%%,
	agr %% AgrKind %1%%,
	not %% Boolean %1%%,
	minus %% Boolean %1%%,
	op %% OpKind %1%%,
	str %% char *%1%%,
	val %% int %1%%,
	srcp %% Srcp %1%%;

%%RECOVERY

    Fiducial('VERB', 'DOES', 'EXIT', 'ACTOR', 'EVENT', 'START', 'OBJECT',
		'SYNTAX', 'SCRIPT', 'LOCATION', 'SYNONYMS', 'CONTAINER',
		'MENTIONED', 'ATTRIBUTES', 'DESCRIPTION', 'END', 'CHECK');

    Separator(',');

    Skip(ID, INTEGER, '.');

%%RULES

--> ADVENTURE
adventure
    = optional_options units start
    ;

---> OPTIONS
optional_options	-- RETURNS: <nothing>
    =
    ! 'OPTIONS' options
    ;

options			-- RETURNS: <nothing>
    = option
    ! options option
    ;

option			-- RETURNS: <nothing>
    = ID '.'
    %%
	optBoolean(%ID.chars, `&%ID.srcp);
    %%

    ! ID ID '.'
    %%
	optenum(%ID.chars, `&%ID.srcp, %2ID.chars);
    %%

    ! ID INTEGER '.'
    %%
	optint(%ID.chars, `&%ID.srcp, val(%INTEGER.chars));
    %%
    ;

---> UNITS
units
    = unit
    ! units unit
    ;

unit
    = object_default
    %%
	adv.oatrs = combine(adv.oatrs, %object_default.atrs);
    %%

    ! location_default
    %%
	adv.latrs = combine(adv.latrs, %location_default.atrs);
    %%

    ! actor_default
    %%
	adv.aatrs = combine(adv.aatrs, %actor_default.atrs);
    %%

    ! synonyms
    %%
	adv.syns = combine(adv.syns, %synonyms.syns);
    %%

    ! syntax
    %%
	adv.stxs = combine(adv.stxs, %syntax.stxs);
    %%

    ! verb
    %%
	adv.vrbs = concat(adv.vrbs, %verb.vrb);
    %%

    ! location
    %%
	adv.locs = concat(adv.locs, %location.loc);
    %%

    ! object
    %%
	adv.objs = concat(adv.objs, %object.obj);
    %%

    ! event
    %%
	adv.evts = concat(adv.evts, %event.evt);
    %%

    ! container
    %%
	adv.cnts = concat(adv.cnts, %container.cnt);
    %%

    ! actor
    %%
	adv.acts = concat(adv.acts, %actor.act);
    %%

    ! rule
    %%
	adv.ruls = concat(adv.ruls, %rule.rul);
    %%
    ;

----> DEFAULTS
location_default		-- RETURNS: atrs
    = 'LOCATION' 'ATTRIBUTES' attributes
    %%
	%location_default.atrs = %attributes.atrs;
    %%
    ;

object_default			-- RETURNS: atrs
    = 'OBJECT' 'ATTRIBUTES' attributes
    %%
	%object_default.atrs = %attributes.atrs;
    %%
    ;

actor_default			-- RETURNS: atrs
    = 'ACTOR' 'ATTRIBUTES' attributes
    %%
	%actor_default.atrs = %attributes.atrs;
    %%
    ;

----> ATTRIBUTES
attributes		-- RETURNS: atrs
    = attribute '.'
    %%
	%attributes.atrs = concat(NULL, %attribute.atr);
    %%

    ! attributes attribute '.'
    %%
	%attributes.atrs = concat(%attributes.atrs, %attribute.atr);
    %%
    ;

attribute		-- RETURNS: atr
    = ID
    %%
	%attribute.atr = newatr(`&%ID.srcp,
				TYPBOOL,
				newnam(`&%ID.srcp, %ID.chars),
				TRUE, 0, 0);
    %%

    ! 'NOT' ID
    %%
	%attribute.atr = newatr(`&%ID.srcp,
				TYPBOOL,
				newnam(`&%ID.srcp, %ID.chars),
				FALSE, 0, 0);
    %%

    ! ID optional_minus INTEGER
    %%
	if (%optional_minus.minus)
		%attribute.atr = newatr(`&%ID.srcp,
					TYPINT,
					newnam(`&%ID.srcp, %ID.chars),
					-val(%INTEGER.chars), 0, 0);
	else
		%attribute.atr = newatr(`&%ID.srcp,
					TYPINT,
					newnam(`&%ID.srcp, %ID.chars),
					val(%INTEGER.chars), 0, 0);
    %%

    ! ID STRING	
    %%
	%attribute.atr = newatr(`&%ID.srcp,
				TYPSTR,
				newnam(`&%ID.srcp, %ID.chars),
				0, %STRING.fpos, %STRING.len);
    %%
    ;

---> SYNONYMS
synonyms			-- RETURNS: syns
    = 'SYNONYMS' synonym_list
    %%
	%synonyms.syns = %synonym_list.syns;
    %%
    ;

synonym_list			-- RETURNS: syns
    = synonym
    %%
	%synonym_list.syns = concat(NULL, %synonym.syn);
    %%

    ! synonym_list synonym
    %%
	%synonym_list.syns = concat(%synonym_list.syns, %synonym.syn);
    %%
    ;

synonym				-- RETURNS: syn
    = id_list '=' ID '.'
    %%
	%synonym.syn = newsyn(`&%'='.srcp,
			      %id_list.nams,
			      newnam(`&%ID.srcp, %ID.chars));
    %%
    ;

---> SYNTAX
syntax
    = 'SYNTAX' syntax_list
    %%
	%syntax.stxs = %syntax_list.stxs;
    %%
    ;

syntax_list
    = syntax_item
    %%
	%syntax_list.stxs = concat(NULL, %syntax_item.stx);
    %%

    ! syntax_list syntax_item
    %%
	%syntax_list.stxs = concat(%syntax_list.stxs, %syntax_item.stx);
    %%
    ;

syntax_item
    = ID '=' syntax_elements optional_class_restrictions
    %%
	%syntax_item.stx = newstx(`&%'='.srcp,
				  newnam(`&%ID.srcp, %ID.chars),
				  %syntax_elements.elms,
				  %optional_class_restrictions.ress);
    %%
    ;

syntax_elements
    = syntax_element
    %%
	%syntax_elements.elms = concat(NULL, %syntax_element.elm);
    %%

    ! syntax_elements syntax_element
    %%
	%syntax_elements.elms = concat(%syntax_elements.elms,
				       %syntax_element.elm);
    %%
    ;

syntax_element
    = ID
    %%
	%syntax_element.elm = newelm(`&%ID.srcp, ELMWRD,
				     newnam(`&%ID.srcp, %ID.chars),
				     FALSE);
    %%

    ! '(' ID ')' optional_multiple_indicator

    %%
	%syntax_element.elm = newelm(`&%ID.srcp, ELMPAR,
				     newnam(`&%ID.srcp, %ID.chars),
				     !%optional_multiple_indicator.single);
    %%
    ;

optional_multiple_indicator
    =
    %%
	%optional_multiple_indicator.single = TRUE;
    %%

    ! '*'
    %%
	%optional_multiple_indicator.single = FALSE;
    %%

    ;

optional_class_restrictions
    = '.'
    %%
	%optional_class_restrictions.ress = NULL;
    %%

    ! 'WHERE' class_restrictions
    %%
	%optional_class_restrictions.ress = %class_restrictions.ress;
    %%
    ;

class_restrictions
    = class_restriction
    %%
	%class_restrictions.ress = concat(NULL, %class_restriction.res);
    %%

    ! class_restrictions 'AND' class_restriction
    %%
	%class_restrictions.ress = concat(%class_restrictions.ress,
				       %class_restriction.res);
    %%
    ;

class_restriction
    = ID 'ISA' classes 'ELSE' statements
    %%
	%class_restriction.res = newres(`&%'ISA'.srcp,
				    newnam(`&%ID.srcp, %ID.chars),
				    %classes.single,
				    %classes.classkd,
				    %statements.stms);
    %%
    ;

classes
    = class_identifier
    %%
	%classes.classkd = %class_identifier.classkd;
        %classes.single = TRUE;
    %%

    ! classes 'OR' class_identifier
    %%
	%classes.classkd = %classes.classkd | %class_identifier.classkd;
        %classes.single = FALSE;
    %%
    ;

class_identifier
    = 'OBJECT'
    %%
	%class_identifier.classkd = NAMOBJ;
    %%

    ! 'ACTOR'
    %%
	%class_identifier.classkd = NAMACT;
    %%

    ! 'CONTAINER'
    %%
	%class_identifier.classkd = NAMCNT;
    %%

    ! 'CONTAINER' 'OBJECT'
    %%
	%class_identifier.classkd = NAMCOBJ;
    %%

    ! 'CONTAINER' 'ACTOR'
    %%
	%class_identifier.classkd = NAMCACT;
    %%

    ! 'INTEGER'
    %%
	%class_identifier.classkd = NAMNUM;
    %%

    ! 'STRING'
    %%
	%class_identifier.classkd = NAMSTR;
    %%
    ;    


---> VERBS
optional_verbs		-- RETURNS: vrbs
    =
    %%
	%optional_verbs.vrbs = NULL;
    %%

    ! optional_verbs verb
    %%
	%optional_verbs.vrbs = concat(%optional_verbs.vrbs, %verb.vrb);
    %%
    ;

verb			-- RETURNS: vrb
    = verb_header verb_body verb_tail
    %%
	%verb.vrb = newvrb(`&%verb_header.srcp,
			   %verb_header.nams,
			   %verb_body.alts);
	if (%verb_tail.nam != NULL) { /* END-id given */
	    if (strcmp(%verb_header.str, %verb_tail.nam->str) != 0)
		lmLog(`&%verb_tail.nam->srcp, 201, sevWAR, %verb_header.str);
	}
    %%
    ;

verb_header		-- RETURNS: srcp, str, nams
    = 'VERB' id_list
    %%
	%verb_header.srcp   = %'VERB'.srcp;
	%verb_header.str    = %id_list.str;
	%verb_header.nams   = %id_list.nams;
    %%
    ;

verb_body
    = simple_verb_body
    %%
	%verb_body.alts = concat(NULL,
				 newalt(`&nulsrcp,
					NULL,
					%simple_verb_body.chks,
					%simple_verb_body.qual,
					%simple_verb_body.stms));
    %%

    ! verb_alternatives
    %%
	%verb_body.alts = %verb_alternatives.alts;
    %%
    ;

verb_alternatives
    = verb_alternative
    %%
	%verb_alternatives.alts = concat(NULL, %verb_alternative.alt);
    %%

    ! verb_alternatives verb_alternative
    %%
	%verb_alternatives.alts = concat(%verb_alternatives.alts,
					 %verb_alternative.alt);
    %%
    ;

verb_alternative
    = 'WHEN' ID simple_verb_body
    %%
	%verb_alternative.alt = newalt(`&%'WHEN'.srcp,
				       newnam(`&%ID.srcp, %ID.chars),
				       %simple_verb_body.chks,
				       %simple_verb_body.qual,
				       %simple_verb_body.stms);
    %%
    ;

simple_verb_body		-- RETURNS: chks, stms, qual
    = optional_checks optional_does
    %%
	%simple_verb_body.chks = %optional_checks.chks;
	%simple_verb_body.qual = %optional_does.qual;
	%simple_verb_body.stms = %optional_does.stms;
    %%
    ;

verb_tail		-- RETURNS: nam
    = 'END' 'VERB' optional_id '.'
    %%
	%verb_tail.nam	= %optional_id.nam;
    %%
    ;

----> CHECKS
optional_checks		-- RETURNS: chks
    =
    %%
	%optional_checks.chks = NULL;
    %%

    ! 'CHECK' statements
    %%
	%optional_checks.chks = concat(NULL, newchk(NULL, %statements.stms));
    %%

    ! 'CHECK' check_list
    %%
	%optional_checks.chks = %check_list.chks;
    %%
    ;

check_list		-- RETURNS: chks
    = check
    %%
	%check_list.chks = concat(NULL, %check.chk);
    %%

    ! check_list 'AND' check
    %%
	%check_list.chks = concat(%check_list.chks, %check.chk);
    %%
    ;

check			-- RETURNS: chk
    = expression 'ELSE' statements
    %%
	%check.chk = newchk(%expression.exp, %statements.stms);
    %%
    ;

----> DOES
optional_does		-- RETURNS: qual, srcp, stms
    =
    %%
	%optional_does.qual = QUAL_DEFAULT;
	%optional_does.stms = NULL;
    %%

    ! 'DOES' optional_qual statements
    %%
	%optional_does.qual = %optional_qual.qual;
	%optional_does.srcp = %optional_qual.srcp;
	%optional_does.stms = %statements.stms;
    %%
    ;


---> LOCATION
location		-- RETURNS: loc
    = location_header location_body location_tail
    %%
	%location.loc = newloc(`&%location_header.srcp,
			       %location_header.nam,
			       %location_header.nams,
			       %location_body.atrs,
			       %location_body.stms,
			       %location_body.stms2,
			       %location_body.exts,
			       %location_body.vrbs);
	if (%location_tail.nam != NULL) { /* END-id given */
	    if (!eqnams(%location_header.nam, %location_tail.nam))
		lmLog(`&%location_tail.nam->srcp, 201, sevWAR,
			%location_header.nam->str);
	}
    %%
    ;


location_header		-- RETURNS: srcp, nam, nams
    = 'LOCATION' ID optional_name
    %%
	%location_header.srcp = %'LOCATION'.srcp;
	%location_header.nam  = newnam(`&%ID.srcp, %ID.chars);
	%location_header.nams = %optional_name.nams;
    %%
    ;

location_body		-- RETURNS: atrs, stms, stms2, exts, vrbs
    = optional_attributes optional_description optional_does optional_exits optional_verbs
    %%
	%location_body.atrs  = %optional_attributes.atrs;
	%location_body.stms  = %optional_description.stms;
	%location_body.stms2 = %optional_does.stms;
	%location_body.exts  = %optional_exits.exts;
	%location_body.vrbs  = %optional_verbs.vrbs;
	if (%optional_does.qual != QUAL_DEFAULT)
	     lmLog(`&%optional_does.srcp, 210, sevERR, "");
    %%	
    ;

location_tail		-- RETURNS: nam
    = 'END' 'LOCATION' optional_id '.'
    %%
	%location_tail.nam = %optional_id.nam;
    %%
    ;

----> EXITS
optional_exits		-- RETURNS: exts
    =
    %%
	%optional_exits.exts = NULL;
    %%

    ! optional_exits exit
    %%
	%optional_exits.exts = concat(%optional_exits.exts, %exit.ext);
    %%
    ;

exit			-- RETURNS: ext
    = 'EXIT' id_list 'TO' ID optional_exit_body '.'
    %%
	%exit.ext = newext(`&%'EXIT'.srcp,
			   %id_list.nams,
			   newnam(`&%ID.srcp, %ID.chars),
			   %optional_exit_body.chks,
			   %optional_exit_body.stms);
	if (%optional_exit_body.nam != NULL) { /* END-id given */
	    if (strcmp(%id_list.str, %optional_exit_body.nam->str) != 0)
		lmLog(`&%optional_exit_body.nam->srcp, 201, sevWAR, %id_list.str);
	}
    %%
    ;

optional_exit_body	-- RETURNS: chks, stms, nam
    =
    %%
	%optional_exit_body.chks = NULL;
	%optional_exit_body.stms = NULL;
	%optional_exit_body.nam	 = NULL;
    %%

    ! optional_checks optional_does 'END' 'EXIT' optional_id
    %%
	%optional_exit_body.chks = %optional_checks.chks;
	%optional_exit_body.stms = %optional_does.stms;
	if (%optional_does.qual != QUAL_DEFAULT)
	     lmLog(`&%optional_does.srcp, 210, sevERR, "");
	%optional_exit_body.nam = %optional_id.nam;
    %%
    ;

---> OBJECTS
object			-- RETURNS: obj
    = object_header object_body object_tail
    %%
	%object.obj = newobj(`&%object_header.srcp,
			     %object_header.nam,
			     %object_header.nams,
			     %object_header.whr,
			     %object_body.cnt,
			     %object_body.atrs,
			     %object_body.stms,
			     %object_body.stms2,
			     %object_body.vrbs);
	if (%object_tail.nam != NULL) { /* END-id given */
	    if (!eqnams(%object_header.nam, %object_tail.nam))
		lmLog(`&%object_tail.nam->srcp, 201, sevWAR, %object_header.nam->str);
	}
    %%
    ;


object_header		-- RETURNS: srcp, nam, nams, whr
    = 'OBJECT' ID optional_name optional_where
    %%
	%object_header.srcp = %'OBJECT'.srcp;
	%object_header.nam  = newnam(`&%ID.srcp, %ID.chars);
	%object_header.nams = %optional_name.nams;
	%object_header.whr  = %optional_where.whr;
    %%
    ;

object_tail		-- RETURNS: nam
    = 'END' 'OBJECT' optional_id '.'
    %%
	%object_tail.nam = %optional_id.nam;
    %%
    ;

object_body		-- RETURNS: cnt, atrs, stms, stms2, vrbs
    = optional_properties optional_attributes optional_description optional_mentioned optional_verbs
    %%
	%object_body.cnt   = %optional_properties.cnt;
	%object_body.atrs  = %optional_attributes.atrs;
	%object_body.stms  = %optional_description.stms;
	%object_body.stms2 = %optional_mentioned.stms;
	%object_body.vrbs  = %optional_verbs.vrbs;
    %%
    ;

optional_attributes	-- RETURNS: atrs
    =
    %%
	%optional_attributes.atrs = NULL;
    %%

    ! optional_attributes is attributes
    %%
	%optional_attributes.atrs = combine(%optional_attributes.atrs, %attributes.atrs);
    %%
    ;

is			-- RETURNS: srcp
    = 'IS'
    %%
	%is.srcp = %'IS'.srcp;
    %%

    ! 'ARE'
    %%
	%is.srcp = %'ARE'.srcp;
    %%

    ! 'HAS'
    %%
	%is.srcp = %'HAS'.srcp;
    %%
    ;

optional_description	-- RETURNS: stms
    =
    %%
	%optional_description.stms = NULL;
    %%

    ! 'DESCRIPTION' 
    %%
	%optional_description.stms = concat(NULL, newstm(`&%'DESCRIPTION'.srcp,
							STM_NOP));
    %%

    ! 'DESCRIPTION' statements
    %%
	%optional_description.stms = %statements.stms;
    %%
    ;

optional_mentioned	-- RETURNS: stms
    =
    %%
	%optional_mentioned.stms = NULL;
    %%

    ! 'MENTIONED' statements
    %%
	%optional_mentioned.stms = %statements.stms;
    %%
    ;

optional_name		-- RETURNS: nams
    =
    %%
	%optional_name.nams = NULL;
    %%

    ! 'NAME' ids
    %%
	%optional_name.nams = %ids.nams;
    %%
    ;

---> CONTAINERS
optional_properties	-- RETURNS: cnt
    =
    %%
	%optional_properties.cnt = NULL;
    %%

    ! 'CONTAINER' container_body
    %%
	%optional_properties.cnt = newcnt(`&%'CONTAINER'.srcp,
					  NULL,
					  %container_body.lims,
					  %container_body.stms,
					  %container_body.stms2);
	adv.cnts = concat(adv.cnts, %optional_properties.cnt);
    %%
    ;

container		-- RETURNS: cnt
    = container_header container_body container_tail
    %%
	%container.cnt = newcnt(`&%container_header.srcp,
				%container_header.nam,
				%container_body.lims,
				%container_body.stms,
				%container_body.stms2);
	if (%container_tail.nam != NULL) { /* END-id given */
	    if (!eqnams(%container_header.nam, %container_tail.nam))
		lmLog(`&%container_tail.nam->srcp, 201, sevWAR, %container_header.nam->str);
	}
    %%
    ;

container_header	-- RETURNS: srcp, nam
    = 'CONTAINER' ID
    %%
	%container_header.srcp = %'CONTAINER'.srcp;
	%container_header.nam  = newnam(`&%ID.srcp, %ID.chars);
    %%
    ;

container_body		-- RETURNS: lims, stms, stms2
    =  optional_limits optional_header optional_empty
    %%
	%container_body.lims  = %optional_limits.lims;
	%container_body.stms  = %optional_header.stms;
	%container_body.stms2 = %optional_empty.stms;
    %%
    ;

container_tail		-- RETURNS: nam
    = 'END' 'CONTAINER' optional_id '.'
    %%
	%container_tail.nam  = %optional_id.nam;
    %%
    ;

optional_limits		-- RETURNS: lims
    =
    %%
	%optional_limits.lims = NULL;
    %%

    ! 'LIMITS' limits
    %%
	%optional_limits.lims = %limits.lims;
    %%
    ;

limits			-- RETURNS: lims
    = limit
    %%
	%limits.lims = concat(NULL, %limit.lim);
    %%

    ! limits limit
    %%
	%limits.lims = concat(%limits.lims, %limit.lim);
    %%
    ;

limit			-- RETURNS: lim
    = limit_attribute 'THEN' statements
    %%
	%limit.lim = newlim(`&%'THEN'.srcp,
			    %limit_attribute.atr,
			    %statements.stms);
    %%
    ;

limit_attribute		-- RETURNS: atr
    = attribute
    %%
	%limit_attribute.atr = %attribute.atr;
    %%

    ! 'COUNT' INTEGER
    %%
	%limit_attribute.atr = newatr(`&%'COUNT'.srcp,
				      TYPINT,
				      newnam(`&%'COUNT'.srcp, "count"),
				      val(%INTEGER.chars), 0, 0);
    %%
    ;

optional_header		-- RETURNS: stms
    =
    %%
	%optional_header.stms = NULL;
    %%

    ! 'HEADER' statements
    %%
	%optional_header.stms = %statements.stms;
    %%
    ;

optional_empty		-- RETURNS: stms
    =
    %%
	%optional_empty.stms = NULL;
    %%

    ! 'ELSE' statements
    %%
	%optional_empty.stms = %statements.stms;
    %%
    ;

---> EVENTS
event			-- RETURNS: evt
    = event_header statements event_tail
    %%
	%event.evt = newevt(`&%event_header.srcp,
			    %event.nam,
			    %statements.stms);
	if (%event_tail.nam != NULL) { /* END-id given */
	    if (!eqnams(%event_header.nam, %event_tail.nam))
		lmLog(`&%event_tail.nam->srcp, 201, sevWAR, %event_header.nam->str);
	}
    %%
    ;

event_header		-- RETURNS: srcp, nam
    ='EVENT' ID
    %%
	%event_header.srcp = %'EVENT'.srcp;
	%event_header.nam  = newnam(`&%ID.srcp, %ID.chars);
    %%
    ;

event_tail		-- RETURNS: nam
    = 'END' 'EVENT' optional_id '.'
    %%
	%event_tail.nam = %optional_id.nam;
    %%
    ;

---> ACTORS
actor			-- RETURNS: act
    = actor_header actor_body actor_tail
    %%
	%actor.act = newact(`&%actor_header.srcp,
			    %actor_header.nam,
			    %actor_header.nams,
			    %actor_header.whr,
			    %actor_body.cnt,
			    %actor_body.atrs,
			    %actor_body.stms,
			    %actor_body.vrbs,
			    %actor_body.scrs);
	if (%actor_tail.nam != NULL) { /* END-id given */
	    if (!eqnams(%actor_header.nam, %actor_tail.nam))
		lmLog(`&%actor_tail.nam->srcp, 201, sevWAR, %actor_header.nam->str);
	}
    %%
    ;

actor_header		-- RETURNS: srcp, nam, nams, whr
    = 'ACTOR' ID optional_name optional_where
    %%
	%actor_header.srcp = %'ACTOR'.srcp;
	%actor_header.nam  = newnam(`&%ID.srcp, %ID.chars);
	%actor_header.nams = %optional_name.nams;
	%actor_header.whr  = %optional_where.whr;
    %%
    ;

actor_body		-- RETURNS: cnt, atrs, stms, vrbs, scrs
    = optional_properties optional_attributes optional_description optional_verbs optional_actor_script
    %%
	%actor_body.cnt = %optional_properties.cnt;
	%actor_body.atrs = %optional_attributes.atrs;
	%actor_body.stms = %optional_description.stms;
	%actor_body.vrbs = %optional_verbs.vrbs;
	%actor_body.scrs = %optional_actor_script.scrs;
    %%
    ;

actor_tail		-- RETURNS: nam
    = 'END' 'ACTOR' optional_id '.'
    %%
	%actor_tail.nam = %optional_id.nam;
    %%
    ;

----> SCRIPTS
optional_actor_script	-- RETURNS: scrs
    = 
    %%
	%optional_actor_script.scrs = NULL;
    %%

    ! optional_actor_script script
    %%
	%optional_actor_script.scrs = concat(%optional_actor_script.scrs,
					     %script.scr);
    %%
    ;

script			-- RETURNS: scr
    = 'SCRIPT' INTEGER '.' optional_description step_list
    %%
	%script.scr = newscr(`&%'SCRIPT'.srcp,
			     val(%INTEGER.chars),
			     %optional_description.stms,
			     %step_list.stps);
    %%
    ;

step_list		-- RETURNS: stps
    = step
    %%
	%step_list.stps = concat(NULL, %step.stp);
    %%

    ! step_list step
    %%
	%step_list.stps = concat(%step_list.stps, %step.stp);
    %%
    ;

step			-- RETURNS: stp
    = 'STEP' statements
    %%
	%step.stp = newstp(`&%'STEP'.srcp,
			   0,
			   NULL,
			   %statements.stms);
    %%

    ! 'STEP' 'AFTER' INTEGER statements
    %%
	%step.stp = newstp(`&%'STEP'.srcp,
			   val(%INTEGER.chars),
			   NULL,
			   %statements.stms);
    %%

    ! 'STEP' 'WAIT' 'UNTIL' expression statements
    %%
	%step.stp = newstp(`&%'STEP'.srcp,
			   0,
			   %expression.exp,
			   %statements.stms);
    %%
    ;

----> RULES
rule			-- RETURNS: rul
    = 'WHEN' expression '=>' statements
    %%
	%rule.rul = newrul(`&%'WHEN'.srcp,
			   %expression.exp,
			   %statements.stms);
    %%
    ;

---> START
start
    = 'START' where '.' optional_statements
    %%
	adv.whr	 = %where.whr;
	adv.stms = %optional_statements.stms;
    %%
    ;

---> STATEMENTS
optional_statements	-- RETURNS: stms
    =
    %%
	%optional_statements.stms = NULL;
    %%

    ! statements
    %%
	%optional_statements.stms = %statements.stms;
    %%
    ;

statements		-- RETURNS: stms
    = statement
    %%
	%statements.stms = concat(NULL, %statement.stm);
    %%

    ! statements statement
    %%
	%statements.stms = concat(%statements.stms, %statement.stm);
    %%
    ;

statement		-- RETURNS: stm
    = output_statement
    %%
	%statement.stm = %output_statement.stm;
    %%

    ! manipulation_statement
    %%
	%statement.stm = %manipulation_statement.stm;
    %%

    ! assignment_statement
    %%
	%statement.stm = %assignment_statement.stm;
    %%

    ! if_statement
    %%
	%statement.stm = %if_statement.stm;
    %%

    ! actor_statement
    %%
	%statement.stm = %actor_statement.stm;
    %%

    ! event_statement
    %%
	%statement.stm = %event_statement.stm;
    %%

    ! special_statement
    %%
	%statement.stm = %special_statement.stm;
    %%
    ;

output_statement		-- RETURNS: stm
    = STRING
    %%
	%output_statement.stm = newstm(`&%STRING.srcp, STM_PRINT);
	%output_statement.stm->fields.print.fpos = %STRING.fpos;
	%output_statement.stm->fields.print.len = %STRING.len;
    %%

    ! 'DESCRIBE' what '.'
    %%
	%output_statement.stm = newstm(`&%'DESCRIBE'.srcp, STM_DESCRIBE);
	%output_statement.stm->fields.describe.wht = %what.wht;
    %%

    ! 'SAY' expression '.'
    %%
	%output_statement.stm = newstm(`&%'SAY'.srcp, STM_SAY);
	%output_statement.stm->fields.say.exp = %expression.exp;
    %%

    ! 'LIST' what '.'
    %%
	%output_statement.stm = newstm(`&%'LIST'.srcp, STM_LIST);
	%output_statement.stm->fields.list.wht = %what.wht;
    %%	  
    ;

special_statement	-- RETURNS: stm
    = 'QUIT' '.'
    %%
	%special_statement.stm = newstm(`&%'QUIT'.srcp, STM_QUIT);
    %%

    ! 'LOOK' '.'
    %%
	%special_statement.stm = newstm(`&%'LOOK'.srcp, STM_LOOK);
    %%

    ! 'SAVE' '.'
    %%
	%special_statement.stm = newstm(`&%'SAVE'.srcp, STM_SAVE);
    %%

    ! 'RESTORE' '.'
    %%
	%special_statement.stm = newstm(`&%'RESTORE'.srcp, STM_RESTORE);
    %%

    ! 'SCORE' optional_integer '.'
    %%
	%special_statement.stm = newstm(`&%'SCORE'.srcp, STM_SCORE);
	if (%optional_integer.str != NULL) {
	    %special_statement.stm->fields.score.score =
						val(%optional_integer.str);
	    %special_statement.stm->fields.score.count = ++scocnt;
	} else
	    %special_statement.stm->fields.score.count = 0;
    %%

    ! 'VISITS' INTEGER '.'
    %%
	%special_statement.stm = newstm(`&%'VISITS'.srcp, STM_VISITS);
	%special_statement.stm->fields.visits.count = val(%INTEGER.chars);
    %%

    ! 'SYSTEM' STRING '.'
    %%
	%special_statement.stm = newstm(`&%'SYSTEM'.srcp, STM_SYSTEM);
	%special_statement.stm->fields.system.fpos = %STRING.fpos;
	%special_statement.stm->fields.system.len = %STRING.len;
    %%
    ;
	


manipulation_statement	-- RETURNS: stm
    = 'EMPTY' what optional_where '.'
    %%
	%manipulation_statement.stm = newstm(`&%'EMPTY'.srcp, STM_EMPTY);
	%manipulation_statement.stm->fields.empty.wht = %what.wht;
	%manipulation_statement.stm->fields.empty.whr = %optional_where.whr;
    %%	  

    ! 'LOCATE' what where '.'
    %%
	%manipulation_statement.stm = newstm(`&%'LOCATE'.srcp, STM_LOCATE);
	%manipulation_statement.stm->fields.locate.wht = %what.wht;
	%manipulation_statement.stm->fields.locate.whr = %where.whr;
    %%	  
    ;

event_statement			-- RETURNS: stm
    = 'SCHEDULE' ID optional_where 'AFTER' INTEGER '.'
    %%
	%event_statement.stm = newstm(`&%'SCHEDULE'.srcp, STM_SCHEDULE);
	%event_statement.stm->fields.schedule.nam  = newnam(`&%ID.srcp,
							    %ID.chars);
	%event_statement.stm->fields.schedule.whr  = %optional_where.whr;
	%event_statement.stm->fields.schedule.when = val(%INTEGER.chars);
    %%	  

    ! 'CANCEL' ID '.'
    %%
	%event_statement.stm = newstm(`&%'CANCEL'.srcp, STM_CANCEL);
	%event_statement.stm->fields.cancel.nam = newnam(`&%ID.srcp, %ID.chars);
    %%	  
    ;

assignment_statement		-- RETURNS: stm
    = 'MAKE' what something '.'
    %%
	%assignment_statement.stm = newstm(`&%'MAKE'.srcp, STM_MAKE);
	%assignment_statement.stm->fields.make.wht = %what.wht;
	%assignment_statement.stm->fields.make.not = %something.not;
	%assignment_statement.stm->fields.make.atr = %something.nam;
    %%

    ! 'SET' attribute_reference 'TO' expression '.'
    %%
	%assignment_statement.stm = newstm(`&%'SET'.srcp, STM_SET);
	%assignment_statement.stm->fields.set.atr = %attribute_reference.nam;
	%assignment_statement.stm->fields.set.wht = %attribute_reference.wht;
	%assignment_statement.stm->fields.set.exp = %expression.exp;
    %%

    ! 'INCREASE' attribute_reference optional_by_clause '.'
    %%
	%assignment_statement.stm = newstm(`&%'INCREASE'.srcp, STM_INCR);
	%assignment_statement.stm->fields.incr.atr = %attribute_reference.nam;
	%assignment_statement.stm->fields.incr.wht = %attribute_reference.wht;
	%assignment_statement.stm->fields.incr.step = %optional_by_clause.exp;
    %%

    ! 'DECREASE' attribute_reference optional_by_clause '.'
    %%
	%assignment_statement.stm = newstm(`&%'DECREASE'.srcp, STM_DECR);
	%assignment_statement.stm->fields.incr.atr = %attribute_reference.nam;
	%assignment_statement.stm->fields.incr.wht = %attribute_reference.wht;
	%assignment_statement.stm->fields.incr.step = %optional_by_clause.exp;
    %%
    ;

optional_by_clause
    =
    %%
	%optional_by_clause.exp = NULL;
    %%

    ! 'BY' expression
    %%
	%optional_by_clause.exp = %expression.exp;
    %%
    ;

if_statement			-- RETURNS: stm
    = 'IF' expression 'THEN' statements optional_elsif_list optional_else_part 'END' 'IF' '.'
    %%
	%if_statement.stm = newstm(`&%'IF'.srcp, STM_IF);
	%if_statement.stm->fields.iff.exp = %expression.exp;
	%if_statement.stm->fields.iff.thn = %statements.stms;
	if (%optional_elsif_list.stms == NULL)
	    %if_statement.stm->fields.iff.els = %optional_else_part.stms;
	else {
	    /* Connect the else_part to the elsif_list */
	    %optional_elsif_list.stms->tail->element.stm->fields.iff.els =
			%optional_else_part.stms;
	    %optional_elsif_list.stms->next = NULL;
	    %if_statement.stm->fields.iff.els = %optional_elsif_list.stms;
	}
    %%
    ;

optional_elsif_list
    =
    %%
	%optional_elsif_list.stms = NULL;
    %%

    ! elsif_list
    %%
	%optional_elsif_list.stms = %elsif_list.stms;
    %%
    ;
    
elsif_list		-- RETURNS: stms
    = 'ELSIF' expression 'THEN' statements
    %%{
	StmNod *stm;

	stm = newstm(`&%'ELSIF'.srcp, STM_IF);
	stm->fields.iff.exp = %expression.exp;
	stm->fields.iff.thn = %statements.stms;
	stm->fields.iff.els = NULL;

	/* Now make a list of the ELSIF */
	%elsif_list.stms = concat(NULL, stm);
    }%%

    ! elsif_list 'ELSIF' expression 'THEN' statements
    %%{
	StmNod *stm;

	stm = newstm(`&%'ELSIF'.srcp, STM_IF);
	stm->fields.iff.exp = %expression.exp;
	stm->fields.iff.thn = %statements.stms;
	stm->fields.iff.els = NULL;

	/* Now connect it to the previous ELSIFs, I.e connect the */
	/* else-part of the last element in the elsif_list to this */
	/* IF-statement and also concat this element to the list so */
	/* we'll know were the end is next time */
	%elsif_list.stms->tail->element.stm->fields.iff.els = concat(NULL, stm);
	%elsif_list.stms = concat(%elsif_list.stms, stm);
    }%%
    ;

optional_else_part		-- RETURNS: stms
    =
    %%
	%optional_else_part.stms = NULL;
    %%

    ! 'ELSE' statements
    %%
	%optional_else_part.stms = %statements.stms;
    %%
    ;

actor_statement			-- RETURNS: stm
    = 'USE' 'SCRIPT' INTEGER optional_for_actor '.'
    %%
	%actor_statement.stm = newstm(`&%'USE'.srcp, STM_USE);
	%actor_statement.stm->fields.use.script = val(%INTEGER.chars);
	%actor_statement.stm->fields.use.actor = %optional_for_actor.nam;
    %%
    ;

optional_for_actor	-- RETURNS: nam
    =
    %%
	%optional_for_actor.nam = NULL;
    %%

    ! 'FOR' ID
    %%
	%optional_for_actor.nam = newnam(`&%ID.srcp, %ID.chars);
    %%
    ;


---> EXPRESSIONS
expression		-- RETURNS: exp
    = term
    %%
	%expression.exp = %term.exp;
    %%

    ! expression 'OR' term
    %% { ExpNod *exp;
	exp = newexp(`&%'OR'.srcp, EXPBIN);
	exp->not	      = FALSE;
	exp->fields.bin.op    = OP_OR;;
	exp->fields.bin.left  = %expression.exp;
	exp->fields.bin.right = %term.exp;
	%expression.exp = exp;
    } %%
    ;

term			-- RETURNS: exp
    = factor
    %%
	%term.exp = %factor.exp;
    %%

    ! term 'AND' factor
    %% { ExpNod *exp;
	exp = newexp(`&%'AND'.srcp, EXPBIN);
	exp->not	      = FALSE;
	exp->fields.bin.op    = OP_AND;
	exp->fields.bin.left  = %term.exp;
	exp->fields.bin.right = %factor.exp;
	%term.exp = exp;
    } %%
    ;

factor			-- RETURNS: exp
    = primary
    %%
	%factor.exp = %primary.exp;
    %%

    ! primary binop primary
    %% { ExpNod *exp;
	exp = newexp(`&%binop.srcp, EXPBIN);
	exp->fields.bin.op = %binop.op;
	exp->fields.bin.left = %1primary.exp;
	exp->fields.bin.right = %2primary.exp;
	%factor.exp = exp;
    } %%

    ! primary optional_not relop primary
    %% { ExpNod *exp;
	exp = newexp(`&%relop.srcp, EXPBIN);
	exp->not = %optional_not.not;
	exp->fields.bin.op = %relop.op;
	exp->fields.bin.left = %1primary.exp;
	exp->fields.bin.right = %2primary.exp;
	%factor.exp = exp;
    } %%

    ! primary optional_not where
    %% { ExpNod *exp;
	exp = newexp(`&%where.srcp, EXPWHR);
	exp->not = %optional_not.not;
	exp->fields.whr.wht = %primary.exp;
	exp->fields.whr.whr = %where.whr;
	%factor.exp = exp;
    } %%

    ! primary is something
    %% { ExpNod *exp;
	exp = newexp(`&%is.srcp, EXPATR);
	exp->not = %something.not;
	exp->fields.atr.wht = %primary.exp;
	exp->fields.atr.atr = %something.nam;
	%factor.exp = exp;
    } %%
    ;


primary				-- RETURNS: exp
    = '(' expression ')'
    %%
	%primary.exp = %expression.exp;
    %%

    ! optional_minus INTEGER
    %%
	%primary.exp = newexp(`&%INTEGER.srcp, EXPINT);
	if (%optional_minus.minus)
	  %primary.exp->fields.val.val = -val(%INTEGER.chars);
	else
	  %primary.exp->fields.val.val = val(%INTEGER.chars);
    %%

    ! STRING
    %%
	%primary.exp = newexp(&%STRING.srcp, EXPSTR);
	%primary.exp->fields.str.fpos = %STRING.fpos;
	%primary.exp->fields.str.len = %STRING.len;
    %%

    ! what
    %%
	%primary.exp = newexp(`&%what.srcp, EXPWHT);
	%primary.exp->fields.wht.wht = %what.wht;
    %%

    ! attribute_reference
    %%
	%primary.exp = newexp(`&%attribute_reference.srcp, EXPATR);
	%primary.exp->fields.atr.atr = %attribute_reference.nam;
	%primary.exp->fields.atr.wht = newexp(`&%attribute_reference.srcp, EXPWHT);
	%primary.exp->fields.atr.wht->fields.wht.wht = %attribute_reference.wht;
    %%

    ! aggregate where
    %%
	%primary.exp = newexp(`&%aggregate.srcp, EXPAGR);
	%primary.exp->fields.agr.agr	= %aggregate.agr;
	%primary.exp->fields.agr.atrnam = %aggregate.nam;
	%primary.exp->fields.agr.whr	= %where.whr;
    %%

    ! 'RANDOM' INTEGER 'TO' INTEGER
    %%
	%primary.exp = newexp(`&%'RANDOM'.srcp, EXPRND);
	%primary.exp->fields.rnd.from	= val(%1INTEGER.chars);
	%primary.exp->fields.rnd.to	= val(%2INTEGER.chars);
    %%

    ! 'SCORE'
    %%
	%primary.exp = newexp(`&%'SCORE'.srcp, EXPSCORE);
    %%
    ;


aggregate			-- RETURNS: srcp, agr, nam
    = 'SUM' 'OF' ID
    %%
	%aggregate.srcp = %'SUM'.srcp;
	%aggregate.agr = AGR_SUM;
	%aggregate.nam = newnam(`&%ID.srcp, %ID.chars);
    %%

    ! 'MAX' 'OF' ID
    %%
	%aggregate.srcp = %'MAX'.srcp;
	%aggregate.agr = AGR_MAX;
	%aggregate.nam = newnam(`&%ID.srcp, %ID.chars);
    %%

    ! 'COUNT'
    %%
	%aggregate.srcp = %'COUNT'.srcp;
	%aggregate.agr = AGR_COUNT;
	%aggregate.nam = NULL;
    %%
    ;

---> MISCELLANEOUS
something		-- RETURNS: not, nam
    = optional_not ID
    %%
	%something.not = %optional_not.not;
	%something.nam = newnam(`&%ID.srcp, %ID.chars);
    %%
    ;

what			-- RETURNS: srcp, wht
    = 'OBJECT'
    %%
	%what.wht = newwht(`&%'OBJECT'.srcp, WHT_OBJ, NULL);
	%what.srcp = %'OBJECT'.srcp;
    %%

    ! 'LOCATION'
    %%
	%what.wht = newwht(`&%'LOCATION'.srcp, WHT_LOC, NULL);
	%what.srcp = %'LOCATION'.srcp;
    %%

    ! 'ACTOR'
    %%
	%what.wht = newwht(`&%'ACTOR'.srcp, WHT_ACT, NULL);
	%what.srcp = %'ACTOR'.srcp;
    %%

    ! ID
    %%
	%what.wht = newwht(`&%ID.srcp, WHT_ID, newnam(`&%ID.srcp, %ID.chars));
	%what.srcp = %ID.srcp;
    %%
    ;


optional_where		-- RETURNS: whr
    =
    %%
        %optional_where.whr = newwhr(`&nulsrcp, WHR_DEFAULT, NULL);
    %%
    
    ! where
    %%
        %optional_where.whr = %where.whr;
    %%
    ;

where			-- RETURNS: srcp, whr
    = 'HERE'
    %%
        %where.whr = newwhr(`&%'HERE'.srcp, WHR_HERE, NULL);
	%where.srcp = %'HERE'.srcp;
    %%

    ! 'NEARBY'
    %%
        %where.whr = newwhr(`&%'NEARBY'.srcp, WHR_NEAR, NULL);
	%where.srcp = %'NEARBY'.srcp;
    %%

    ! 'AT' what
    %%
        %where.whr = newwhr(`&%'AT'.srcp, WHR_AT, %what.wht);
	%where.srcp = %'AT'.srcp;
    %%

    ! 'IN' what
    %%
        %where.whr = newwhr(`&%'IN'.srcp, WHR_IN, %what.wht);
	%where.srcp = %'IN'.srcp;
    %%
    ;

binop			-- RETURNS: op, srcp
    = '+'
    %%
	%binop.op = OP_PLUS;
	%binop.srcp = %'+'.srcp;
    %%

    ! '-'
    %%
	%binop.op = OP_MINUS;
	%binop.srcp = %'-'.srcp;
    %%
    ;


relop			-- RETURNS: op, srcp
    = '<>'
    %%
        %relop.op   = OP_NE;
	%relop.srcp = %'<>'.srcp;
    %%

    ! '='
    %%
        %relop.op   = OP_EQ;
	%relop.srcp = %'='.srcp;
    %%

    ! '=='
    %%
        %relop.op   = OP_EXACT;
	%relop.srcp = %'=='.srcp;
    %%

    ! '>='
    %%
        %relop.op   = OP_GE;
	%relop.srcp = %'>='.srcp;
    %%

    ! '<='
    %%
        %relop.op   = OP_LE;
	%relop.srcp = %'<='.srcp;
    %%

    ! '>'
    %%
        %relop.op   = OP_GT;
	%relop.srcp = %'>'.srcp;
    %%

    ! '<'
    %%
        %relop.op   = OP_LT;
	%relop.srcp = %'<'.srcp;
    %%
    ;



optional_qual		-- RETURNS: qual, srcp
    =
    %%
        %optional_qual.qual = QUAL_DEFAULT;
    %%

    ! 'BEFORE'
    %%
        %optional_qual.qual = QUAL_BEFORE;
        %optional_qual.srcp = %'BEFORE'.srcp;
    %%

    ! 'AFTER'
    %%
        %optional_qual.qual = QUAL_AFTER;
        %optional_qual.srcp = %'AFTER'.srcp;
    %%

    ! 'ONLY'
    %%
        %optional_qual.qual = QUAL_ONLY;
        %optional_qual.srcp = %'ONLY'.srcp;
    %%
    ;


optional_not
    =
    %%
        %optional_not.not = FALSE;
    %%

    ! 'NOT'
    %%
        %optional_not.not = TRUE;
    %%
    ;

optional_id
    =
    %%
        %optional_id.nam = NULL;
    %%

    ! ID
    %%
        %optional_id.nam = newnam(`&%ID.srcp, %ID.chars);
    %%
    ;

ids			-- RETURNS: nams
    = ID
    %%
        %ids.nams = concat(NULL, newnam(`&%ID.srcp, %ID.chars));
    %%

    ! ids ID
    %%
        %ids.nams = concat(%ids.nams, newnam(`&%ID.srcp, %ID.chars));
    %%
    ;

id_list			-- RETURNS: str, nams
    = ID
    %%
        %id_list.str = newstr(%ID.chars);
        %id_list.nams = concat(NULL, newnam(`&%ID.srcp, %ID.chars));
    %%

    ! id_list ',' ID
    %%
        %id_list.str = %id_list.str;
        %id_list.nams = concat(%id_list.nams, newnam(`&%ID.srcp, %ID.chars));
    %%
    ;

optional_integer	-- RETURNS: str
    =
    %%
        %optional_integer.str = NULL;
    %%

    ! INTEGER
    %%
        %optional_integer.str = newstr(%INTEGER.chars);
    %%
    ;

optional_minus			-- RETURNS: minus
    =
    %%
	%optional_minus.minus = FALSE;
    %%

    ! '-'
    %%
	%optional_minus.minus = TRUE;
    %%
    ;

attribute_reference		-- RETURNS: wht, nam
    = ID 'OF' what
    %%
	%attribute_reference.srcp = %'OF'.srcp;
	%attribute_reference.nam = newnam(`&%ID.srcp, %ID.chars);
	%attribute_reference.wht = %what.wht;
    %%
    ;

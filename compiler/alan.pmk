%%OPTIONS

	Prefix 'pm';
	Listerprefix 'lm';
--	List Grammar, Statistics;
	List Grammar, Statistics, Items;
	StackLimit 64;
	Pack RDS;
	Line;
--	Debug;
	No Resolve;

%%IMPORT

#include "util.h"

#include "srcp.h"
#include "smScan.h"
#include "token.h"

#include "lmList.h"

#include "adv.h"		/* ADV-node */
#include "alt.h"                /* ALT-nodes */
#include "atr.h"                /* ATR-nodes */
#include "chk.h"                /* CHK-nodes */
#include "cla.h"		/* CLASS-nodes */
#include "cnt.h"		/* CNT-nodes */
#include "elm.h"                /* ELM-nodes */
#include "evt.h"                /* EVT-nodes */
#include "exp.h"                /* EXP-nodes */
#include "ext.h"                /* EXT-nodes */
#include "ins.h"		/* INS-nodes */
#include "lim.h"		/* LIM-nodes */
#include "lst.h"		/* LST-nodes */
#include "msg.h"                /* MSG-nodes */
#include "opt.h"		/* OPTIONS */
#include "res.h"                /* RES-nodes */
#include "rul.h"                /* RUL-nodes */
#include "sco.h"                /* SCORES */
#include "scr.h"                /* SCR-nodes */
#include "slt.h"                /* SLOTS-nodes */
#include "stm.h"		/* STM-nodes */
#include "stp.h"                /* STP-nodes */
#include "str.h"		/* STRINGS */
#include "stx.h"                /* STX-nodes */
#include "syn.h"                /* SYN-nodes */
#include "vrb.h"                /* VRB-nodes */
#include "whr.h"                /* WHR-nodes */
#include "wht.h"                /* WHT-nodes */


%%SCANNER

    smScan(lexContext, token);


%%INSERTSYMBOL

{
  static int idno = 1;

    /* Make the requested token */
    token->code = code;
    if (token->code == sm_MAIN_IDENTIFIER_Token) {
      sprintf(token->chars, "$genid#%d", idno++);
      strcat(insStr, " ('");
      strcat(insStr, token->chars);
      strcat(insStr, "')");
    } else
      strcpy(token->chars, symString);
}

%%DECLARATIONS

static int val(char str[])
{
  int temp;

  sscanf(str, "%d", &temp);
  return(temp);
}


%%ATTRIBUTES

  agr %% AgrKind %1%%,
  alt %% AltNod *%1%%,
  alts %% List *%1%%,
  atr %% AtrNod *%1%%,
  atrs %% List *%1%%,
  art %% List *%1%%,		-- of StmNod: article-clause,
  bits %% int %1%%,
  cases %% List *%1%%,
  chk %% ChkNod *%1%%,
  chks %% List *%1%%,
  cla %% ClaNod *%1%%,
  clas %% List *%1%%,
  cnt %% CntNod *%1%%,
  cnts %% List *%1%%,
  does %% List *%1%%,		-- of StmNod: does-clause,
  dscr %% List *%1%%,		-- of StmNod: description-clause,
  elm %% ElmNod *%1%%,
  elms %% List *%1%%,
  evt %% EvtNod *%1%%,
  evts %% List *%1%%,
  exp %% ExpNod *%1%%,
  expKd %%ExpKind %1%%,
  ext %% ExtNod *%1%%,
  exts %% List *%1%%,
  id %% IdNod *%1%%,
  idList %% List *%1%%,
  idList2 %% List *%1%%,
  ins %% InsNod *%1%%,		-- Instance
  inss %% List *%1%%,		-- of Instance
  lim %% LimNod *%1%%,
  lims %% List *%1%%,
  ment %% List *%1%%,		-- of StmNod: mentioned-clause,
  minus %% Bool %1%%,
  msg %% MsgNod *%1%%,
  msgs %% List *%1%%,
  nam %% List *%1%%,		-- of NamNod: name-clause
  nams %% List *%1%%,		-- of NamNods: name-clause list (list of lists)
  not %% Bool %1%%,
  op %% OpKind %1%%,
  qual %% QualKind %1%%,
  res %% ResNod *%1%%,
  ress %% List *%1%%,
  rul %% RulNod *%1%%,
  ruls %% List *%1%%,
  scr %% ScrNod *%1%%,
  scrs %% List *%1%%,
  single %% Bool %1%%,
  srcp %% Srcp %1%%,
  stm %% StmNod *%1%%,
  stms %% List *%1%%,
  stms2 %% List *%1%%,
  stms3 %% List *%1%%,
  stp %% StpNod *%1%%,
  stps %% List *%1%%,
  str %% char *%1%%,
  stx %% StxNod *%1%%,
  stxs %% List *%1%%,
  surr %% List *%1%%,	-- of StmNod: surroundings-clause,
  syn %% SynNod *%1%%,
  syns %% List *%1%%,
  val %% int %1%%,
  vrb %% VrbNod *%1%%,
  vrbs %% List *%1%%,
  whr %% WhrNod *%1%%,
  wht %% WhtNod *%1%%;

%%TERMINALS

    Identifier = 2,1,1 => 'Identifier';

%%RECOVERY

    Fiducial('VERB', 'DOES', 'EXIT', 'EVENT', 'START',
		'SYNTAX', 'SCRIPT', 'SYNONYMS', 'CONTAINER',
		'MENTIONED', 'ATTRIBUTES', 'DESCRIPTION', 'END', 'CHECK');

    Separator(',');

    Skip(Identifier, Integer, '.');

%%RULES

--> ADVENTURE
<adventure>
    = <optional_options> <units> <start>
    ;

---> OPTIONS
<optional_options>	-- RETURNS: <nothing>
    =
    ! 'OPTIONS' <options>			%+('MESSAGE', 'DEFAULT', 'THE')
    ;

<options>			-- RETURNS: <nothing>
    = <option>
    ! <options> <option>
    ;

<option>			-- RETURNS: <nothing>
    = ID '.'
    %%
	optBool(%ID.id->string, `&%ID.id->srcp, TRUE);
    %%

    ! ID ID '.'
    %%
	optenum(%ID.id->string, `&%ID.id->srcp, %2ID.id->string);
    %%

    ! ID Integer '.'
    %%
	optint(%ID.id->string, `&%ID.id->srcp, val(%Integer.chars));
    %%
    ;

---> UNITS
<units>
    = <unit>
    ! <units> <unit>
    ;

<unit>
    = <default>
    %% adv.atrs = combine(adv.atrs, %<default>.atrs); %%

    ! <object_default>
    %% adv.oatrs = combine(adv.oatrs, %<object_default>.atrs); %%

    ! <location_default>
    %% adv.latrs = combine(adv.latrs, %<location_default>.atrs); %%

    ! <actor_default>
    %% adv.aatrs = combine(adv.aatrs, %<actor_default>.atrs); %%

    ! <synonyms>
    %% adv.syns = combine(adv.syns, %<synonyms>.syns); %%

    ! <messages>
    %% adv.msgs = combine(adv.msgs, %<messages>.msgs); %%

    ! <syntax>
    %% adv.stxs = combine(adv.stxs, %<syntax>.stxs); %%

    ! <verb>
    %% adv.vrbs = concat(adv.vrbs, %<verb>.vrb, LIST_VRB); %%

    ! <class>
    %% adv.clas = concat(adv.clas, %<class>.cla, LIST_CLA); %%
	
    ! <instance>
    %% adv.inss = concat(adv.inss, %<instance>.ins, LIST_INS); %%

    ! <event>
    %% adv.evts = concat(adv.evts, %<event>.evt, LIST_EVT); %%

    ! <container>
    %% adv.cnts = concat(adv.cnts, %<container>.cnt, LIST_CNT); %%

    ! <rule>
    %% adv.ruls = concat(adv.ruls, %<rule>.rul, LIST_RUL); %%
    ;

----> DEFAULTS
<default>				-- RETURNS: atrs
    = 'DEFAULT' 'ATTRIBUTES' <attributes>		%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<default>.atrs = %<attributes>.atrs;
    %%
    ;

<location_default>		-- RETURNS: atrs
    = 'LOCATION' 'ATTRIBUTES' <attributes>		%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<location_default>.atrs = %<attributes>.atrs;
    %%
    ;

<object_default>			-- RETURNS: atrs
    = 'OBJECT' 'ATTRIBUTES' <attributes>			%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<object_default>.atrs = %<attributes>.atrs;
    %%
    ;

<actor_default>			-- RETURNS: atrs
    = 'ACTOR' 'ATTRIBUTES' <attributes>			%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<actor_default>.atrs = %<attributes>.atrs;
    %%
    ;

----> ATTRIBUTES
<attributes>		-- RETURNS: atrs
    = <attribute definition> '.'
    %%
	%<attributes>.atrs = concat(NULL, %<attribute definition>.atr, LIST_ATR);
    %%

    ! <attributes> <attribute definition> '.'
    %%
	%<attributes>.atrs = concat(%<attributes>.atrs, %<attribute definition>.atr, LIST_ATR);
    %%
    ;

<attribute definition>		-- RETURNS: atr
    = ID
    %%
	%<attribute definition>.atr = newatr(`&%ID.id->srcp,
						TYPBOOL,
						%ID.id,
						TRUE, 0, 0);
    %%

    ! 'NOT' ID
    %%
	%<attribute definition>.atr = newatr(`&%ID.id->srcp,
						TYPBOOL,
						%ID.id,
						FALSE, 0, 0);
    %%

    ! ID <optional_minus> Integer
    %%
	if (%<optional_minus>.minus)
		%<attribute definition>.atr = newatr(`&%ID.id->srcp,
							TYPINT,
							%ID.id,
							-val(%Integer.chars), 0, 0);
	else
		%<attribute definition>.atr = newatr(`&%ID.id->srcp,
							TYPINT,
							%ID.id,
							val(%Integer.chars), 0, 0);
    %%

    ! ID STRING	
    %%
	%<attribute definition>.atr = newatr(`&%ID.id->srcp,
						TYPSTR,
						%ID.id,
						0, %STRING.fpos, %STRING.len);
    %%
    ;

---> <SYNONYMS>
<synonyms>			-- RETURNS: syns
    = 'SYNONYMS' <synonym_list>	       			%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<synonyms>.syns = %<synonym_list>.syns;
    %%
    ;

<synonym_list>			-- RETURNS: syns
    = <synonym>
    %%
	%<synonym_list>.syns = concat(NULL, %<synonym>.syn, LIST_SYN);
    %%

    ! <synonym_list> <synonym>
    %%
	%<synonym_list>.syns = concat(%<synonym_list>.syns, %<synonym>.syn, LIST_SYN);
    %%
    ;

<synonym>				-- RETURNS: syn
    = <id_list> '=' ID '.'
    %%
	%<synonym>.syn = newsyn(`&%'='.srcp,
			      %<id_list>.idList,
			      %ID.id);
    %%
    ;

---> <MESSAGES>
<messages>			-- RETURNS: msgs
    = 'MESSAGE' <message_list>				%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<messages>.msgs = %<message_list>.msgs;
    %%
    ;

<message_list>			-- RETURNS: msgs
    = <message>
    %%
	%<message_list>.msgs = concat(NULL, %<message>.msg, LIST_MSG);
    %%

    ! <message_list> <message>
    %%
	%<message_list>.msgs = concat(%<message_list>.msgs, %<message>.msg, LIST_MSG);
    %%
    ;

<message>				-- RETURNS: msg
    = ID ':' <statements>			%-('QUIT', 'SAVE', 'RESTART', 'RESTORE')
    %%
	%<message>.msg = newmsg(`&%':'.srcp,
			      %ID.id,
			      %<statements>.stms);
    %%
    ;

---> <SYNTAX>				-- RETURNS: stxs
<syntax>
    = 'SYNTAX' <syntax_list>			%+('MESSAGE', 'DEFAULT', 'THE')
    %%
	%<syntax>.stxs = %<syntax_list>.stxs;
    %%
    ;

<syntax_list>
    = <syntax_item>
    %%
	%<syntax_list>.stxs = concat(NULL, %<syntax_item>.stx, LIST_STX);
    %%

    ! <syntax_list> <syntax_item>
    %%
	%<syntax_list>.stxs = concat(%<syntax_list>.stxs, %<syntax_item>.stx, LIST_STX);
    %%
    ;

<syntax_item>
    = ID '=' <syntax_elements> <optional_class_restrictions>
    %%
	%<syntax_item>.stx = newstx(`&%'='.srcp,
				  %ID.id,
				  concat(%<syntax_elements>.elms,
				         newelm(`&%ID.id->srcp, ELMEOS,
				                NULL,
				                FALSE),
				         LIST_ELM),
				  %<optional_class_restrictions>.ress);
    %%
    ;

<syntax_elements>
    = <syntax_element>
    %%
	%<syntax_elements>.elms = concat(NULL, %<syntax_element>.elm, LIST_ELM);
    %%

    ! <syntax_elements> <syntax_element>
    %%
	%<syntax_elements>.elms = concat(%<syntax_elements>.elms,
				       %<syntax_element>.elm,
	                                LIST_ELM);
    %%
    ;

<syntax_element>
    = ID
    %%
	%<syntax_element>.elm = newelm(`&%ID.id->srcp, ELMWRD,
				     %ID.id,
				     FALSE);
    %%

    ! '(' ID ')' <optional_indicators>

    %%
	%<syntax_element>.elm = newelm(`&%ID.id->srcp, ELMPAR,
				     %ID.id,
				     %<optional_indicators>.bits);
    %%
    ;

<optional_indicators>
    =
    %%
	%<optional_indicators>.bits = 0;
    %%

    ! <optional_indicators> <indicator>
    %%
	%<optional_indicators>.bits |= %<indicator>.bits;
    %%
    ;

<indicator>
    = '*'
    %%
	%<indicator>.bits = 0x1;
    %%

    ! '!'
    %%
	%<indicator>.bits = 0x2;
    %%
    ;

<optional_class_restrictions>
    = '.'
    %%
	%<optional_class_restrictions>.ress = NULL;
    %%

    ! 'WHERE' <class_restriction_clauses>
    %%
	%<optional_class_restrictions>.ress = %<class_restriction_clauses>.ress;
    %%
    ;


-- A class restriction is a definition of which classes a syntax parameter may belong to
-- A parameter can be restricted to a list of classes in the same restriction clause.
-- It will also be possible to restrict a parameter using multiple clauses since we want
-- different ELSE printouts depending on what it was not. Also inheritance will make a
-- parameter be restricted in multiple clauses following the class hierarchy.
<class_restriction_clauses>
    = <class_restriction>
    %%
	%<class_restriction_clauses>.ress = concat(NULL, %<class_restriction>.res, LIST_RES);
    %%

    ! <class_restriction_clauses> 'AND' <class_restriction>
    %%
	%<class_restriction_clauses>.ress = concat(%<class_restriction_clauses>.ress,
				       %<class_restriction>.res, LIST_RES);
    %%
    ;

<class_restriction>
    = ID 'ISA' <classes> 'ELSE' <statements>		%-('QUIT', 'SAVE', 'RESTORE', 'EMPTY', 'RESTART')
    %%
	%<class_restriction>.res = newres(`&%'ISA'.srcp,
			  		%ID.id,
					%<classes>.single,
					%<classes>.idList,
				    	%<statements>.stms);
    %%
    ;

<classes>			-- RETURNS: single, idList
    = <class_id>
    %%
	%<classes>.idList = concat(NULL, %<class_id>.id, LIST_ID);
	%<classes>.single = TRUE;
    %%

    ! <classes> 'OR' <class_id>
    %%
	%<classes>.idList = concat(%<classes>.idList, %<class_id>.id, LIST_ID);
	%<classes>.single = FALSE;
    %%
    ;

<class_id>			-- RETURNS: id
   = <heritage_id>
    %%
	%<class_id>.id = %<heritage_id>.id;
    %%
    ;    


---> VERBS
<verb>			-- RETURNS: vrb
    = <verb_header> <verb_body> <verb_tail>
    %%
	%<verb>.vrb = newvrb(`&%<verb_header>.srcp,
			   %<verb_header>.idList,
			   %<verb_body>.alts);
	if (%<verb_tail>.id != NULL) { /* END-id given */
	    if (strcmp(%<verb_header>.str, %<verb_tail>.id->string) != 0)
		lmLog(`&%<verb_tail>.id->srcp, 201, sevWAR, %<verb_header>.str);
	}
    %%
    ;

<verb_header>		-- RETURNS: srcp, str, idList
    = 'VERB' <id_list>
    %%
	%<verb_header>.srcp   = %'VERB'.srcp;
	%<verb_header>.str    = %<id_list>.str;
	%<verb_header>.idList   = %<id_list>.idList;
    %%
    ;

<verb_body>
    = <simple_verb_body>
    %%
	%<verb_body>.alts = concat(NULL,
				 newalt(`&nulsrcp,
					NULL,
					%<simple_verb_body>.chks,
					%<simple_verb_body>.qual,
					%<simple_verb_body>.stms),
				   LIST_ALT);
    %%

    ! <verb_alternatives>
    %%
	%<verb_body>.alts = %<verb_alternatives>.alts;
    %%
    ;
<verb_alternatives>
    = <verb_alternative>
    %%
	%<verb_alternatives>.alts = concat(NULL, %<verb_alternative>.alt, LIST_ALT);
    %%

    ! <verb_alternatives> <verb_alternative>
    %%
	%<verb_alternatives>.alts = concat(%<verb_alternatives>.alts,
					 %<verb_alternative>.alt,
	     				LIST_ALT);
    %%
    ;

<verb_alternative>
    = 'WHEN' ID <simple_verb_body>
    %%
	%<verb_alternative>.alt = newalt(`&%'WHEN'.srcp,
				       %ID.id,
				       %<simple_verb_body>.chks,
				       %<simple_verb_body>.qual,
				       %<simple_verb_body>.stms);
    %%
    ;

<simple_verb_body>		-- RETURNS: chks, stms, qual
    = <optional_checks> <optional_does>
    %%
	%<simple_verb_body>.chks = %<optional_checks>.chks;
	%<simple_verb_body>.qual = %<optional_does>.qual;
	%<simple_verb_body>.stms = %<optional_does>.stms;
    %%
    ;

<verb_tail>		-- RETURNS: id
    = 'END' 'VERB' <optional_id> '.'
    %%
	%<verb_tail>.id = %<optional_id>.id;
    %%
    ;

----> CHECKS
<optional_checks>		-- RETURNS: chks
    =
    %%
	%<optional_checks>.chks = NULL;
    %%

    ! 'CHECK' <statements>
    %%
	%<optional_checks>.chks = concat(NULL, newchk(NULL, %<statements>.stms), LIST_STM);
    %%

    ! 'CHECK' <check_list>
    %%
	%<optional_checks>.chks = %<check_list>.chks;
    %%
    ;

<check_list>		-- RETURNS: chks
    = <check>
    %%
	%<check_list>.chks = concat(NULL, %<check>.chk, LIST_CHK);
    %%

    ! <check_list> 'AND' <check>
    %%
	%<check_list>.chks = concat(%<check_list>.chks, %<check>.chk, LIST_CHK);
    %%
    ;

<check>			-- RETURNS: chk
    = <expression> 'ELSE' <statements>
    %%
	%<check>.chk = newchk(%<expression>.exp, %<statements>.stms);
    %%
    ;

----> DOES
<optional_does>		-- RETURNS: qual, srcp, stms
    =
    %%
	%<optional_does>.qual = QUAL_DEFAULT;
	%<optional_does>.stms = NULL;
    %%

    ! <does>
    -- Propagate!
    ;

<does>
    = 'DOES' <optional_qual> <statements>
    %%
	%<does>.qual = %<optional_qual>.qual;
	%<does>.srcp = %'DOES'.srcp;
	%<does>.stms = %<statements>.stms;
    %%
    ;


---> CLASS
<class>			-- RETURNS: cla
    = 'EVERY' ID <optional_heritage> <slots> <class_tail>
    %%
	%<class>.cla = newcla(`&%'EVERY'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newSlots(%<slots>.nams,
					%<slots>.whr,
					%<slots>.atrs,
					%<slots>.cnt,
					%<slots>.surr,
					%<slots>.dscr,
					%<slots>.ment,
					%<slots>.art,
					%<slots>.does,
					%<slots>.exts,
					%<slots>.vrbs,
					%<slots>.scrs));
	if (%<class_tail>.id != NULL)  /* END-id given */
	    if (!eqids(%ID.id, %<class_tail>.id))
		lmLog(`&%<class_tail>.id->srcp, 201, sevWAR, %ID.id->string);
    %%
    ;

<class_tail>		-- RETURNS: id
    = 'END' 'EVERY' <optional_id> '.'
    %% %<class_tail>.id = %<optional_id>.id; %%
    ;


---> INSTANCE
<instance>			-- RETURNS: ins
    = 'THE' ID <optional_heritage> <slots> <instance tail>
    %%
	%<instance>.ins = newins(`&%'THE'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newSlots(%<slots>.nams,
					%<slots>.whr,
					%<slots>.atrs,
					%<slots>.cnt,
					%<slots>.surr,
					%<slots>.dscr,
					%<slots>.ment,
					%<slots>.art,
					%<slots>.does,
					%<slots>.exts,
					%<slots>.vrbs,
					%<slots>.scrs));
	if (%<instance tail>.id != NULL)  /* END-id given */
	    if (!eqids(%ID.id, %<instance tail>.id))
		lmLog(`&%<instance tail>.id->srcp, 201, sevWAR, %ID.id->string);
    %%
    ;

<instance tail>		-- RETURNS: id
    = 'END' 'THE' <optional_id> '.'
    %% %<instance tail>.id = %<optional_id>.id; %%
    ;

<optional_heritage>		-- RETURNS: id
    =
    %%
	%<optional_heritage>.id = NULL;
    %%

    ! <heritage>
    %%
	%<optional_heritage>.id = %<heritage>.id;
    %%
    ;

<heritage>		-- RETURNS: id
    = 'ISA' <heritage_id>
    %% %<heritage>.id = %<heritage_id>.id; %%
    ;

<heritage_id>
    = ID
    %% %<heritage_id>.id = %ID.id; %%
    ;


<slots>			-- RETURNS: all!
    = 
    %%
	%<slots>.nams = NULL;
	%<slots>.whr = NULL;
	%<slots>.atrs = NULL;
	%<slots>.cnt = NULL;
	%<slots>.surr = NULL;
	%<slots>.dscr = NULL;
	%<slots>.ment = NULL;
	%<slots>.does = NULL;
	%<slots>.exts = NULL;
	%<slots>.vrbs = NULL;
	%<slots>.scrs = NULL;
    %%

    ! <slots> <slot>
    %%
	%<slots>.nams = concat(%<slots>.nams, %<slot>.nam, LIST_NAM);

	if (%<slots>.whr != NULL)
            /* WHERE clause already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "WHERE", "class/instance", NULL);
	else 
	    %<slots>.whr = %<slot>.whr;

	%<slots>.atrs = combine(%<slots>.atrs, %<slot>.atrs);

	if (%<slots>.cnt != NULL)
            /* CONTAINER properties already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "CONTAINER properties", "class/instance", NULL);
	else 
	    %<slots>.cnt = %<slot>.cnt;

	if (%<slots>.surr != NULL)
            /* SURROUNDINGS already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "SURROUNDINGS", "class/instance", NULL);
	else 
	    %<slots>.surr = %<slot>.surr;

	if (%<slots>.dscr != NULL)
            /* DESCRIPTION already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "DESCRIPTION", "class/instance", NULL);
	else 
	    %<slots>.dscr = %<slot>.dscr;

	if (%<slots>.ment != NULL)
            /* MENTIONED already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "MENTIONED", "class/instance", NULL);
	else 
	    %<slots>.ment = %<slot>.ment;

	if (%<slots>.art != NULL)
            /* ARTICLE already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "ARTICLE", "class/instance", NULL);
	else 
	    %<slots>.art = %<slot>.art;

	if (%<slots>.does != NULL)
            /* DOES/ENTERED already declared */
	    lmLogv(`&%<slot>.srcp, 204, sevERR, "DOES/ENTERED", "class/instance", NULL);
	else 
	    %<slots>.does = %<slot>.does;

	%<slots>.exts = concat(%<slots>.exts, %<slot>.ext, LIST_EXT);
	%<slots>.vrbs = concat(%<slots>.vrbs, %<slot>.vrb, LIST_VRB);
	%<slots>.scrs = concat(%<slots>.scrs, %<slot>.scr, LIST_SCR);
    %%
    ;


<slot>
    = <name>
    %%{ List *nam = %<name>.nam;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.nam = nam;
    }%%

    ! <where>
    %%{ WhrNod *whr = %<where>.whr;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.whr = whr;
    }%%

    ! <is> <attributes>				%+('EXIT', 'IN', 'ARTICLE')
    %%
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.atrs = %<attributes>.atrs;
    %%

    ! <container properties>
    %%{ CntNod *cnt = %<container properties>.cnt;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.cnt = cnt;
    }%%

    ! <surroundings>
    %%{ List *surr = %<surroundings>.surr;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.surr = surr;
    }%%

    ! <description>
    %%{ List *dscr = %<description>.stms;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.dscr = dscr;
    }%%

    ! <mentioned>
    %%{ List *ment = %<mentioned>.ment;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.ment = ment;
    }%%

    ! <article>
    %%{ List *art = %<article>.art;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.art = art;
    }%%

    ! <does>
    %%{ List *does = %<does>.does;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.does = does;
    }%%

    ! <exit>
    %%{ ExtNod *ext = %<exit>.ext;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.ext = ext;
    }%%

    ! <verb>
    %%{ VrbNod *vrb = %<verb>.vrb;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.vrb = vrb;
    }%%

    ! <script>
    %%{ ScrNod *scr = %<script>.scr;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<slot>.scr = scr;
    }%%
    ;


----> EXITS
<exit>			-- RETURNS: ext
    = 'EXIT' <id_list> 'TO' ID <optional_exit_body> '.'
    %%
	%<exit>.ext = newext(`&%'EXIT'.srcp,
			   %<id_list>.idList,
			   %ID.id,
			   %<optional_exit_body>.chks,
			   %<optional_exit_body>.stms);
	if (%<optional_exit_body>.id != NULL) { /* END-id given */
	    if (strcmp(%<id_list>.str, %<optional_exit_body>.id->string) != 0)
		lmLog(`&%<optional_exit_body>.id->srcp, 201, sevWAR, %<id_list>.str);
	}
    %%
    ;

<optional_exit_body>	-- RETURNS: chks, stms, id
    =
    %%
	%<optional_exit_body>.chks = NULL;
	%<optional_exit_body>.stms = NULL;
	%<optional_exit_body>.id = NULL;
    %%

    ! <optional_checks> <optional_does> 'END' 'EXIT' <optional_id>
    %%
	%<optional_exit_body>.chks = %<optional_checks>.chks;
	%<optional_exit_body>.stms = %<optional_does>.stms;
	if (%<optional_does>.qual != QUAL_DEFAULT)
	     lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
	%<optional_exit_body>.id = %<optional_id>.id;
    %%
    ;

--
-- Attributes
--

<optional_attributes>	-- RETURNS: atrs
    =
    %%
	%<optional_attributes>.atrs = NULL;
    %%

    ! <optional_attributes> <is> <attributes>			%+('ARTICLE')
    %%
	%<optional_attributes>.atrs = combine(%<optional_attributes>.atrs, %<attributes>.atrs);
    %%
    ;

<is>			-- RETURNS: srcp
    = 'IS'
    %%
	%<is>.srcp = %'IS'.srcp;
    %%

    ! 'ARE'
    %%
	%<is>.srcp = %'ARE'.srcp;
    %%

    ! 'HAS'
    %%
	%<is>.srcp = %'HAS'.srcp;
    %%
    ;

-- SURROUNDINGS
<surroundings>				-- RETURNS: surr
    = 'SURROUNDINGS' 
    %%
	%<surroundings>.surr = concat(NULL, newstm(`&%'SURROUNDINGS'.srcp,
						STM_NOP), LIST_STM);
    %%

    ! 'SURROUNDINGS' <statements>
    %%
	%<surroundings>.surr = %<statements>.stms;
    %%
    ;


<optional_description>	-- RETURNS: stms
    =
    %%
	%<optional_description>.stms = NULL;
    %%

    ! <description> 
    -- Propagate!
    ;

<description>		-- RETURNS: stms, srcp
    = 'DESCRIPTION' 
    %%
	%<description>.stms = concat(NULL, newstm(`&%'DESCRIPTION'.srcp,
							STM_NOP), LIST_STM);
	%<description>.srcp = %'DESCRIPTION'.srcp;
    %%

    ! 'DESCRIPTION' <statements>
    %%
	%<description>.stms = %<statements>.stms;
	%<description>.srcp = %'DESCRIPTION'.srcp;
    %%
    ;

<article>			-- RETURNS: art, srcp
    = 'ARTICLE' 
    %%
	%<article>.art = concat(NULL, newstm(`&%'ARTICLE'.srcp,
							STM_NOP), LIST_STM);
	%<article>.srcp = %'ARTICLE'.srcp;
    %%

    ! 'ARTICLE' <statements>
    %%
	%<article>.art = %<statements>.stms;
	%<article>.srcp = %'ARTICLE'.srcp;
    %%
    ;


<mentioned>		-- RETURNS: stms, srcp
    = 'MENTIONED' <statements>
    %%
	%<mentioned>.stms = %<statements>.stms;
	%<mentioned>.srcp = %'MENTIONED'.srcp;
    %%
    ;


<optional_names>		-- RETURNS: nams (a list of nam)
    =
    %%
	%<optional_names>.nams = NULL;
    %%

    ! <optional_names> <name>
    %%
	%<optional_names>.nams = concat(%<optional_names>.nams,
					     %<name>.nam, LIST_NAM);
    %%
    ;

<name>			-- RETURNS: nam
    = 'NAME' <ids>					%+('ARTICLE', 'IN', 'EXIT')
    %%
	%<name>.nam = %<ids>.idList;
    %%
    ;


---> CONTAINERS
<container properties>					-- RETURNS: cnt, srcp
    = 'CONTAINER' <container_body>
    %%
#ifndef FIXME
	syserr("UNIMPL: parser - newcnt");
#else
	%<container properties>.cnt = newcnt(`&%'CONTAINER'.srcp,
					  NULL,
					  %<container_body>.lims,
					  %<container_body>.stms,
					  %<container_body>.stms2);
        %<container properties>.srcp = %'CONTAINER'.srcp;
	adv.cnts = concat(adv.cnts, %<container properties>.cnt, LIST_CNT);
#endif
    %%
    ;


<container>		-- RETURNS: cnt
    = <container_header> <container_body> <container_tail>
    %%
#ifndef FIXME
	syserr("UNIMPL: parser - newcnt");
#else
	%<container>.cnt = newcnt(`&%<container_header>.srcp,
				%<container_header>.id,
				%<container_body>.lims,
				%<container_body>.stms,
				%<container_body>.stms2);
	if (%<container_tail>.id != NULL) { /* END-id given */
	    if (!eqids(%<container_header>.id, %<container_tail>.id))
		lmLog(`&%<container_tail>.id->srcp, 201, sevWAR, %<container_header>.id->string);
	}
#endif
    %%
    ;

<container_header>	-- RETURNS: srcp, id
    = 'CONTAINER' ID
    %%
	lmLog(`&%'CONTAINER'.srcp, 800, sevINF, "THE <id> ISA CONTAINER ---");
	%<container_header>.srcp = %'CONTAINER'.srcp;
	%<container_header>.id  = %ID.id;
    %%
    ;

<container_body>		-- RETURNS: lims, stms, stms2
    =  <optional_limits> <optional_header> <optional_empty>
    %%
	%<container_body>.lims  = %<optional_limits>.lims;
	%<container_body>.stms  = %<optional_header>.stms;
	%<container_body>.stms2 = %<optional_empty>.stms;
    %%
    ;

<container_tail>		-- RETURNS: id
    = 'END' 'CONTAINER' <optional_id> '.'
    %%
	%<container_tail>.id  = %<optional_id>.id;
    %%
    ;

<optional_limits>		-- RETURNS: lims
    =
    %%
	%<optional_limits>.lims = NULL;
    %%

    ! 'LIMITS' <limits>					%+('ARTICLE', 'IN', 'EXIT')
    %%
	%<optional_limits>.lims = %<limits>.lims;
    %%
    ;

<limits>			-- RETURNS: lims
    = <limit>
    %%
	%<limits>.lims = concat(NULL, %<limit>.lim, LIST_LIM);
    %%

    ! <limits> <limit>
    %%
	%<limits>.lims = concat(%<limits>.lims, %<limit>.lim, LIST_LIM);
    %%
    ;

<limit>			-- RETURNS: lim
    = <limit_attribute> 'THEN' <statements>			%-('QUIT', 'SAVE', 'RESTORE', 'EMPTY', 'RESTART')
    %%
	%<limit>.lim = newlim(`&%'THEN'.srcp,
			    %<limit_attribute>.atr,
			    %<statements>.stms);
    %%
    ;

<limit_attribute>		-- RETURNS: atr
    = <attribute definition>
    %%
	%<limit_attribute>.atr = %<attribute definition>.atr;
    %%

    ! 'COUNT' Integer
    %%
	%<limit_attribute>.atr = newatr(`&%'COUNT'.srcp,
				      TYPINT,
				      newid(`&%'COUNT'.srcp, "count"),
				      val(%Integer.chars), 0, 0);
    %%
    ;

<optional_header>		-- RETURNS: stms
    =
    %%
	%<optional_header>.stms = NULL;
    %%

    ! 'HEADER' <statements>
    %%
	%<optional_header>.stms = %<statements>.stms;
    %%
    ;

<optional_empty>		-- RETURNS: stms
    =
    %%
	%<optional_empty>.stms = NULL;
    %%

    ! 'ELSE' <statements>
    %%
	%<optional_empty>.stms = %<statements>.stms;
    %%
    ;

---> EVENTS
<event>			-- RETURNS: evt
    = <event_header> <statements> <event_tail>
    %%
	%<event>.evt = newevt(`&%<event_header>.srcp,
			    %<event_header>.id,
			    %<statements>.stms);
	if (%<event_tail>.id != NULL) { /* END-id given */
	    if (!eqids(%<event_header>.id, %<event_tail>.id))
		lmLog(`&%<event_tail>.id->srcp, 201, sevWAR, %<event_header>.id->string);
	}
    %%
    ;

<event_header>		-- RETURNS: srcp, id
    ='EVENT' ID
    %%
	%<event_header>.srcp = %'EVENT'.srcp;
	%<event_header>.id  = %ID.id;
    %%
    ;

<event_tail>		-- RETURNS: id
    = 'END' 'EVENT' <optional_id> '.'
    %%
	%<event_tail>.id = %<optional_id>.id;
    %%
    ;

----> SCRIPTS
<script>			-- RETURNS: scr
    = 'SCRIPT' <integer_or_id> '.' <optional_description> <step_list>
    %%
	%<script>.scr = newscr(`&%'SCRIPT'.srcp,
			     %<integer_or_id>.id,
			     %<integer_or_id>.val,
			     %<optional_description>.stms,
			     %<step_list>.stps);
    %%
    ;

<step_list>		-- RETURNS: stps
    = <step>
    %%
	%<step_list>.stps = concat(NULL, %<step>.stp, LIST_STP);
    %%

    ! <step_list> <step>
    %%
	%<step_list>.stps = concat(%<step_list>.stps, %<step>.stp, LIST_STP);
    %%
    ;

<step>			-- RETURNS: stp
    = 'STEP' <statements>
    %%
	%<step>.stp = newstp(`&%'STEP'.srcp,
			   0,
			   NULL,
			   %<statements>.stms);
    %%

    ! 'STEP' 'AFTER' Integer <statements>
    %%
	%<step>.stp = newstp(`&%'STEP'.srcp,
			   val(%Integer.chars),
			   NULL,
			   %<statements>.stms);
    %%

    ! 'STEP' 'WAIT' 'UNTIL' <expression> <statements>
    %%
	%<step>.stp = newstp(`&%'STEP'.srcp,
			   0,
			   %<expression>.exp,
			   %<statements>.stms);
    %%
    ;

----> RULES
<rule>			-- RETURNS: rul
    = 'WHEN' <expression> '=>' <statements>
    %%
	%<rule>.rul = newrul(`&%'WHEN'.srcp,
			   %<expression>.exp,
			   %<statements>.stms);
    %%
    ;

---> START
<start>
    = 'START' <where> '.' <optional_statements>
    %%
	adv.whr	 = %<where>.whr;
	adv.stms = %<optional_statements>.stms;
    %%
    ;

---> STATEMENTS
<optional_statements>	-- RETURNS: stms
    =
    %%
	%<optional_statements>.stms = NULL;
    %%

    ! <statements>
    %%
	%<optional_statements>.stms = %<statements>.stms;
    %%
    ;

<statements>		-- RETURNS: stms
    = <statement>
    %%
	%<statements>.stms = concat(NULL, %<statement>.stm, LIST_STM);
    %%

    ! <statements> <statement>
    %%
	%<statements>.stms = concat(%<statements>.stms, %<statement>.stm, LIST_STM);
    %%
    ;

<statement>		-- RETURNS: stm
    = <output_statement>
    %%
	%<statement>.stm = %<output_statement>.stm;
    %%

    ! <manipulation_statement>
    %%
	%<statement>.stm = %<manipulation_statement>.stm;
    %%

    ! <assignment_statement>
    %%
	%<statement>.stm = %<assignment_statement>.stm;
    %%

    ! <comparison_statement>
    %%
	%<statement>.stm = %<comparison_statement>.stm;
    %%

    ! <actor_statement>
    %%
	%<statement>.stm = %<actor_statement>.stm;
    %%

    ! <event_statement>
    %%
	%<statement>.stm = %<event_statement>.stm;
    %%

    ! <special_statement>
    %%
	%<statement>.stm = %<special_statement>.stm;
    %%
    ;

----> Output Statements
<output_statement>		-- RETURNS: stm
    = STRING
    %%
	%<output_statement>.stm = newstm(`&%STRING.srcp, STM_PRINT);
	%<output_statement>.stm->fields.print.fpos = %STRING.fpos;
	%<output_statement>.stm->fields.print.len = %STRING.len;
    %%

    ! 'DESCRIBE' <what> '.'
    %%
	%<output_statement>.stm = newstm(`&%'DESCRIBE'.srcp, STM_DESCRIBE);
	%<output_statement>.stm->fields.describe.wht = %<what>.wht;
    %%

    ! 'SAY' <expression> '.'
    %%
	%<output_statement>.stm = newstm(`&%'SAY'.srcp, STM_SAY);
	%<output_statement>.stm->fields.say.exp = %<expression>.exp;
    %%

    ! 'LIST' <what> '.'
    %%
	%<output_statement>.stm = newstm(`&%'LIST'.srcp, STM_LIST);
	%<output_statement>.stm->fields.list.wht = %<what>.wht;
    %%	  
    ;

<special_statement>	-- RETURNS: stm
    = 'QUIT' '.'
    %%
	%<special_statement>.stm = newstm(`&%'QUIT'.srcp, STM_QUIT);
    %%

    ! 'LOOK' '.'
    %%
	%<special_statement>.stm = newstm(`&%'LOOK'.srcp, STM_LOOK);
    %%

    ! 'SAVE' '.'
    %%
	%<special_statement>.stm = newstm(`&%'SAVE'.srcp, STM_SAVE);
    %%

    ! 'RESTORE' '.'
    %%
	%<special_statement>.stm = newstm(`&%'RESTORE'.srcp, STM_RESTORE);
    %%

    ! 'RESTART' '.'
    %%
	%<special_statement>.stm = newstm(`&%'RESTART'.srcp, STM_RESTART);
    %%

    ! 'SCORE' <optional_integer> '.'
    %%
	%<special_statement>.stm = newstm(`&%'SCORE'.srcp, STM_SCORE);
	if (%<optional_integer>.str != NULL) {
	    %<special_statement>.stm->fields.score.score =
						val(%<optional_integer>.str);
	    %<special_statement>.stm->fields.score.count = ++scocnt;
	} else
	    %<special_statement>.stm->fields.score.count = 0;
    %%

    ! 'VISITS' Integer '.'
    %%
	%<special_statement>.stm = newstm(`&%'VISITS'.srcp, STM_VISITS);
	%<special_statement>.stm->fields.visits.count = val(%Integer.chars);
    %%

    ! 'SYSTEM' STRING '.'
    %%
	%<special_statement>.stm = newstm(`&%'SYSTEM'.srcp, STM_SYSTEM);
	%<special_statement>.stm->fields.system.fpos = %STRING.fpos;
	%<special_statement>.stm->fields.system.len = %STRING.len;
    %%
    ;
	

----> Manipulation Statements
<manipulation_statement>			-- RETURNS: stm
    = 'EMPTY' <what> <optional_where> '.'
    %%
	%<manipulation_statement>.stm = newstm(`&%'EMPTY'.srcp, STM_EMPTY);
	%<manipulation_statement>.stm->fields.empty.wht = %<what>.wht;
	%<manipulation_statement>.stm->fields.empty.whr = %<optional_where>.whr;
    %%	  

    ! 'LOCATE' <what> <where> '.'
    %%
	%<manipulation_statement>.stm = newstm(`&%'LOCATE'.srcp, STM_LOCATE);
	%<manipulation_statement>.stm->fields.locate.wht = %<what>.wht;
	%<manipulation_statement>.stm->fields.locate.whr = %<where>.whr;
    %%	  
    ;


----> Event Statements
<event_statement>			-- RETURNS: stm
    = 'SCHEDULE' ID <optional_where> 'AFTER' <expression> '.'
    %%
	%<event_statement>.stm = newstm(`&%'SCHEDULE'.srcp, STM_SCHEDULE);
	%<event_statement>.stm->fields.schedule.id  = %ID.id;
	%<event_statement>.stm->fields.schedule.whr  = %<optional_where>.whr;
	%<event_statement>.stm->fields.schedule.when = %<expression>.exp;
    %%	  

    ! 'CANCEL' ID '.'
    %%
	%<event_statement>.stm = newstm(`&%'CANCEL'.srcp, STM_CANCEL);
	%<event_statement>.stm->fields.cancel.id = %ID.id;
    %%	  
    ;


----> Assignment Statements
<assignment_statement>		-- RETURNS: stm
    = 'MAKE' <what> <something> '.'
    %%
	%<assignment_statement>.stm = newstm(`&%'MAKE'.srcp, STM_MAKE);
	%<assignment_statement>.stm->fields.make.wht = %<what>.wht;
	%<assignment_statement>.stm->fields.make.not = %<something>.not;
	%<assignment_statement>.stm->fields.make.atr = %<something>.id;
    %%

    ! 'SET' <attribute_reference> 'TO' <expression> '.'
    %%
	%<assignment_statement>.stm = newstm(`&%'SET'.srcp, STM_SET);
	%<assignment_statement>.stm->fields.set.atr = %<attribute_reference>.id;
	%<assignment_statement>.stm->fields.set.wht = %<attribute_reference>.wht;
	%<assignment_statement>.stm->fields.set.exp = %<expression>.exp;
    %%

    ! 'INCREASE' <attribute_reference> <optional_by_clause> '.'
    %%
	%<assignment_statement>.stm = newstm(`&%'INCREASE'.srcp, STM_INCR);
	%<assignment_statement>.stm->fields.incr.atr = %<attribute_reference>.id;
	%<assignment_statement>.stm->fields.incr.wht = %<attribute_reference>.wht;
	%<assignment_statement>.stm->fields.incr.step = %<optional_by_clause>.exp;
    %%

    ! 'DECREASE' <attribute_reference> <optional_by_clause> '.'
    %%
	%<assignment_statement>.stm = newstm(`&%'DECREASE'.srcp, STM_DECR);
	%<assignment_statement>.stm->fields.incr.atr = %<attribute_reference>.id;
	%<assignment_statement>.stm->fields.incr.wht = %<attribute_reference>.wht;
	%<assignment_statement>.stm->fields.incr.step = %<optional_by_clause>.exp;
    %%
    ;

<optional_by_clause>
    =
    %%
	%<optional_by_clause>.exp = NULL;
    %%

    ! 'BY' <expression>
    %%
	%<optional_by_clause>.exp = %<expression>.exp;
    %%
    ;


----> Comparison Statements
<comparison_statement>
    = <if_statement>
    %%
	%<comparison_statement>.stm = %<if_statement>.stm;
    %%

    ! <depending_statement>
    %%
	%<comparison_statement>.stm = %<depending_statement>.stm;
    %%
    ;


<if_statement>			-- RETURNS: stm
    = 'IF' <expression> 'THEN' <statements> <optional_elsif_list> <optional_else_part> 'END' 'IF' '.'
    %%
	%<if_statement>.stm = newstm(`&%'IF'.srcp, STM_IF);
	%<if_statement>.stm->fields.iff.exp = %<expression>.exp;
	%<if_statement>.stm->fields.iff.thn = %<statements>.stms;
	if (%<optional_elsif_list>.stms == NULL)
	    %<if_statement>.stm->fields.iff.els = %<optional_else_part>.stms;
	else {
	    /* Connect the else_part to the elsif_list */
	    %<optional_elsif_list>.stms->tail->element.stm->fields.iff.els =
			%<optional_else_part>.stms;
	    %<optional_elsif_list>.stms->next = NULL;
	    %<if_statement>.stm->fields.iff.els = %<optional_elsif_list>.stms;
	}
    %%
    ;

<optional_elsif_list>
    =
    %%
	%<optional_elsif_list>.stms = NULL;
    %%

    ! <elsif_list>
    %%
	%<optional_elsif_list>.stms = %<elsif_list>.stms;
    %%
    ;
    
<elsif_list>		-- RETURNS: stms
    = 'ELSIF' <expression> 'THEN' <statements>
    %%{
	StmNod *stm;

	stm = newstm(`&%'ELSIF'.srcp, STM_IF);
	stm->fields.iff.exp = %<expression>.exp;
	stm->fields.iff.thn = %<statements>.stms;
	stm->fields.iff.els = NULL;

	/* Now make a list of the ELSIF */
	%<elsif_list>.stms = concat(NULL, stm, LIST_STM);
    }%%

    ! <elsif_list> 'ELSIF' <expression> 'THEN' <statements>
    %%{
	StmNod *stm;

	stm = newstm(`&%'ELSIF'.srcp, STM_IF);
	stm->fields.iff.exp = %<expression>.exp;
	stm->fields.iff.thn = %<statements>.stms;
	stm->fields.iff.els = NULL;

	/* Now connect it to the previous ELSIFs, I.e connect the */
	/* else-part of the last element in the elsif_list to this */
	/* IF-statement and also concat this element to the list so */
	/* we'll know were the end is next time */
	%<elsif_list>.stms->tail->element.stm->fields.iff.els = concat(NULL, stm, LIST_STM);
	%<elsif_list>.stms = concat(%<elsif_list>.stms, stm, LIST_STM);
    }%%
    ;

<optional_else_part>		-- RETURNS: stms
    =
    %%
	%<optional_else_part>.stms = NULL;
    %%

    ! 'ELSE' <statements>
    %%
	%<optional_else_part>.stms = %<statements>.stms;
    %%
    ;

<depending_statement>
    = 'DEPENDING' 'ON' <primary> <depend_cases> 'END' 'DEPEND' '.'
    %%{ StmNod *stm;
	stm = newstm(`&%'DEPENDING'.srcp, STM_DEPEND);
	stm->fields.depend.exp = %<primary>.exp;
	stm->fields.depend.cases = %<depend_cases>.cases;

	%<depending_statement>.stm = stm;
    }%%
    ;

<depend_cases>				-- RETURNS: cases
    = <depend_case>
    %%
	%<depend_cases>.cases = concat(NULL, %<depend_case>.stm, LIST_CASE);
    %%

    ! <depend_cases> <depend_case>
    %%
	%<depend_cases>.cases = concat(%<depend_cases>.cases, %<depend_case>.stm, LIST_CASE);
    %%
    ;

<depend_case>				-- RETURNS: stm
    = <right_hand_side> ':' <statements>
    %%
        %<depend_case>.stm = newstm(`&%':'.srcp, STM_DEPCASE);
        %<depend_case>.stm->fields.depcase.exp = %<right_hand_side>.exp;
        %<depend_case>.stm->fields.depcase.stms = %<statements>.stms;
    %%

    ! 'ELSE' <statements>
    %%
        %<depend_case>.stm = newstm(`&%'ELSE'.srcp, STM_DEPCASE);
        %<depend_case>.stm->fields.depcase.exp = NULL;
        %<depend_case>.stm->fields.depcase.stms = %<statements>.stms;
    %%
    ;

----> Actor statement
<actor_statement>			-- RETURNS: stm
    = 'USE' 'SCRIPT' <integer_or_id> <optional_for_actor> '.'
    %%
	%<actor_statement>.stm = newstm(`&%'USE'.srcp, STM_USE);
	%<actor_statement>.stm->fields.use.script = %<integer_or_id>.id;
	%<actor_statement>.stm->fields.use.scriptno = %<integer_or_id>.val;
	%<actor_statement>.stm->fields.use.actor = %<optional_for_actor>.id;
    %%
    ;

<optional_for_actor>	-- RETURNS: id
    =
    %%
	%<optional_for_actor>.id = NULL;
    %%

    ! 'FOR' ID
    %%
	%<optional_for_actor>.id = %ID.id;
    %%
    ;


---> EXPRESSIONS
<expression>		-- RETURNS: exp
    = <term>
    %%
	%<expression>.exp = %<term>.exp;
    %%

    ! <expression> 'OR' <term>
    %% { ExpNod *exp;
	exp = newexp(`&%'OR'.srcp, EXPBIN);
	exp->not	      = FALSE;
	exp->fields.bin.op    = OP_OR;;
	exp->fields.bin.left  = %<expression>.exp;
	exp->fields.bin.right = %<term>.exp;
	%<expression>.exp = exp;
    } %%
    ;

<term>			-- RETURNS: exp
    = <factor>
    %%
	%<term>.exp = %<factor>.exp;
    %%

    ! <term> 'AND' <factor>
    %% { ExpNod *exp;
	exp = newexp(`&%'AND'.srcp, EXPBIN);
	exp->not	      = FALSE;
	exp->fields.bin.op    = OP_AND;
	exp->fields.bin.left  = %<term>.exp;
	exp->fields.bin.right = %<factor>.exp;
	%<term>.exp = exp;
    } %%
    ;

<factor>			-- RETURNS: exp
    = <primary>
    %%
	%<factor>.exp = %<primary>.exp;
    %%

    ! <primary> <right_hand_side>
    %%
        /* <right_hand_side> contains the top expr, hang in the <primary> and
           propagate that node */
        switch (%<right_hand_side>.expKd) {
	case EXPBIN: %<right_hand_side>.exp->fields.bin.left = %<primary>.exp; break;
	case EXPWHR: %<right_hand_side>.exp->fields.whr.wht = %<primary>.exp; break;
	case EXPATR: %<right_hand_side>.exp->fields.atr.wht = %<primary>.exp; break;
	case EXPBTW: %<right_hand_side>.exp->fields.btw.val = %<primary>.exp; break;
	case EXPISA: %<right_hand_side>.exp->fields.isa.id = %<primary>.id; break;
	default: syserr("Unrecognized switch in <right_hand_side> semantic rule.");
	}
        %<factor>.exp = %<right_hand_side>.exp;
    %%
    ;

<right_hand_side>
    = <binop> <primary>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPBIN;
	exp = newexp(`&%<binop>.srcp, EXPBIN);
	exp->fields.bin.op = %<binop>.op;
	exp->fields.bin.right = %<primary>.exp;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> <relop> <primary>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPBIN;
	exp = newexp(`&%<relop>.srcp, EXPBIN);
	exp->not = %<optional_not>.not;
	exp->fields.bin.op = %<relop>.op;
	exp->fields.bin.right = %<primary>.exp;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> <where>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPWHR;
	exp = newexp(`&%<where>.srcp, EXPWHR);
	exp->not = %<optional_not>.not;
	exp->fields.whr.whr = %<where>.whr;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> 'ISA' <heritage_id>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPISA;
	exp = newexp(`&%'ISA'.srcp, EXPISA);
	exp->not = %<optional_not>.not;
	exp->fields.isa.id = %<heritage_id>.id;
	%<right_hand_side>.exp = exp;
    } %%

    ! <is> <something>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPATR;
	exp = newexp(`&%<is>.srcp, EXPATR);
	exp->not = %<something>.not;
	exp->fields.atr.atr = %<something>.id;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> 'BETWEEN' <factor> 'AND' <factor>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPBTW;
	exp = newexp(`&%'BETWEEN'.srcp, EXPBTW);
	exp->not = %<optional_not>.not;
	exp->fields.btw.low = %1<factor>.exp;
	exp->fields.btw.high = %2<factor>.exp;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> 'CONTAINS' <factor>
    %% { ExpNod *exp;
        %<right_hand_side>.expKd = EXPBIN;
	exp = newexp(`&%'CONTAINS'.srcp, EXPBIN);
	exp->not = %<optional_not>.not;
	exp->fields.bin.op = OP_CONTAINS;
	exp->fields.bin.right = %<factor>.exp;
	%<right_hand_side>.exp = exp;
    } %%
    ;


<primary>				-- RETURNS: exp
    = '(' <expression> ')'
    %%
	%<primary>.exp = %<expression>.exp;
    %%

    ! <optional_minus> Integer
    %%
	%<primary>.exp = newexp(`&%Integer.srcp, EXPINT);
	if (%<optional_minus>.minus)
	  %<primary>.exp->fields.val.val = -val(%Integer.chars);
	else
	  %<primary>.exp->fields.val.val = val(%Integer.chars);
    %%

    ! STRING
    %%
	%<primary>.exp = newexp(&%STRING.srcp, EXPSTR);
	%<primary>.exp->fields.str.fpos = %STRING.fpos;
	%<primary>.exp->fields.str.len = %STRING.len;
    %%

    ! <what>
    %%
	%<primary>.exp = newexp(`&%<what>.srcp, EXPWHT);
	%<primary>.exp->fields.wht.wht = %<what>.wht;
    %%

    ! <attribute_reference>
    %%
	%<primary>.exp = newexp(`&%<attribute_reference>.srcp, EXPATR);
	%<primary>.exp->fields.atr.atr = %<attribute_reference>.id;
	%<primary>.exp->fields.atr.wht = newexp(`&%<attribute_reference>.srcp, EXPWHT);
	%<primary>.exp->fields.atr.wht->fields.wht.wht = %<attribute_reference>.wht;
    %%

    ! <aggregate> <where>
    %%
	%<primary>.exp = newexp(`&%<aggregate>.srcp, EXPAGR);
	%<primary>.exp->fields.agr.agr	= %<aggregate>.agr;
	%<primary>.exp->fields.agr.atr = %<aggregate>.id;
	%<primary>.exp->fields.agr.whr	= %<where>.whr;
    %%

    ! 'RANDOM' <primary> 'TO' <primary>
    %%
	%<primary>.exp = newexp(`&%'RANDOM'.srcp, EXPRND);
	%<primary>.exp->fields.rnd.from	= %2<primary>.exp;
	%<primary>.exp->fields.rnd.to	= %3<primary>.exp;
    %%

    ! 'SCORE'
    %%
	%<primary>.exp = newexp(`&%'SCORE'.srcp, EXPSCORE);
    %%
    ;


<aggregate>			-- RETURNS: srcp, agr, id
    = 'SUM' 'OF' ID
    %%
	%<aggregate>.srcp = %'SUM'.srcp;
	%<aggregate>.agr = AGR_SUM;
	%<aggregate>.id = %ID.id;
    %%

    ! 'MAX' 'OF' ID
    %%
	%<aggregate>.srcp = %'MAX'.srcp;
	%<aggregate>.agr = AGR_MAX;
	%<aggregate>.id = %ID.id;
    %%

    ! 'COUNT'
    %%
	%<aggregate>.srcp = %'COUNT'.srcp;
	%<aggregate>.agr = AGR_COUNT;
	%<aggregate>.id = NULL;
    %%
    ;

---> MISCELLANEOUS
<something>		-- RETURNS: not, id
    = <optional_not> ID
    %%
	%<something>.not = %<optional_not>.not;
	%<something>.id = %ID.id;
    %%
    ;

<what>			-- RETURNS: srcp, wht
    = 'OBJECT'
    %%
	%<what>.wht = newwht(`&%'OBJECT'.srcp, WHT_OBJ, NULL);
	%<what>.srcp = %'OBJECT'.srcp;
    %%

    ! 'LOCATION'
    %%
	%<what>.wht = newwht(`&%'LOCATION'.srcp, WHT_LOC, NULL);
	%<what>.srcp = %'LOCATION'.srcp;
    %%

    ! ID
    %%
	%<what>.wht = newwht(`&%ID.id->srcp, WHT_ID, %ID.id);
	%<what>.srcp = %ID.id->srcp;
    %%
    ;


<optional_where>		-- RETURNS: whr
    =					%-('HERE', 'NEARBY', 'AT', 'IN')
    %%
        %<optional_where>.whr = newwhr(`&nulsrcp, WHR_DEFAULT, NULL);
    %%
    
    ! <where>
    %%
        %<optional_where>.whr = %<where>.whr;
    %%
    ;

<where>			-- RETURNS: srcp, whr
    = 'HERE'
    %%
        %<where>.whr = newwhr(`&%'HERE'.srcp, WHR_HERE, NULL);
	%<where>.srcp = %'HERE'.srcp;
    %%

    ! 'NEARBY'
    %%
        %<where>.whr = newwhr(`&%'NEARBY'.srcp, WHR_NEAR, NULL);
	%<where>.srcp = %'NEARBY'.srcp;
    %%

    ! 'AT' <what>
    %%
        %<where>.whr = newwhr(`&%'AT'.srcp, WHR_AT, %<what>.wht);
	%<where>.srcp = %'AT'.srcp;
    %%

    ! 'IN' <what>
    %%
        %<where>.whr = newwhr(`&%'IN'.srcp, WHR_IN, %<what>.wht);
	%<where>.srcp = %'IN'.srcp;
    %%
    ;

<binop>			-- RETURNS: op, srcp
    = '+'
    %%
	%<binop>.op = OP_PLUS;
	%<binop>.srcp = %'+'.srcp;
    %%

    ! '-'
    %%
	%<binop>.op = OP_MINUS;
	%<binop>.srcp = %'-'.srcp;
    %%

    ! '*'
    %%
	%<binop>.op = OP_MULT;
	%<binop>.srcp = %'*'.srcp;
    %%

    ! '/'
    %%
	%<binop>.op = OP_DIV;
	%<binop>.srcp = %'/'.srcp;
    %%
    ;


<relop>			-- RETURNS: op, srcp
    = '<>'
    %%
        %<relop>.op   = OP_NE;
	%<relop>.srcp = %'<>'.srcp;
    %%

    ! '='
    %%
        %<relop>.op   = OP_EQ;
	%<relop>.srcp = %'='.srcp;
    %%

    ! '=='
    %%
        %<relop>.op   = OP_EXACT;
	%<relop>.srcp = %'=='.srcp;
    %%

    ! '>='
    %%
        %<relop>.op   = OP_GE;
	%<relop>.srcp = %'>='.srcp;
    %%

    ! '<='
    %%
        %<relop>.op   = OP_LE;
	%<relop>.srcp = %'<='.srcp;
    %%

    ! '>'
    %%
        %<relop>.op   = OP_GT;
	%<relop>.srcp = %'>'.srcp;
    %%

    ! '<'
    %%
        %<relop>.op   = OP_LT;
	%<relop>.srcp = %'<'.srcp;
    %%
    ;



<optional_qual>		-- RETURNS: qual, srcp
    =
    %%
        %<optional_qual>.qual = QUAL_DEFAULT;
    %%

    ! 'BEFORE'
    %%
        %<optional_qual>.qual = QUAL_BEFORE;
        %<optional_qual>.srcp = %'BEFORE'.srcp;
    %%

    ! 'AFTER'
    %%
        %<optional_qual>.qual = QUAL_AFTER;
        %<optional_qual>.srcp = %'AFTER'.srcp;
    %%

    ! 'ONLY'
    %%
        %<optional_qual>.qual = QUAL_ONLY;
        %<optional_qual>.srcp = %'ONLY'.srcp;
    %%
    ;


<optional_not>
    =
    %%
        %<optional_not>.not = FALSE;
    %%

    ! 'NOT'
    %%
        %<optional_not>.not = TRUE;
    %%
    ;

<optional_id>
    =
    %%
        %<optional_id>.id = NULL;
    %%

    ! ID
    %%
        %<optional_id>.id = %ID.id;
    %%
    ;

<ids>			-- RETURNS: idList
    = ID
    %%
        %<ids>.idList = concat(NULL, %ID.id, LIST_ID);
    %%

    ! <ids> ID
    %%
        %<ids>.idList = concat(%<ids>.idList, %ID.id, LIST_ID);
    %%
    ;

<id_list>			-- RETURNS: str, idList
    = ID
    %%
        %<id_list>.str = newstr(%ID.id->string);
        %<id_list>.idList = concat(NULL, %ID.id, LIST_ID);
    %%

    ! <id_list> ',' ID
    %%
        %<id_list>.str = %<id_list>.str;
        %<id_list>.idList = concat(%<id_list>.idList, %ID.id, LIST_ID);
    %%
    ;

<optional_integer>	-- RETURNS: str
    =
    %%
        %<optional_integer>.str = NULL;
    %%

    ! Integer
    %%
        %<optional_integer>.str = newstr(%Integer.chars);
    %%
    ;

<optional_minus>			-- RETURNS: minus
    =
    %%
	%<optional_minus>.minus = FALSE;
    %%

    ! '-'
    %%
	%<optional_minus>.minus = TRUE;
    %%
    ;

<attribute_reference>		-- RETURNS: srcp, wht, id
    = ID 'OF' <what>
    %%
	%<attribute_reference>.srcp = %'OF'.srcp;
	%<attribute_reference>.id = %ID.id;
	%<attribute_reference>.wht = %<what>.wht;
    %%
    ;

<integer_or_id>			-- RETURNS: id, val
    = Integer
    %%
	%<integer_or_id>.val = val(%Integer.chars);
	%<integer_or_id>.id = NULL;
    %%

    ! ID
    %%
	%<integer_or_id>.val = 0;
	%<integer_or_id>.id = %ID.id;
    %%
    ;

ID
    = Identifier
    %%
	%ID.id = newid(`&%Identifier.srcp, %Identifier.chars);
    %%

    ! 'DEFAULT'
    %%
        %ID.id = newid(`&%'DEFAULT'.srcp, "default");
    %%

    ! 'THE'
    %%
        %ID.id = newid(`&%'THE'.srcp, "the");
    %%

    ! 'ARTICLE'
    %%
        %ID.id = newid(`&%'ARTICLE'.srcp, "article");
    %%

    ! 'MESSAGE'
    %%
        %ID.id = newid(`&%'MESSAGE'.srcp, "message");
    %%

    ! 'QUIT'
    %%
        %ID.id = newid(`&%'QUIT'.srcp, "quit");
    %%

    ! 'SAVE'
    %%
        %ID.id = newid(`&%'SAVE'.srcp, "save");
    %%

    ! 'RESTORE'
    %%
        %ID.id = newid(`&%'RESTORE'.srcp, "restore");
    %%

    ! 'RESTART'
    %%
        %ID.id = newid(`&%'RESTART'.srcp, "restart");
    %%

    ! 'WAIT'
    %%
        %ID.id = newid(`&%'WAIT'.srcp, "wait");
    %%

    ! 'BETWEEN'
    %%
        %ID.id = newid(`&%'BETWEEN'.srcp, "between");
    %%

    ! 'CONTAINS'
    %%
        %ID.id = newid(`&%'CONTAINS'.srcp, "contains");
    %%

    ! 'ON'
    %%
        %ID.id = newid(`&%'ON'.srcp, "on");
    %%

    ! 'IN'
    %%
        %ID.id = newid(`&%'IN'.srcp, "in");
    %%

    ! 'AFTER'
    %%
        %ID.id = newid(`&%'AFTER'.srcp, "after");
    %%

    ! 'BEFORE'
    %%
        %ID.id = newid(`&%'BEFORE'.srcp, "before");
    %%

    ! 'CHECK'
    %%
        %ID.id = newid(`&%'CHECK'.srcp, "check");
    %%

    ! 'DEPEND'
    %%
        %ID.id = newid(`&%'DEPEND'.srcp, "depend");
    %%

    ! 'EXIT'
    %%
        %ID.id = newid(`&%'EXIT'.srcp, "exit");
    %%

    ! 'FOR'
    %%
        %ID.id = newid(`&%'FOR'.srcp, "for");
    %%

    ! 'ISA'
    %%
        %ID.id = newid(`&%'ISA'.srcp, "isa");
    %%

    ! 'LIMITS'
    %%
        %ID.id = newid(`&%'LIMITS'.srcp, "limits");
    %%

    ! 'THING'
    %%
	%ID.id = newid(`&%'THING'.srcp, "thing");
    %%
    ;


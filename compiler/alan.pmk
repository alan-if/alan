%%OPTIONS

	Prefix 'pm';
	Listerprefix 'lm';
--	List Grammar, Statistics;
	List Grammar, Statistics, Items;
	StackLimit 64;
	Pack RDS;
	Line;
--	Debug;
	No Resolve;

%%IMPORT

#include "util.h"
#include "acode.h"

#include "types.h"
#include "smScan.h"
#include "token.h"

#include "lmList.h"

#include "alt.h"
#include "evt.h"
#include "lim.h"
#include "msg.h"
#include "opt.h"
#include "sco.h"
#include "str.h"
#include "syn.h"
#include "adv_x.h"
#include "add_x.h"
#include "article_x.h"
#include "atr_x.h"
#include "cla_x.h"
#include "chk_x.h"
#include "cnt_x.h"
#include "elm_x.h"
#include "exp_x.h"
#include "ext_x.h"
#include "id_x.h"
#include "ins_x.h"
#include "description_x.h"
#include "initialize_x.h"
#include "resource_x.h"
#include "rul_x.h"
#include "lst_x.h"
#include "prop_x.h"
#include "res_x.h"
#include "scr_x.h"
#include "stm_x.h"
#include "stp_x.h"
#include "stx_x.h"
#include "sym_x.h"
#include "srcp_x.h"
#include "vrb_x.h"
#include "whr_x.h"
#include "wht_x.h"

%%SCANNER

    smScan(lexContext, token);


%%INSERTSYMBOL

{
  static int idno = 1;

    /* Make the requested token */
    token->code = code;
    if (token->code == sm_MAIN_IDENTIFIER_Token) {
      sprintf(token->chars, "$identifier#%d", idno++);
#ifdef INSERTIDINMESSAGE
      strcat(insStr, " ('");
      strcat(insStr, token->chars);
      strcat(insStr, "')");
#endif
    } else
      strcpy(token->chars, symString);
}

%%DECLARATIONS

static int val(char str[])
{
  int temp;

  sscanf(str, "%d", &temp);
  return(temp);
}


%%ATTRIBUTES

  add %% AddNode *%1%%,
  agr %% AggregateKind %1%%,
  alt %% Alternative *%1%%,
  alts %% List *%1%%,
  article %% Article *%1%%,
  atr %% Attribute *%1%%,
  atrs %% List *%1%%,
  bits %% int %1%%,
  cases %% List *%1%%,
  chk %% CheckNode *%1%%,
  chks %% List *%1%%,
  cla %% Class *%1%%,
  clas %% List *%1%%,
  cnt %% Container *%1%%,
  cnts %% List *%1%%,
  definite %% Article *%1%%,
  definiteIsForm %% Bool %1%%,
  definiteSrcp %% Srcp %1%%,
  description %% Description *%1%%,
  descriptionCheckSrcp %% Srcp %1%%,
  descriptionChecks %% List *%1%%,      -- of Checks: descriptionCheck-clause,
  descriptionDoes %% List *%1%%,        -- of Statements: descriptionDoes-clause,
  descriptionSrcp %% Srcp %1%%,
  elm %% Element *%1%%,
  elms %% List *%1%%,
  entered %% List *%1%%,
  enteredSrcp %% Srcp %1%%,
  initialize %% Initialize *%1%%,
  evt %% Event *%1%%,
  evts %% List *%1%%,
  exp %% Expression *%1%%,
  exps %% List *%1%%,
  ext %% Exit *%1%%,
  exts %% List *%1%%,
  first %% Bool %1%%,
  form %% List *%1%%,
  id %% Id *%1%%,
  idList %% List *%1%%,
  idList2 %% List *%1%%,
  indefinite %% Article *%1%%,
  ins %% Instance *%1%%,                -- Instance
  inss %% List *%1%%,                   -- of Instances
  isForm %% Bool %1%%,
  lim %% LimNod *%1%%,
  lims %% List *%1%%,
  mentioned %% List *%1%%,              -- of Statement: mentioned-clause,
  mentionedSrcp %% Srcp %1%%,
  isMeta %% Bool %1%%,
  minus %% Bool %1%%,
  msg %% Message *%1%%,
  msgs %% List *%1%%,
  nam %% List *%1%%,                    -- of NamNod: name-clause
  nams %% List *%1%%,                   -- of NamNods: name-clause list (list of lists)
  negative %% Article *%1%%,
  on_or_off %% Bool %1%%,
  op %% OperatorKind %1%%,
  opaque %% Bool %1%%,
  present %% Bool %1%%,                 -- an optional marker was present
  prompt %% List *%1%%,
  pronouns %% List *%1%%,
  pronounsSrcp %% Srcp %1%%,
  qual %% QualKind %1%%,
  res %% Restriction *%1%%,
  ress %% List *%1%%,
  restrictionKind %% RestrictionKind %1%%,
  rul %% RulNod *%1%%,
  ruls %% List *%1%%,
  sayForm %% SayForm %1%%,
  scr %% Script *%1%%,
  scrs %% List *%1%%,
  set %% List *%1%%,
  srcp %% Srcp %1%%,
  srcp2 %% Srcp %1%%,
  stm %% Statement *%1%%,
  stms %% List *%1%%,
  stms2 %% List *%1%%,
  stms3 %% List *%1%%,
  stp %% Step *%1%%,
  stps %% List *%1%%,
  str %% char *%1%%,
  stx %% Syntax *%1%%,
  stxs %% List *%1%%,
  syn %% Synonym *%1%%,
  syns %% List *%1%%,
  transitivity %% Transitivity %1%%,
  val %% int %1%%,
  vrb %% Verb *%1%%,
  vrbs %% List *%1%%,
  whr %% Where *%1%%,
  wht %% What *%1%%,
  wordOrChar %% Bool %1%%;

%%TERMINALS

    Identifier = 2,1,1 => '<identifier>';
    Integer = 3, 2, 1;

%%RECOVERY

    Fiducial('verb', 'the', 'every', 'exit', 'event', 'start',
             'syntax', 'script', 'synonyms', 'when',
             'mentioned', 'attributes', 'description', 'end', 'check', 'quit');

    Separator(',');

    Skip(Identifier, Integer, '.');

%%RULES

--> ADVENTURE
<adventure>
    = <optional_options> <declarations> <start>
    ;

---> OPTIONS
<optional_options>	-- RETURNS: <nothing>
    =
    ! ('options'|'option') <options>
    ;

<options>			-- RETURNS: <nothing>
    = <option>
    ! <options> <option>
    ;

<option>			-- RETURNS: <nothing>
    = ID '.'
    %%
        optBool(%ID.id->string, `&%ID.id->srcp, TRUE);
    %%

    ! ID ID '.'
    %%
        optenum(%ID.id->string, `&%ID.id->srcp, %2ID.id->string);
    %%

    ! ID Integer '.'
    %%
        optint(%ID.id->string, `&%ID.id->srcp, val(%Integer.chars));
    %%
    ;

---> DECLARATIONS
<declarations>
    =
    ! <declarations> <declaration>
    ;

<declaration>
    = <synonyms>
    %% adv.syns = combine(adv.syns, %<synonyms>.syns);%%

    ! <messages>
    %% adv.msgs = combine(adv.msgs, %<messages>.msgs); %%

    ! <syntax>
    %% adv.stxs = combine(adv.stxs, %<syntax>.stxs); %%

    ! <verb>
    %% adv.vrbs = concat(adv.vrbs, %<verb>.vrb, VERB_LIST); %%

    ! <class>
    %% adv.clas = concat(adv.clas, %<class>.cla, CLASS_LIST); %%

    ! <addition>
    %% adv.adds = concat(adv.adds, %<addition>.add, ADD_LIST); %%

    ! <instance>
    %% adv.inss = concat(adv.inss, %<instance>.ins, INSTANCE_LIST); %%

    ! <event>
    %% adv.evts = concat(adv.evts, %<event>.evt, EVENT_LIST); %%

    ! <rule>
    %% adv.ruls = concat(adv.ruls, %<rule>.rul, RULE_LIST); %%

    ! <prompt>
    %%
      if (adv.prompt != NULL)
        lmLog(`&%<prompt>.srcp, 308, sevWAR, "PROMPT");
      adv.prompt = %<prompt>.prompt;
    %%

    ! 'import'
    ;

<prompt>
    = 'prompt' <statements>
    %%
      %<prompt>.prompt = %<statements>.stms;
      %<prompt>.srcp = %'prompt'.srcp;
    %%
    ;

----> ATTRIBUTES
<attributes>		-- RETURNS: atrs
    = <attribute_definition> '.'
    %%
        %<attributes>.atrs = newList(%<attribute_definition>.atr, ATTRIBUTE_LIST);
    %%

    ! <attributes> <attribute_definition> '.'
    %%
        %<attributes>.atrs = concat(%<attributes>.atrs, %<attribute_definition>.atr, ATTRIBUTE_LIST);
    %%
    ;

<attribute_definition>		-- RETURNS: atr
    = ID
    %%
        %<attribute_definition>.atr = newBooleanAttribute(%ID.id->srcp, %ID.id, TRUE);
    %%

    ! 'not' ID
    %%
        %<attribute_definition>.atr = newBooleanAttribute(%ID.id->srcp, %ID.id, FALSE);
    %%

    ! ID <optional_minus> Integer
    %%
        if (%<optional_minus>.minus)
           %<attribute_definition>.atr = newIntegerAttribute(%ID.id->srcp, %ID.id, -val(%Integer.chars));
        else
           %<attribute_definition>.atr = newIntegerAttribute(%ID.id->srcp, %ID.id, val(%Integer.chars));
    %%

    ! ID STRING
    %%
        %<attribute_definition>.atr = newStringAttribute(%ID.id->srcp, %ID.id, %STRING.fpos, %STRING.len);
    %%
    ! ID ID
    %%
        %<attribute_definition>.atr = newReferenceAttribute(%1ID.id->srcp, %1ID.id, %2ID.id);
    %%

    ! ID '{' <optional_members> '}'
    %%
        %<attribute_definition>.atr = newSetAttribute(%ID.id->srcp, %ID.id,
                                                      newSetExpression(%'{'.srcp, %<optional_members>.set));
    %%
    ;

<optional_members>
    =
    %% %<optional_members>.set = NULL; %%

    ! <set_members>
    %% %<optional_members>.set = %<set_members>.set; %%
    ;

<set_members>				-- RETURNS: set
    = <set_member>
    %%
        %<set_member>.set = newList(%<set_member>.exp, EXPRESSION_LIST);
    %%

    ! <set_members> ',' <set_member>
    %%
        %<set_members>.set = concat(%<set_members>.set, %<set_member>.exp, EXPRESSION_LIST);
    %%
    ;

<set_member>				-- RETURNS exp
    = <what>
    %%
        %<set_member>.exp = %<what>.exp;
    %%

    ! <optional_minus> Integer
    %%
        %<set_member>.exp = newIntegerExpression(%Integer.srcp, %<optional_minus>.minus?-val(%Integer.chars):val(%Integer.chars));
    %%

    ! STRING
    %%
        %<set_member>.exp = newStringExpression(%STRING.srcp, %STRING.fpos, %STRING.len);
    %%
    ;

---> <SYNONYMS>
<synonyms>			-- RETURNS: syns
    = 'synonyms' <synonym_list>
    %%
        %<synonyms>.syns = %<synonym_list>.syns;
    %%
    ;

<synonym_list>			-- RETURNS: syns
    = <synonym_declaration>
    %%
        %<synonym_list>.syns = newList(%<synonym_declaration>.syn, SYNONYM_LIST);
    %%

    ! <synonym_list> <synonym_declaration>
    %%
        %<synonym_list>.syns = concat(%<synonym_list>.syns, %<synonym_declaration>.syn, SYNONYM_LIST);
    %%
    ;

<synonym_declaration>				-- RETURNS: syn
    = <id_list> '=' ID '.'
    %%
        %<synonym_declaration>.syn = newSynonym(`&%'='.srcp, %<id_list>.idList, %ID.id);
    %%
    ;

---> <MESSAGES>
<messages>			-- RETURNS: msgs
    = 'message' <message_list>
    %%
        %<messages>.msgs = %<message_list>.msgs;
    %%
    ;

<message_list>			-- RETURNS: msgs
    = <message>
    %%
        %<message_list>.msgs = newList(%<message>.msg, MESSAGE_LIST);
    %%

    ! <message_list> <message>
    %%
        %<message_list>.msgs = concat(%<message_list>.msgs, %<message>.msg, MESSAGE_LIST);
    %%
    ;

<message>				-- RETURNS: msg
    = ID ':' <statements>			%+('visits')
    %%
        %<message>.msg = newMessage(`&%':'.srcp,
                                    %ID.id,
                                    %<statements>.stms);
    %%

    ;

---> <SYNTAX>				-- RETURNS: stxs
<syntax>
    = 'syntax' <syntax_list>
    %%
        %<syntax>.stxs = %<syntax_list>.stxs;
    %%
    ;

<syntax_list>
    = <syntax_item>
    %%
        %<syntax_list>.stxs = newList(%<syntax_item>.stx, SYNTAX_LIST);
    %%

    ! <syntax_list> <syntax_item>
    %%
        %<syntax_list>.stxs = concat(%<syntax_list>.stxs, %<syntax_item>.stx, SYNTAX_LIST);
    %%
    ;

<syntax_item>
    = ID '=' <syntax_elements> <optional_syntax_restrictions>
    %%
        %<syntax_item>.stx = newSyntax(%'='.srcp,
                                       %ID.id,
                                       concat(%<syntax_elements>.elms,
                                              newEndOfSyntax(),
                                              ELEMENT_LIST),
                                       %<optional_syntax_restrictions>.ress,
	                                   %<optional_syntax_restrictions>.srcp);
    %%
    ;

<syntax_elements>
    = <syntax_element>
    %%
        %<syntax_elements>.elms = newList(%<syntax_element>.elm, ELEMENT_LIST);
    %%

    ! <syntax_elements> <syntax_element>
    %%
        %<syntax_elements>.elms = concat(%<syntax_elements>.elms,
                                         %<syntax_element>.elm,
                                         ELEMENT_LIST);
    %%
    ;

<syntax_element>
    = ID
    %%
        %<syntax_element>.elm = newWordElement(%ID.id->srcp, %ID.id);
    %%

    ! '(' ID ')' <optional_indicators>

    %%
        %<syntax_element>.elm = newParameterElement(%ID.id->srcp,
                                                    %ID.id,
                                                    %<optional_indicators>.bits);
    %%
    ;

<optional_indicators>
    =
    %%
        %<optional_indicators>.bits = 0;
    %%

    ! <optional_indicators> <indicator>
    %%
        %<optional_indicators>.bits |= %<indicator>.bits;
    %%
    ;

<indicator>
    = '*'
    %%
        %<indicator>.bits = MULTIPLEBIT;
    %%

    ! '!'
    %%
        %<indicator>.bits = OMNIBIT;
    %%
    ;

-- A syntax restriction is a definition of which classes a syntax parameter may
-- belong to. A parameter can be restricted to a list of classes in the same
-- restriction clause. It is also possible to restrict a parameter using
-- multiple clauses since we want different ELSE printouts depending on what
-- it was not. Also inheritance will make a parameter be restricted in multiple
-- clauses following the class hierarchy.
<syntax_restriction_clauses>
    = <syntax_restriction>
    %%
        %<syntax_restriction_clauses>.ress = newList(%<syntax_restriction>.res, RESTRICTION_LIST);
    %%

    ! <syntax_restriction_clauses> 'and' <syntax_restriction>
    %%
        %<syntax_restriction_clauses>.ress = concat(%<syntax_restriction_clauses>.ress,
                                                    %<syntax_restriction>.res, RESTRICTION_LIST);
    %%
    ;

<syntax_restriction>
    = ID 'isa' <restriction_class> 'else' <statements>		%+('visits')
    %%
        %<syntax_restriction>.res = newRestriction(%'isa'.srcp,
                                                   %ID.id,
                                                   %<restriction_class>.restrictionKind,
                                                   %<restriction_class>.id,
                                                   %<statements>.stms);
    %%
    ;

<restriction_class>			-- RETURNS: id, restrictionKind
    = ID
    %%
        %<restriction_class>.id = %ID.id;
        %<restriction_class>.restrictionKind = ID_RESTRICTION;
    %%

    ! 'container'
    %%
        %<restriction_class>.id = NULL;
        %<restriction_class>.restrictionKind = CONTAINER_RESTRICTION;
    %%
    ;

<optional_syntax_restrictions>
    = '.'
    %%
        %<optional_syntax_restrictions>.ress = NULL;
    %%

    ! 'where' <syntax_restriction_clauses>
    %%
        %<optional_syntax_restrictions>.srcp = %'where'.srcp;
        %<optional_syntax_restrictions>.ress = %<syntax_restriction_clauses>.ress;
    %%
    ;


---> VERBS
<verb>			-- RETURNS: vrb
    = <verb_header> <verb_body> <verb_tail>
    %%
        %<verb>.vrb = newVerb(`&%<verb_header>.srcp,
                              %<verb_header>.idList,
                              %<verb_body>.alts,
                              %<verb_header>.isMeta);
        if (%<verb_tail>.id != NULL) { /* END-id given */
            if (compareStrings(%<verb_header>.str, %<verb_tail>.id->string) != 0)
                lmLog(`&%<verb_tail>.id->srcp, 200, sevWAR, %<verb_header>.str);
        }
    %%
    ;

<verb_header>		-- RETURNS: srcp, str, idList
    = <optional_meta> 'verb' <id_list>
    %%
        %<verb_header>.srcp   = %'verb'.srcp;
        %<verb_header>.str    = %<id_list>.str;
        %<verb_header>.idList = %<id_list>.idList;
        %<verb_header>.isMeta = %<optional_meta>.isMeta;
    %%
    ;

<optional_meta>      -- RETURNS: meta
    = 'meta' %% %<optional_meta>.isMeta = TRUE; %%
    !        %% %<optional_meta>.isMeta = FALSE; %%
    ;
    
<verb_body>
    = <simple_verb_body>
    %%
        %<verb_body>.alts = newList(newAlternative(%<simple_verb_body>.srcp,
                                                   NULL,
                                                   %<simple_verb_body>.chks,
                                                   %<simple_verb_body>.qual,
                                                   %<simple_verb_body>.stms),
                                    ALTERNATIVE_LIST);
    %%

    ! <verb_alternatives>
    %%
        %<verb_body>.alts = %<verb_alternatives>.alts;
    %%
    ;

<verb_alternatives>
    = <verb_alternative>
    %%
        %<verb_alternatives>.alts = newList(%<verb_alternative>.alt, ALTERNATIVE_LIST);
    %%

    ! <verb_alternatives> <verb_alternative>
    %%
        %<verb_alternatives>.alts = concat(%<verb_alternatives>.alts,
                                           %<verb_alternative>.alt,
                                           ALTERNATIVE_LIST);
    %%
    ;

<verb_alternative>
    = 'when' ID <simple_verb_body>
    %%
        %<verb_alternative>.alt = newAlternative(%'when'.srcp,
                                                 %ID.id,
                                                 %<simple_verb_body>.chks,
                                                 %<simple_verb_body>.qual,
                                                 %<simple_verb_body>.stms);
    %%
    ;

<simple_verb_body>		-- RETURNS: srcp, chks, stms, qual
    = <optional_checks> <optional_does>
    %%
        if (%<optional_does>.stms == NULL) /* No DOES */
            %<simple_verb_body>.srcp = %<optional_checks>.srcp;
        else
            %<simple_verb_body>.srcp = %<optional_does>.srcp;
        %<simple_verb_body>.chks = %<optional_checks>.chks;
        %<simple_verb_body>.qual = %<optional_does>.qual;
        %<simple_verb_body>.stms = %<optional_does>.stms;
    %%
    ;

<verb_tail>		-- RETURNS: id
    = 'end' 'verb' <optional_id> '.'
    %%
        %<verb_tail>.id = %<optional_id>.id;
    %%
    ;

----> CHECKS
<optional_checks>		-- RETURNS: srcp, chks
    =
    %%
        %<optional_checks>.chks = NULL;
        %<optional_checks>.srcp = nulsrcp;
    %%

    ! 'check' <statements>
    %%
        %<optional_checks>.srcp = %'check'.srcp;
        %<optional_checks>.chks = newList(newCheck(NULL, %<statements>.stms), CHECK_LIST);
    %%

    ! 'check' <check_list>
    %%
        %<optional_checks>.srcp = %'check'.srcp;
        %<optional_checks>.chks = %<check_list>.chks;
    %%
    ;

<check_list>		-- RETURNS: chks
    = <check>
    %%
        %<check_list>.chks = newList(%<check>.chk, CHECK_LIST);
    %%

    ! <check_list> 'and' <check>
    %%
        %<check_list>.chks = concat(%<check_list>.chks, %<check>.chk, CHECK_LIST);
    %%
    ;

<check>			-- RETURNS: chk
    = <expression> 'else' <statements>
    %%
        %<check>.chk = newCheck(%<expression>.exp, %<statements>.stms);
    %%
    ;

----> DOES
<optional_does>		-- RETURNS: qual, srcp, stms
    =
    %%
        %<optional_does>.qual = QUAL_DEFAULT;
        %<optional_does>.srcp = nulsrcp;
        %<optional_does>.stms = NULL;
    %%

    ! <does>
    %%
        %<optional_does>.qual = %<does>.qual;
        %<optional_does>.srcp = %<does>.srcp;
        %<optional_does>.stms = %<does>.stms;
    %%
    ;

<does>
    = 'does' <optional_qual> <statements>
    %%
        %<does>.qual = %<optional_qual>.qual;
        %<does>.srcp = %'does'.srcp;
        %<does>.stms = %<statements>.stms;
    %%
    ;


---> CLASS
<class>			-- RETURNS: cla
    = 'every' ID <optional_heritage> <properties> <class_tail>
    %%
        %<class>.cla = newClass(`&%'every'.srcp,
                                %ID.id,
                                %<optional_heritage>.id,
                                newProps(%<properties>.whr,
                                         %<properties>.nams,
                                         %<properties>.pronounsSrcp,
                                         %<properties>.pronouns,
                                         %<properties>.atrs,
                                         %<properties>.initialize,
                                         %<properties>.description,
                                         %<properties>.mentionedSrcp,
                                         %<properties>.mentioned,
                                         %<properties>.definite,
                                         %<properties>.indefinite,
                                         %<properties>.negative,
                                         %<properties>.cnt,
                                         %<properties>.vrbs,
                                         %<properties>.enteredSrcp,
                                         %<properties>.entered,
                                         %<properties>.exts,
                                         %<properties>.scrs));
        if (%<class_tail>.id != NULL)  /* END-id given */
            if (!equalId(%ID.id, %<class_tail>.id))
                lmLog(`&%<class_tail>.id->srcp, 200, sevWAR, %ID.id->string);
    %%
    ;

<class_tail>		-- RETURNS: id
    = 'end' 'every' <optional_id> ['.']
      %% %<class_tail>.id = %<optional_id>.id; %%
    ;


---> ADDITION
<addition>			-- RETURNS: cla
    = 'add' 'to' ['every'] ID <optional_heritage> <properties> <add_tail>
    %%
	%<addition>.add = newAdd(%'add'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newProps(%<properties>.whr,
					%<properties>.nams,
					%<properties>.pronounsSrcp,
					%<properties>.pronouns,
					%<properties>.atrs,
					%<properties>.initialize,
					%<properties>.description,
					%<properties>.mentionedSrcp,
					%<properties>.mentioned,
					%<properties>.definite,
					%<properties>.indefinite,
					%<properties>.negative,
					%<properties>.cnt,
					%<properties>.vrbs,
					%<properties>.enteredSrcp,
					%<properties>.entered,
					%<properties>.exts,
					%<properties>.scrs));
	if (%<add_tail>.id != NULL)  /* END-id given */
	    if (!equalId(%ID.id, %<add_tail>.id))
		lmLog(`&%<add_tail>.id->srcp, 200, sevWAR, %ID.id->string);
    %%
    ;

<add_tail>		-- RETURNS: id
    = 'end' 'add' [ 'to' ] <optional_id> ['.']
    %% %<add_tail>.id = %<optional_id>.id; %%
    ;


---> INSTANCE
<instance>			-- RETURNS: ins
    = 'the' ID <optional_heritage> <properties> <instance_tail>
    %%
	%<instance>.ins = newInstance(`&%'the'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newProps(%<properties>.whr,
					%<properties>.nams,
					%<properties>.pronounsSrcp,
					%<properties>.pronouns,
					%<properties>.atrs,
					%<properties>.initialize,
					%<properties>.description,
					%<properties>.mentionedSrcp,
					%<properties>.mentioned,
					%<properties>.definite,
					%<properties>.indefinite,
					%<properties>.negative,
					%<properties>.cnt,
					%<properties>.vrbs,
					%<properties>.enteredSrcp,
					%<properties>.entered,
					%<properties>.exts,
					%<properties>.scrs));
	if (%<instance_tail>.id != NULL)  /* END-id given */
	    if (!equalId(%ID.id, %<instance_tail>.id))
		lmLog(`&%<instance_tail>.id->srcp, 200, sevWAR, %ID.id->string);
    %%
    ;

<instance_tail>		-- RETURNS: id
    = 'end' 'the' <optional_id> ['.']
    %% %<instance_tail>.id = %<optional_id>.id; %%
    ;

<optional_heritage>		-- RETURNS: id
    =
    %%
	%<optional_heritage>.id = NULL;
    %%

    ! <heritage>
    %%
	%<optional_heritage>.id = %<heritage>.id;
    %%
    ;

<heritage>		-- RETURNS: id
    = 'isa' ID ['.']
    %% %<heritage>.id = %ID.id; %%
    ;

<properties>			-- RETURNS: all!
    = 
    %%
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out all fields */
    %%

    ! <properties> <property>
    %%
	%<properties>.nams = concat(%<properties>.nams, %<property>.nam, NAME_LIST);

        if (%<property>.pronouns != NULL) {
            if (%<properties>.pronouns != NULL) 
                /* WHERE clause already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "PRONOUN", "class/instance", NULL);
	    else {
		%<properties>.pronouns = combine(%<properties>.pronouns, %<property>.pronouns);
		%<properties>.pronounsSrcp = %<property>.pronounsSrcp;
	    }
        }

        if (%<property>.whr != NULL) {
            if (%<properties>.whr != NULL) 
                /* WHERE clause already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "WHERE", "class/instance", NULL);
	    else
	        %<properties>.whr = %<property>.whr;
        }

	%<properties>.atrs = combine(%<properties>.atrs, %<property>.atrs);

	if (%<property>.initialize != NULL) {
            if (%<properties>.initialize != NULL)
                /* INITIALIZE properties already declared */
	        lmLogv(`&%<property>.initialize->srcp, 204, sevERR, "INITIALIZE property", "class/instance", NULL);
	    else 
	        %<properties>.initialize = %<property>.initialize;
        }

	if (%<property>.cnt != NULL) {
            if (%<properties>.cnt != NULL)
                /* CONTAINER properties already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "CONTAINER properties", "class/instance", NULL);
	    else 
	        %<properties>.cnt = %<property>.cnt;
        }

	if (%<property>.description != NULL) {
	  if (%<property>.description->checks != NULL) {
            if(%<properties>.description != NULL && %<properties>.description->checks != NULL)
                /* DESCRIPTION CHECK already declared */
	        lmLogv(`&%<property>.description->checkSrcp, 204, sevERR, "DESCRIPTION CHECK", "class/instance", NULL);
	    else {
		if (%<properties>.description != NULL)
		  %<properties>.description->checks = %<property>.description->checks;
	    }
          }

	  if (%<property>.description->does != NULL) {
            if (%<properties>.description != NULL && %<properties>.description->does != NULL)
	        /* DESCRIPTION DOES already declared */
	        lmLogv(`&%<property>.description->doesSrcp, 204, sevERR, "DESCRIPTION", "class/instance", NULL);
	    else 
		if (%<properties>.description != NULL)
		  %<properties>.description->does = %<property>.description->does;
          }

	  if (%<properties>.description == NULL)
	    %<properties>.description = %<property>.description;

	}

	if (%<property>.entered != NULL) {
            if (%<properties>.entered != NULL)
                /* ENTERED already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "ENTERED", "class/instance", NULL);
	    else {
                %<properties>.entered = %<property>.entered;
		%<properties>.enteredSrcp = %<property>.srcp;
	    }
        }

	if (%<property>.mentioned != NULL) {
            if (%<properties>.mentioned != NULL)
                /* MENTIONED already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "MENTIONED", "class/instance", NULL);
	    else {
                %<properties>.mentioned = %<property>.mentioned;
		%<properties>.mentionedSrcp = %<property>.srcp;
	    }
        }

	if (%<property>.indefinite != NULL) {
            if (%<properties>.indefinite != NULL)
                /* Indefinite Article/Form already declared */
	        lmLogv(`&%<property>.indefinite->srcp, 204, sevERR, "[Indefinite] Article/Form", "class/instance", NULL);
            else
	        %<properties>.indefinite = %<property>.indefinite;
        }

	if (%<property>.definite != NULL) {
            if (%<properties>.definite != NULL)
                /* Definite Article/Form already declared */
	        lmLogv(`&%<property>.definite->srcp, 204, sevERR, "Definite Article/Form", "class/instance", NULL);
            else
	        %<properties>.definite = %<property>.definite;
        }

	if (%<property>.negative != NULL) {
            if (%<properties>.negative != NULL)
                /* Negative Article/Form already declared */
	        lmLogv(`&%<property>.negative->srcp, 204, sevERR, "Negative Article/Form", "class/instance", NULL);
            else
	        %<properties>.negative = %<property>.negative;
        }

	%<properties>.exts = concat(%<properties>.exts, %<property>.ext, EXIT_LIST);
	%<properties>.vrbs = concat(%<properties>.vrbs, %<property>.vrb, VERB_LIST);
	%<properties>.scrs = concat(%<properties>.scrs, %<property>.scr, SCRIPT_LIST);
    %%
    ;


<property>
    = <name>
    %%{ List *nam = %<name>.nam;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.nam = nam;
    }%%

    ! <pronoun>
    %%{ List *idList = %<pronoun>.idList;
	Srcp pronounsSrcp = %<pronoun>.pronounsSrcp;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.pronouns = idList;
	%<pronoun>.pronounsSrcp = pronounsSrcp;
    }%%

    ! <where> ['.']
    %%{
        Where *whr = %<where>.whr;
        Srcp srcp = %<where>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.whr = whr;
	%<property>.srcp = srcp;
    }%%

    ! <is> <attributes>						%+('opaque')
    %%
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.atrs = %<attributes>.atrs;
    %%

    ! <initialize>
    %%{
        Initialize *initialize = %<initialize>.initialize;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.initialize = initialize;
    }%%

    ! <container_properties>
    %%{
        Container *cnt = %<container_properties>.cnt;
        Srcp srcp = %<container_properties>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.cnt = cnt;
	%<property>.srcp = srcp;
    }%%

    ! <description>
    %%{
	Description *description = %<description>.description;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */

	%<property>.description = description;
    }%%

    ! <entered>
    %%{
        List *entered = %<entered>.stms;
        Srcp srcp = %<entered>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.entered = entered;
	%<property>.srcp = srcp;
    }%%

    ! <mentioned>
    %%{
        List *ment = %<mentioned>.stms;
        Srcp srcp = %<mentioned>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.mentioned = ment;
	%<property>.srcp = srcp;
    }%%

    ! ['indefinite'] <article_or_form>
    %%{ Article *indefinite = %<article_or_form>.article;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.indefinite = indefinite;
    }%%


    ! 'definite' <article_or_form>
    %%{ Article *definite = %<article_or_form>.article;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.definite = definite;
    }%%


    ! 'negative' <article_or_form>
    %%{ Article *article = %<article_or_form>.article;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.negative = article;
    }%%


    ! <exit>
    %%{ Exit *ext = %<exit>.ext;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.ext = ext;
    }%%

    ! <verb>
    %%{ Verb *vrb = %<verb>.vrb;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.vrb = vrb;
    }%%

    ! <script>
    %%{ Script *scr = %<script>.scr;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.scr = scr;
    }%%
    ;


----> EXITS
<exit>			-- RETURNS: ext
    = 'exit' <id_list> 'to' ID <optional_exit_body> '.'
    %%
	%<exit>.ext = newExit(`&%'exit'.srcp,
				%<id_list>.idList,
				%ID.id,
				%<optional_exit_body>.chks,
				%<optional_exit_body>.stms);
	if (%<optional_exit_body>.id != NULL) { /* END-id given */
	    if (compareStrings(%<id_list>.str, %<optional_exit_body>.id->string) != 0)
		lmLog(`&%<optional_exit_body>.id->srcp, 200, sevWAR, %<id_list>.str);
	}
    %%
    ;

<optional_exit_body>	-- RETURNS: chks, stms, id
    =
    %%
	%<optional_exit_body>.chks = NULL;
	%<optional_exit_body>.stms = NULL;
	%<optional_exit_body>.id = NULL;
    %%

    ! <optional_checks> <optional_does> 'end' 'exit' <optional_id>
    %%
	%<optional_exit_body>.chks = %<optional_checks>.chks;
	%<optional_exit_body>.stms = %<optional_does>.stms;
	if (%<optional_does>.qual != QUAL_DEFAULT)
	     lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
	%<optional_exit_body>.id = %<optional_id>.id;
    %%
    ;

--
-- Attributes
--

<is>			-- RETURNS: srcp
    = 'is'
    %%
	%<is>.srcp = %'is'.srcp;
    %%

    ! 'are'
    %%
	%<is>.srcp = %'are'.srcp;
    %%

    ! 'has'
    %%
	%<is>.srcp = %'has'.srcp;
    %%

    ! 'can'
    %%
	%<is>.srcp = %'can'.srcp;
    %%
    ;

<optional_description>	-- RETURNS: description
    =
    %%
	%<optional_description>.description = NULL;
    %%

    ! <description> 
    %%
	%<optional_description>.description = %<description>.description;
    %%
    ;

<description>		-- RETURNS: description
    = 'description' <optional_checks> <optional_does>
    %%
	if (%<optional_checks>.chks == NULL && %<optional_does>.stms == NULL) {
	  /* Create a NOP-statement */
	  List *stms = newList(newStatement(`&%'description'.srcp,
					NOP_STATEMENT), STATEMENT_LIST);
	  %<description>.description = newDescription(nulsrcp, NULL, %'description'.srcp, stms);
	} else {
	  Srcp checkSrcp, stmSrcp;
	  if (%<optional_checks>.chks != NULL)
	    checkSrcp = %<optional_checks>.srcp;
	  else
	    checkSrcp = nulsrcp;
	  if (%<optional_does>.stms != NULL)
	    stmSrcp = %<optional_does>.srcp;
	  else
	    stmSrcp = %'description'.srcp;

	  %<description>.description = newDescription(checkSrcp, %<optional_checks>.chks, stmSrcp, %<optional_does>.stms);

	  if (%<optional_does>.qual != QUAL_DEFAULT)
	    lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
	}
    %%

    ! 'description' <statements>
    %%
	%<description>.description = newDescription(nulsrcp, NULL,
					%'description'.srcp, %<statements>.stms);
    %%
    ;

<article_or_form>
    = <article>
    ! <form>
    ;

<article>			-- RETURNS: article
    = 'article'
    %%
	%<article>.article = newArticle(%'article'.srcp,
					newList(newStatement(`&%'article'.srcp, NOP_STATEMENT),
						STATEMENT_LIST),
					FALSE);
    %%

    ! 'article' <statements>
    %%
	 %<article>.article = newArticle(%'article'.srcp,
					%<statements>.stms,
					FALSE);
    %%
    ;

<form>			-- RETURNS: stms, srcp
    = 'form' 
    %%
	%<form>.article = newArticle(%'form'.srcp,
					newList(newStatement(`&%'form'.srcp,
								NOP_STATEMENT),
						STATEMENT_LIST),
					TRUE);
    %%

    ! 'form' <statements>
    %%
	%<form>.article = newArticle(%'form'.srcp,
					%<statements>.stms,
					TRUE);
    %%
    ;


<entered>		-- RETURNS: stms, srcp
    = 'entered' <statements>
    %%
	%<entered>.stms = %<statements>.stms;
	%<entered>.srcp = %'entered'.srcp;
    %%
    ;


<initialize>		-- RETURNS: 
    = 'initialize' <statements>
    %%
	%<initialize>.initialize = newInitialize(%'initialize'.srcp, %<statements>.stms);
    %%
    ;


<mentioned>		-- RETURNS: stms, srcp
    = 'mentioned' <statements>
    %%
	%<mentioned>.stms = %<statements>.stms;
	%<mentioned>.srcp = %'mentioned'.srcp;
    %%
    ;


<name>			-- RETURNS: nam
    = 'name' <ids> <optional_full_stop>
    %%
	%<name>.nam = %<ids>.idList;
    %%
    ;

<pronoun>			-- RETURNS: idList
    = 'pronoun' <id_list> <optional_full_stop>
    %%
	%<pronoun>.idList = %<id_list>.idList;
	%<pronoun>.pronounsSrcp = %'pronoun'.srcp;
    %%
    ;

<optional_full_stop>
    =							%+('opaque')
    ! '.'
    ;

---> CONTAINERS
<container_properties>					-- RETURNS: cnt, srcp
    = [ 'with' ] <optionally_opaque> 'container' <container_body>
    %%
	%<container_properties>.cnt = newContainer(newContainerBody(%'container'.srcp,
					%<optionally_opaque>.opaque,
					%<container_body>.id,
					%<container_body>.lims,
					%<container_body>.stms,
					%<container_body>.stms2,
					%<container_body>.chks,
					%<container_body>.stms3));
        %<container_properties>.srcp = %'container'.srcp;
    %%
    ;


<optionally_opaque>
    =
    %% %<optionally_opaque>.opaque = FALSE; %%
    ! 'opaque'
    %% %<optionally_opaque>.opaque = TRUE; %%
    ;


<container_body>		-- RETURNS: lims, stms, stms2
    =  <optional_taking> <optional_limits> <optional_header> <optional_empty> <optional_extract>
    %%
	%<container_body>.id  = %<optional_taking>.id;
	%<container_body>.lims  = %<optional_limits>.lims;
	%<container_body>.stms  = %<optional_header>.stms;
	%<container_body>.stms2 = %<optional_empty>.stms;
	%<container_body>.chks = %<optional_extract>.chks;
	%<container_body>.stms3 = %<optional_extract>.stms;
    %%

    ! '.'
    %%
	%<container_body>.id  = NULL;
	%<container_body>.lims  = NULL;
	%<container_body>.stms  = NULL;
	%<container_body>.stms2 = NULL;
	%<container_body>.chks = NULL;
	%<container_body>.stms3 = NULL;
    %%
    ;

<optional_taking>		-- RETURNS: id
    =
    %%
	%<optional_taking>.id = NULL;
    %%

    ! 'taking' ID '.'
    %%
	%<optional_taking>.id = %ID.id;
    %%
    ;


<optional_limits>		-- RETURNS: lims
    =
    %%
	%<optional_limits>.lims = NULL;
    %%

    ! 'limits' <limits>						%+('opaque')
    %%
	%<optional_limits>.lims = %<limits>.lims;
    %%
    ;

<limits>			-- RETURNS: lims
    = <limit>
    %%
	%<limits>.lims = newList(%<limit>.lim, LIMIT_LIST);
    %%

    ! <limits> <limit>
    %%
	%<limits>.lims = concat(%<limits>.lims, %<limit>.lim, LIMIT_LIST);
    %%
    ;

<limit>			-- RETURNS: lim
    = <limit_attribute> <else_or_then> <statements>		%+('visits')
    %%
	%<limit>.lim = newlim(`&%<else_or_then>.srcp,
			    %<limit_attribute>.atr,
			    %<statements>.stms);
    %%
    ;

<else_or_then>			-- RETURNS: srcp
    = 'else' %% %<else_or_then>.srcp = %'else'.srcp; %%
    ! 'then' %% %<else_or_then>.srcp = %'then'.srcp; %%
    ;

<limit_attribute>		-- RETURNS: atr
    = <attribute_definition>
    %%
	%<limit_attribute>.atr = %<attribute_definition>.atr;
    %%

    ! 'count' Integer
    %%
	%<limit_attribute>.atr = newIntegerAttribute(%'count'.srcp, newId(%'count'.srcp, "count"), val(%Integer.chars));
    %%
    ;

<optional_header>		-- RETURNS: stms
    =
    %%
	%<optional_header>.stms = NULL;
    %%

    ! 'header' <statements>
    %%
	%<optional_header>.stms = %<statements>.stms;
    %%
    ;

<optional_empty>		-- RETURNS: stms
    =
    %%
	%<optional_empty>.stms = NULL;
    %%

    ! 'else' <statements>
    %%
	%<optional_empty>.stms = %<statements>.stms;
    %%
    ;

<optional_extract>		-- RETURNS: chks, stms
    =
    %%
	%<optional_extract>.chks = NULL;
	%<optional_extract>.stms = NULL;
    %%

    ! 'extract' <optional_checks> <optional_does>
    %%
	%<optional_extract>.chks = %<optional_checks>.chks;
	%<optional_extract>.stms = %<optional_does>.stms;
	if (%<optional_does>.qual != QUAL_DEFAULT)
	  lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
    %%

    ! 'extract' <statements>
    %%
	%<optional_extract>.chk = NULL;
	%<optional_extract>.stms = %<statements>.stms;
    %%

    ;

---> EVENTS
<event>			-- RETURNS: evt
    = <event_header> <statements> <event_tail>
    %%
	%<event>.evt = newEvent(`&%<event_header>.srcp,
				%<event_header>.id,
				%<statements>.stms);
	if (%<event_tail>.id != NULL) { /* END-id given */
	    if (!equalId(%<event_header>.id, %<event_tail>.id))
		lmLog(`&%<event_tail>.id->srcp, 200, sevWAR, %<event_header>.id->string);
	}
    %%
    ;

<event_header>		-- RETURNS: srcp, id
    ='event' ID
    %%
	%<event_header>.srcp = %'event'.srcp;
	%<event_header>.id  = %ID.id;
    %%
    ;

<event_tail>		-- RETURNS: id
    = 'end' 'event' <optional_id> '.'
    %%
	%<event_tail>.id = %<optional_id>.id;
    %%
    ;

----> SCRIPTS
<script>			-- RETURNS: scr
    = 'script' ID ['.'] <optional_description> <step_list>
    %%
	if (%<optional_description>.description != NULL &&
        %<optional_description>.description->checks != NULL)
	  lmLog(`&%<optional_description>.description->checkSrcp,
      		228, sevERR, "");
	%<script>.scr = newScript(`&%'script'.srcp,
                              %ID.id,
			                  %<optional_description>.description,
			                  %<step_list>.stps);
    %%
    ;

<step_list>		-- RETURNS: stps
    = <step>
    %%
	%<step_list>.stps = newList(%<step>.stp, STEP_LIST);
    %%

    ! <step_list> <step>
    %%
	%<step_list>.stps = concat(%<step_list>.stps, %<step>.stp, STEP_LIST);
    %%
    ;

<step>			-- RETURNS: stp
    = 'step' <statements>
    %%
	%<step>.stp = newStep(`&%'step'.srcp,
			   0,
			   NULL,
			   %<statements>.stms);
    %%

    ! 'step' 'after' <expression> ['.'] <statements>
    %%
	%<step>.stp = newStep(`&%'step'.srcp,
				%<expression>.exp,
				NULL,
				%<statements>.stms);
    %%

    ! 'step' 'wait' 'until' <expression> ['.'] <statements>
    %%
	%<step>.stp = newStep(`&%'step'.srcp,
				NULL,
				%<expression>.exp,
				%<statements>.stms);
    %%
    ;

----> RULES
<rule>			-- RETURNS: rul
    = 'when' <expression> <then> <statements> <optional_end_when>
    %%
	%<rule>.rul = newRule(`&%'when'.srcp,
		 		%<expression>.exp,
				%<statements>.stms);
    %%
    ;

<then>
    = '=>'
    ! 'then'
    ;

<optional_end_when>
    =
    ! 'end' 'when' ['.']
    ;

---> START
<start>
    = 'start' <where> '.' <optional_statements>
    %%
	adv.whr	 = %<where>.whr;
	adv.stms = %<optional_statements>.stms;
    %%
    ;

---> STATEMENTS
<optional_statements>	-- RETURNS: stms
    =
    %%
	%<optional_statements>.stms = NULL;
    %%

    ! <statements>
    %%
	%<optional_statements>.stms = %<statements>.stms;
    %%
    ;

<statements>		-- RETURNS: stms
    = <statement>
    %%
	%<statements>.stms = newList(%<statement>.stm, STATEMENT_LIST);
    %%

    ! <statements> <statement>
    %%
	%<statements>.stms = concat(%<statements>.stms, %<statement>.stm, STATEMENT_LIST);
    %%
    ;

<statement>		-- RETURNS: stm
    = <output_statement>
    %%
	%<statement>.stm = %<output_statement>.stm;
    %%

    ! <manipulation_statement>
    %%
	%<statement>.stm = %<manipulation_statement>.stm;
    %%

    ! <assignment_statement>
    %%
	%<statement>.stm = %<assignment_statement>.stm;
    %%

    ! <conditional_statement>
    %%
	%<statement>.stm = %<conditional_statement>.stm;
    %%

    ! <repetition_statement>
    %%
	%<statement>.stm = %<repetition_statement>.stm;
    %%

    ! <actor_statement>
    %%
	%<statement>.stm = %<actor_statement>.stm;
    %%

    ! <event_statement>
    %%
	%<statement>.stm = %<event_statement>.stm;
    %%

    ! <special_statement>
    %%
	%<statement>.stm = %<special_statement>.stm;
    %%
    ;

----> Output Statements
<output_statement>		-- RETURNS: stm
    = STRING		%-('is', 'are', 'has', 'can', 'at', 'here', 'in', 'nearby', 'near', 'transitively', 'directly', 'indirectly')
    %%
	%<output_statement>.stm = newStatement(`&%STRING.srcp, PRINT_STATEMENT);
	%<output_statement>.stm->fields.print.fpos = %STRING.fpos;
	%<output_statement>.stm->fields.print.len = %STRING.len;
    %%

    ! 'describe' <what> '.'
    %%
	%<output_statement>.stm = newDescribeStatement(%'describe'.srcp, %<what>.exp);
    %%

    ! 'say' <say_form> <expression> '.'
    %%
	%<output_statement>.stm = newStatement(`&%'say'.srcp, SAY_STATEMENT);
	%<output_statement>.stm->fields.say.exp = %<expression>.exp;
	%<output_statement>.stm->fields.say.form = %<say_form>.sayForm;
    %%

    ! 'list' <primary> '.'
    %%
	%<output_statement>.stm = newListStatement(%'list'.srcp, %<primary>.exp);
    %%	  

    ! 'show' ID '.'
    %%
	%<output_statement>.stm = newShowStatement(%'show'.srcp, newResource(%ID.id->srcp, %ID.id));
    %%	  

    ! 'play' ID '.'
    %%
	%<output_statement>.stm = newPlayStatement(%'play'.srcp, newResource(%ID.id->srcp, %ID.id));
    %%	  

    ! 'style' ID '.'
    %%
	%<output_statement>.stm = newStyleStatement(%'style'.srcp, %ID.id);
    %%
    ;

<say_form>
    =							%-('it')
	%% %<say_form>.sayForm = SAY_SIMPLE; %%
    ! 'the'
	%% %<say_form>.sayForm = SAY_DEFINITE; %%
    ! 'an'
	%% %<say_form>.sayForm = SAY_INDEFINITE; %%
    ! 'it'
	%% %<say_form>.sayForm = SAY_PRONOUN; %%
    ! 'no'
	%% %<say_form>.sayForm = SAY_NEGATIVE; %%
    ;


----> Manipulation Statements
<manipulation_statement>			-- RETURNS: stm
    = 'empty' <primary> <optional_where> '.'
    %%
	%<manipulation_statement>.stm = newEmptyStatement(%'empty'.srcp,
							  %<primary>.exp,
							  %<optional_where>.whr);
    %%	  

    ! 'locate' <primary> <where> '.'
    %%
	%<manipulation_statement>.stm = newLocateStatement(%'locate'.srcp,
							   %<primary>.exp,
							   %<where>.whr);
    %%

    ! 'include' <primary> 'in' <what> '.'
    %%
	%<manipulation_statement>.stm = newIncludeStatement(%'include'.srcp,
							    %<primary>.exp,
							    %<what>.exp);
    %%	  

    ! 'exclude' <primary> 'from' <what> '.'
    %%
	%<manipulation_statement>.stm = newExcludeStatement(%'exclude'.srcp,
							    %<primary>.exp,
							    %<what>.exp);
    %%	  
    ;


----> Event Statements
<event_statement>			-- RETURNS: stm
    = 'schedule' <what> <optional_where> 'after' <expression> '.'
    %%
	%<event_statement>.stm = newScheduleStatement(%'schedule'.srcp,
						      %<what>.exp,
						      %<optional_where>.whr,
						      %<expression>.exp);
    %%	  

    ! 'cancel' <what> '.'
    %%
	%<event_statement>.stm = newCancelStatement(%'cancel'.srcp, %<what>.exp);
    %%	  
    ;


----> Assignment Statements
<assignment_statement>				-- RETURNS: stm
    = 'make' <primary> <something> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'make'.srcp, MAKE_STATEMENT);
	%<assignment_statement>.stm->fields.make.wht = %<primary>.exp;
	%<assignment_statement>.stm->fields.make.not = %<something>.present;
	%<assignment_statement>.stm->fields.make.atr = %<something>.id;
    %%

    ! 'set' <attribute_reference> 'to' <expression> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'set'.srcp, SET_STATEMENT);
	%<assignment_statement>.stm->fields.set.wht = %<attribute_reference>.exp;
	%<assignment_statement>.stm->fields.set.exp = %<expression>.exp;
    %%

    ! 'increase' <attribute_reference> <optional_by_clause> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'increase'.srcp, INCREASE_STATEMENT);
	%<assignment_statement>.stm->fields.incr.wht = %<attribute_reference>.exp;
	%<assignment_statement>.stm->fields.incr.step = %<optional_by_clause>.exp;
    %%

    ! 'decrease' <attribute_reference> <optional_by_clause> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'decrease'.srcp, DECREASE_STATEMENT);
	%<assignment_statement>.stm->fields.incr.wht = %<attribute_reference>.exp;
	%<assignment_statement>.stm->fields.incr.step = %<optional_by_clause>.exp;
    %%

    ! 'strip' <optional_first_or_last> <optional_expression> <optional_word_or_character> 'from' <expression> <optional_into> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'strip'.srcp, STRIP_STATEMENT);
	%<assignment_statement>.stm->fields.strip.first = %<optional_first_or_last>.first;
	%<assignment_statement>.stm->fields.strip.count = %<optional_expression>.exp;
	%<assignment_statement>.stm->fields.strip.wordOrChar = %<optional_word_or_character>.wordOrChar;
	%<assignment_statement>.stm->fields.strip.from = %<expression>.exp;
	%<assignment_statement>.stm->fields.strip.into = %<optional_into>.exp;
    %%
    ;

<optional_by_clause>
    =
    %%
	%<optional_by_clause>.exp = NULL;
    %%

    ! 'by' <expression>
    %%
	%<optional_by_clause>.exp = %<expression>.exp;
    %%
    ;

<optional_first_or_last>	-- RETURNS: first
    =							%-('first')
    %% %<optional_first_or_last>.first = TRUE; %%
    ! 'first'
    %% %<optional_first_or_last>.first = TRUE; %%
    ! 'last'
    %% %<optional_first_or_last>.first = FALSE; %%
    ;

<optional_word_or_character>
    =
    %% %<optional_word_or_character>.wordOrChar = TRUE; %%
    ! 'word'
    %% %<optional_word_or_character>.wordOrChar = TRUE; %%
    ! 'words'
    %% %<optional_word_or_character>.wordOrChar = TRUE; %%
    ! 'character'
    %% %<optional_word_or_character>.wordOrChar = FALSE; %%
    ! 'characters'
    %% %<optional_word_or_character>.wordOrChar = FALSE; %%
    ;

<optional_into>
    =
    %% %<optional_into>.exp = NULL; %%

    ! 'into' <expression>
    %% %<optional_into>.exp = %<expression>.exp; %%
    ;

----> Conditional Statements
<conditional_statement>
    = <if_statement>
    %%
	%<conditional_statement>.stm = %<if_statement>.stm;
    %%

    ! <depending_statement>
    %%
	%<conditional_statement>.stm = %<depending_statement>.stm;
    %%
    ;


<if_statement>			-- RETURNS: stm
    = 'if' <expression> 'then' <statements> <optional_elsif_list> <optional_else_part> 'end' 'if' '.'
    %%
	%<if_statement>.stm = newStatement(`&%'if'.srcp, IF_STATEMENT);
	%<if_statement>.stm->fields.iff.exp = %<expression>.exp;
	%<if_statement>.stm->fields.iff.thn = %<statements>.stms;
	if (%<optional_elsif_list>.stms == NULL)
	    %<if_statement>.stm->fields.iff.els = %<optional_else_part>.stms;
	else {
	    /* Connect the else_part to the elsif_list */
	    (getLastListNode(%<optional_elsif_list>.stms))->member.stm->fields.iff.els =
			%<optional_else_part>.stms;
	    %<optional_elsif_list>.stms->next = NULL;
	    %<if_statement>.stm->fields.iff.els = %<optional_elsif_list>.stms;
	}
    %%
    ;

<optional_elsif_list>
    =
    %%
	%<optional_elsif_list>.stms = NULL;
    %%

    ! <elsif_list>
    %%
	%<optional_elsif_list>.stms = %<elsif_list>.stms;
    %%
    ;
    
<elsif_list>		-- RETURNS: stms
    = 'elsif' <expression> 'then' <statements>
    %%{
	Statement *stm;

	stm = newStatement(`&%'elsif'.srcp, IF_STATEMENT);
	stm->fields.iff.exp = %<expression>.exp;
	stm->fields.iff.thn = %<statements>.stms;
	stm->fields.iff.els = NULL;

	/* Now make a list of the ELSIF */
	%<elsif_list>.stms = newList(stm, STATEMENT_LIST);
    }%%

    ! <elsif_list> 'elsif' <expression> 'then' <statements>
    %%{
	Statement *stm;

	stm = newStatement(`&%'elsif'.srcp, IF_STATEMENT);
	stm->fields.iff.exp = %<expression>.exp;
	stm->fields.iff.thn = %<statements>.stms;
	stm->fields.iff.els = NULL;

	/* Now connect it to the previous ELSIFs, I.e connect the */
	/* else-part of the last element in the elsif_list to this */
	/* IF-statement and also concat this element to the list so */
	/* we'll know were the end is next time */
	(getLastListNode(%<elsif_list>.stms))->member.stm->fields.iff.els = newList(stm, STATEMENT_LIST);
	%<elsif_list>.stms = concat(%<elsif_list>.stms, stm, STATEMENT_LIST);
    }%%
    ;

<optional_else_part>		-- RETURNS: stms
    =
    %%
	%<optional_else_part>.stms = NULL;
    %%

    ! 'else' <statements>
    %%
	%<optional_else_part>.stms = %<statements>.stms;
    %%
    ;

<depending_statement>
    = 'depending' 'on' <primary> <depend_cases> 'end' ('depend'|'depending') '.'
    %%{ Statement *stm;
	stm = newStatement(`&%'depending'.srcp, DEPEND_STATEMENT);
	stm->fields.depend.exp = %<primary>.exp;
	stm->fields.depend.cases = %<depend_cases>.cases;

	%<depending_statement>.stm = stm;
    }%%
    ;

<depend_cases>				-- RETURNS: cases
    = <depend_case>
    %%
	%<depend_cases>.cases = newList(%<depend_case>.stm, CASE_LIST);
    %%

    ! <depend_cases> <depend_case>
    %%
	%<depend_cases>.cases = concat(%<depend_cases>.cases, %<depend_case>.stm, CASE_LIST);
    %%
    ;

<depend_case>				-- RETURNS: stm
    = <right_hand_side> 'then' <statements>
    %%
        %<depend_case>.stm = newStatement(`&%'then'.srcp, DEPENDCASE_STATEMENT);
        %<depend_case>.stm->fields.depcase.exp = %<right_hand_side>.exp;
        %<depend_case>.stm->fields.depcase.stms = %<statements>.stms;
    %%

    ! 'else' <statements>
    %%
        %<depend_case>.stm = newStatement(`&%'else'.srcp, DEPENDCASE_STATEMENT);
        %<depend_case>.stm->fields.depcase.exp = NULL;
        %<depend_case>.stm->fields.depcase.stms = %<statements>.stms;
    %%
    ;

----> Repetition statement
<repetition_statement>			-- RETURNS: stm
    = <for_each> ID <optional_loop_filters> 'do' <statements> 'end' <for_each> ['.']
    %%
	%<repetition_statement>.stm = newEachStatement(%<for_each>.srcp,
							%ID.id,
							%<optional_loop_filters>.exps,
							%<statements>.stms);
    %%
    ;

<optional_loop_filters>		-- RETURNS: ID
    =
    %%
	%<optional_loop_filters>.exps = NULL;
    %%

    ! <filters>
    %%
	%<optional_loop_filters>.exps = %<filters>.exps;
    %%

    ! 'between' <arithmetic> 'and' <arithmetic>
    %%
	%<optional_loop_filters>.exps = newList(newBetweenExpression(%'between'.srcp,
					     				NULL,
					     				FALSE,
					     				%1<arithmetic>.exp,
					     				%2<arithmetic>.exp),
						EXPRESSION_LIST);
    %%
    ;

<for_each>				-- RETURNS srcp
    = 'for'				%-('each')
    %% %<for_each>.srcp = %'for'.srcp; %%
    ! 'each'
    %% %<for_each>.srcp = %'each'.srcp; %%
    ! 'for' 'each'
    %% %<for_each>.srcp = %'for'.srcp; %%
    ;

----> Actor statement
<actor_statement>			-- RETURNS: stm
    = 'use' 'script' ID <optional_for_actor> '.'
    %%
	%<actor_statement>.stm = newUseStatement(%'use'.srcp, %ID.id, %<optional_for_actor>.exp);
    %%

    ! 'stop' <what> '.'
    %%
	%<actor_statement>.stm = newStatement(`&%'stop'.srcp, STOP_STATEMENT);
	%<actor_statement>.stm->fields.stop.actor = %<what>.exp;
    %%
    ;

<optional_for_actor>	-- RETURNS: exp
    =
    %%
	%<optional_for_actor>.exp = NULL;
    %%

    ! 'for' <what>
    %%
	%<optional_for_actor>.exp = %<what>.exp;
    %%
    ;


<special_statement>	-- RETURNS: stm
    = 'quit' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'quit'.srcp, QUIT_STATEMENT);
    %%

    ! 'look' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'look'.srcp, LOOK_STATEMENT);
    %%

    ! 'save' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'save'.srcp, SAVE_STATEMENT);
    %%

    ! 'restore' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'restore'.srcp, RESTORE_STATEMENT);
    %%

    ! 'restart' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'restart'.srcp, RESTART_STATEMENT);
    %%

    ! 'score' <optional_integer> '.'
    %%
	%<special_statement>.stm = newStatement(`&%'score'.srcp, SCORE_STATEMENT);
	if (%<optional_integer>.str != NULL) {
	    %<special_statement>.stm->fields.score.score =
						val(%<optional_integer>.str);
	    %<special_statement>.stm->fields.score.count = ++scoreCount;
	} else
	    %<special_statement>.stm->fields.score.count = 0;
    %%

    ! 'visits' Integer '.'
    %%
	%<special_statement>.stm = newStatement(`&%'visits'.srcp, VISITS_STATEMENT);
	%<special_statement>.stm->fields.visits.count = val(%Integer.chars);
    %%

    ! 'transcript' <on_or_off> '.'
    %%
	%<special_statement>.stm = newStatement(`&%'transcript'.srcp, TRANSCRIPT_STATEMENT);
	%<special_statement>.stm->fields.transcript.on_or_off = %<on_or_off>.on_or_off;
    %%

    ! 'system' STRING '.'
    %%
	%<special_statement>.stm = newStatement(`&%'system'.srcp, SYSTEM_STATEMENT);
	%<special_statement>.stm->fields.system.fpos = %STRING.fpos;
	%<special_statement>.stm->fields.system.len = %STRING.len;
    %%
    ;

<on_or_off>
    = 'on'
    %% %<on_or_off>.on_or_off = TRUE; %%

    ! 'off'
    %% %<on_or_off>.on_or_off = FALSE; %%
    ;
	

---> EXPRESSIONS
<optional_expression>	-- RETURNS: exp
    =
    %% %<optional_expression>.exp = NULL; %%

    ! <expression>
    %% %<optional_expression>.exp = %<expression>.exp; %%
    ;

<expression>		-- RETURNS: exp
    = <term>
    %%
	%<expression>.exp = %<term>.exp;
    %%

    ! <expression> 'or' <term>
    %%
	%<expression>.exp = newBinaryExpression(%'or'.srcp,
						%<expression>.exp,
						FALSE,
						OR_OPERATOR,
						%<term>.exp);
    %%
    ;

<term>			-- RETURNS: exp
    = <factor>
    %%
	%<term>.exp = %<factor>.exp;
    %%

    ! <term> 'and' <factor>
    %%
	%<term>.exp = newBinaryExpression(%'and'.srcp,
					  %<term>.exp,
					  FALSE,
					  AND_OPERATOR,
					  %<factor>.exp);
    %%
    ;

<factor>			-- RETURNS: exp
    = <arithmetic>
    %%
	%<factor>.exp = %<arithmetic>.exp;
    %%

    ! <factor> <optional_not> <relop> <arithmetic>
    %%
	%<factor>.exp = newBinaryExpression(%<relop>.srcp,
					    %<factor>.exp,
					    %<optional_not>.present,
					    %<relop>.op,
					    %<arithmetic>.exp);
    %%

    ! <factor> <optional_not> <where>
    %%
	%<factor>.exp = newWhereExpression(%<where>.srcp,
					   %<factor>.exp,
					   %<optional_not>.present,
					   %<where>.whr);
    %%

    ! <factor> <optional_not> 'between' <arithmetic> 'and' <arithmetic>
    %%
	%<factor>.exp = newBetweenExpression(%'between'.srcp,
					     %<factor>.exp,
					     %<optional_not>.present,
					     %1<arithmetic>.exp,
					     %2<arithmetic>.exp);
    %%

    ! <factor> <optional_not> 'contains' <arithmetic>
    %%
	%<factor>.exp = newBinaryExpression(%'contains'.srcp,
					    %<factor>.exp,
					    %<optional_not>.present,
					    CONTAINS_OPERATOR,
					    %<arithmetic>.exp);
    %%
    ;


<arithmetic>
    = <primary>
    %%
	%<arithmetic>.exp = %<primary>.exp;
    %%

    ! <primary> 'isa' ID
    %%
	%<arithmetic>.exp = newIsaExpression(%'isa'.srcp, %<primary>.exp, FALSE, %ID.id);
    %%

    ! <primary> <is> <something>
    %%
	%<arithmetic>.exp = newAttributeExpression(%<is>.srcp, %<something>.id,
					 %<something>.present, %<primary>.exp);
    %%

    ! <arithmetic> <binop> <primary>
    %%
	%<arithmetic>.exp = newBinaryExpression(%<binop>.srcp,
						%<arithmetic>.exp,
						FALSE,
						%<binop>.op,
						%<primary>.exp);
    %%

    ! <aggregate> <filters>
    %%
	%<arithmetic>.exp = newAggregateExpression(%<aggregate>.srcp,
							%<aggregate>.agr,
							%<aggregate>.id,
							%<filters>.exps);
    %%
    ;


<filters>					-- RETURNS: exps
    = <filter>
    %%
        %<filters>.exps = newList(%<filter>.exp, EXPRESSION_LIST);
    %%

    ! <filters> ',' <filter>
    %%
        %<filters>.exps = concat(%<filters>.exps, %<filter>.exp, EXPRESSION_LIST);
    %%
    ;

-- This could be the start of using general attribute comparisons as filters
-- It is more complicated than the rest since we have the attribute comparison
-- node at the top in the parse tree and the filter variable must be attached
-- further down the left branch than in the simpler cases.
--    ! <is> ID <optional_not> <relop> <primary>
--    %%
--	%<filter>.exp = newBinaryExpression(%<relop>.srcp, %<relop>.op,
--				%<optional_not>.present, NULL,
--				%<primary>.exp);
--    %%
--    ;

<filter>			-- RETURNS: exp
    = <optional_not> <where>
    %%
	%<filter>.exp = newWhereExpression(%<where>.srcp,
						      NULL,
						      %<optional_not>.present,
						      %<where>.whr);
    %%

    ! <optional_not> 'isa' ID
    %%
	%<filter>.exp = newIsaExpression(%'isa'.srcp, NULL, %<optional_not>.present, %ID.id);
	%<filter>.id = %ID.id;
    %%

    ! <is> <something>
    %%
	%<filter>.exp = newAttributeExpression(%<is>.srcp,
						%<something>.id,
						%<something>.present, NULL);
    %%
    ;

<right_hand_side>
    = <optional_not> <relop> <primary>
    %%
	%<right_hand_side>.exp = newBinaryExpression(%<relop>.srcp,
						     NULL,
						     %<optional_not>.present,
						     %<relop>.op,
						     %<primary>.exp);
    %%

    ! <optional_not> 'between' <arithmetic> 'and' <arithmetic>
    %%
	%<right_hand_side>.exp = newBetweenExpression(%'between'.srcp,
						      NULL,
						      %<optional_not>.present,
						      %1<arithmetic>.exp,
						      %2<arithmetic>.exp);
    %%

    ! <optional_not> 'contains' <factor>
    %%
	%<right_hand_side>.exp = newBinaryExpression(%'contains'.srcp,
						     NULL,
						     %<optional_not>.present,
						     CONTAINS_OPERATOR,
						     %<factor>.exp);

    %%

    ! <filter>
    ;


<primary>				-- RETURNS: exp
    = '(' <expression> ')'
    %%
	%<primary>.exp = %<expression>.exp;
    %%

    ! <optional_minus> Integer
    %%
	%<primary>.exp = newIntegerExpression(%Integer.srcp,
					      %<optional_minus>.minus?
							-val(%Integer.chars):
							val(%Integer.chars));
    %%

    ! STRING		%+('is', 'are', 'has', 'can', 'at', 'here', 'in', 'nearby', 'near', 'transitively', 'directly', 'indirectly')
    %%
        %<primary>.exp = newStringExpression(%STRING.srcp,
                                             %STRING.fpos,
                                             %STRING.len);
    %%

    ! <what>
    %%
        %<primary>.exp = %<what>.exp;
    %%

    ! 'random' <primary> 'to' <primary>
    %%
        %<primary>.exp = newRandomRangeExpression(%'random'.srcp, %2<primary>.exp, %3<primary>.exp);
    %%

    ! 'random' <optional_transitivity> 'in' <primary>
    %%
        %1<primary>.exp = newRandomInExpression(%'random'.srcp, %2<primary>.exp, %<optional_transitivity>.transitivity);
    %%

    ! 'score'
    %%
        %<primary>.exp = newScoreExpression(%'score'.srcp);
    %%

    ! '{' <optional_members> '}'
    %%
        %<primary>.exp = newSetExpression(%'{'.srcp, %<optional_members>.set);
    %%
    ;


<aggregate>			-- RETURNS: srcp, agr, id
    = <aggregator> 'of' ID
    %%
        %<aggregate>.srcp = %<aggregator>.srcp;
        %<aggregate>.agr = %<aggregator>.agr;
        %<aggregate>.id = %ID.id;
    %%

    ! 'count'
    %%
        %<aggregate>.srcp = %'count'.srcp;
        %<aggregate>.agr = COUNT_AGGREGATE;
        %<aggregate>.id = NULL;
    %%
    ;

<aggregator>
    = 'max'
    %%
        %<aggregator>.srcp = %'max'.srcp;
        %<aggregator>.agr = MAX_AGGREGATE;
    %%

    ! 'min'
    %%
        %<aggregator>.srcp = %'min'.srcp;
        %<aggregator>.agr = MIN_AGGREGATE;
    %%

    ! 'sum'
    %%
        %<aggregator>.srcp = %'sum'.srcp;
        %<aggregator>.agr = SUM_AGGREGATE;
    %%
    ;

---> MISCELLANEOUS
<something>		-- RETURNS: not, id
    = <optional_not> ID
    %%
        %<something>.present = %<optional_not>.present;
        %<something>.id = %ID.id;
    %%
    ;

<what>			-- RETURNS: exp
    = <simple_what>
    %%
        %<what>.exp = newWhatExpression(%<simple_what>.srcp, %<simple_what>.wht);
    %%

    ! <attribute_reference>
    %%
        %<what>.exp = %<attribute_reference>.exp;
    %%
    ;

<simple_what>			-- RETURNS: srcp, wht
    = ID					%-('of')
    %%
        %<simple_what>.wht = newWhatId(%ID.id->srcp, %ID.id);
        %<simple_what>.srcp = %ID.id->srcp;
    %%

    ! 'current' 'actor'
    %%
        %<simple_what>.wht = newWhatActor(%'current'.srcp);
        %<simple_what>.srcp = %'current'.srcp;
    %%

    ! 'current' 'location'
    %%
        %<simple_what>.wht = newWhatLocation(%'current'.srcp);
        %<simple_what>.srcp = %'current'.srcp;
    %%

    ! 'this'
    %%
        %<simple_what>.wht = newWhatThis(%'this'.srcp);
        %<simple_what>.srcp = %'this'.srcp;
    %%
    ;


<attribute_reference>		-- RETURNS: exp
    = ID 'of' <what>				%-(':')
    %%
        %<attribute_reference>.exp = newAttributeExpression(%'of'.srcp, %ID.id, FALSE, %<what>.exp);
    %%

    ! <what> ':' ID
    %%
        %<attribute_reference>.exp = newAttributeExpression(%':'.srcp, %ID.id, FALSE, %<what>.exp);
    %%
    ;

<optional_where>		-- RETURNS: whr
    =
    %%
        %<optional_where>.whr = newWhere(`&nulsrcp, FALSE, WHERE_DEFAULT, NULL);
    %%
    
    ! <where>
    %%
        %<optional_where>.whr = %<where>.whr;
    %%
    ;

<where>			-- RETURNS: srcp, whr
    = <optional_transitivity> 'here'
    %%
        %<where>.whr = newWhere(`&%'here'.srcp, %<optional_transitivity>.transitivity, WHERE_HERE, NULL);
        %<where>.srcp = %'here'.srcp;
    %%

    ! <optional_transitivity> 'nearby'
    %%
        %<where>.whr = newWhere(`&%'nearby'.srcp, %<optional_transitivity>.transitivity, WHERE_NEARBY, NULL);
        %<where>.srcp = %'nearby'.srcp;
    %%

    ! <optional_transitivity> 'at' <primary>
    %%
        %<where>.whr = newWhere(`&%'at'.srcp, %<optional_transitivity>.transitivity, WHERE_AT, %<primary>.exp);
        %<where>.srcp = %'at'.srcp;
    %%

    ! <optional_transitivity> 'in' <primary>
    %%
        %<where>.whr = newWhere(`&%'in'.srcp, %<optional_transitivity>.transitivity, WHERE_IN, %<primary>.exp);
        %<where>.srcp = %'in'.srcp;
    %%

    ! <optional_transitivity> 'near' <what>
    %%
        %<where>.whr = newWhere(`&%'near'.srcp, %<optional_transitivity>.transitivity, WHERE_NEAR, %<what>.exp);
        %<where>.srcp = %'near'.srcp;
    %%
    ;

<binop>			-- RETURNS: op, srcp
    = '+'
    %%
        %<binop>.op = PLUS_OPERATOR;
        %<binop>.srcp = %'+'.srcp;
    %%

    ! '-'
    %%
        %<binop>.op = MINUS_OPERATOR;
        %<binop>.srcp = %'-'.srcp;
    %%

    ! '*'
    %%
        %<binop>.op = MULT_OPERATOR;
        %<binop>.srcp = %'*'.srcp;
    %%

    ! '/'
    %%
        %<binop>.op = DIV_OPERATOR;
        %<binop>.srcp = %'/'.srcp;
    %%
    ;


<relop>			-- RETURNS: op, srcp
    = '<>'
    %%
        %<relop>.op   = NE_OPERATOR;
        %<relop>.srcp = %'<>'.srcp;
    %%

    ! '='
    %%
        %<relop>.op   = EQ_OPERATOR;
        %<relop>.srcp = %'='.srcp;
    %%

    ! '=='
    %%
        %<relop>.op   = EXACT_OPERATOR;
        %<relop>.srcp = %'=='.srcp;
    %%

    ! '>='
    %%
        %<relop>.op   = GE_OPERATOR;
        %<relop>.srcp = %'>='.srcp;
    %%

    ! '<='
    %%
        %<relop>.op   = LE_OPERATOR;
        %<relop>.srcp = %'<='.srcp;
    %%

    ! '>'
    %%
        %<relop>.op   = GT_OPERATOR;
        %<relop>.srcp = %'>'.srcp;
    %%

    ! '<'
    %%
        %<relop>.op   = LT_OPERATOR;
        %<relop>.srcp = %'<'.srcp;
    %%
    ;



<optional_qual>		-- RETURNS: qual, srcp
    =
    %%
        %<optional_qual>.qual = QUAL_DEFAULT;
    %%

    ! 'before'
    %%
        %<optional_qual>.qual = QUAL_BEFORE;
        %<optional_qual>.srcp = %'before'.srcp;
    %%

    ! 'after'
    %%
        %<optional_qual>.qual = QUAL_AFTER;
        %<optional_qual>.srcp = %'after'.srcp;
    %%

    ! 'only'
    %%
        %<optional_qual>.qual = QUAL_ONLY;
        %<optional_qual>.srcp = %'only'.srcp;
    %%
    ;


<optional_not>
    =					%+(Identifier, 'on', 'of', 'into', 'first', 'actor', 'opaque', 'taking', 'location')
    %%
        %<optional_not>.present = FALSE;
    %%

    ! 'not'
    %%
        %<optional_not>.present = TRUE;
    %%
    ;

<optional_transitivity>
    =
    %%
        %<optional_transitivity>.transitivity = DEFAULT_TRANSITIVITY;
    %%

    ! 'transitively'
    %%
        %<optional_transitivity>.transitivity = TRANSITIVELY;
    %%

    ! 'directly'
    %%
        %<optional_transitivity>.transitivity = DIRECTLY;
    %%

    ! 'indirectly'
    %%
        %<optional_transitivity>.transitivity = INDIRECTLY;
    %%
    ;

<optional_id>
    =
    %%
        %<optional_id>.id = NULL;
    %%

    ! ID
    %%
        %<optional_id>.id = %ID.id;
    %%
    ;

<ids>			-- RETURNS: idList
    = ID
    %%
        %<ids>.idList = newList(%ID.id, ID_LIST);
    %%

    ! <ids> ID
    %%
        %<ids>.idList = concat(%<ids>.idList, %ID.id, ID_LIST);
    %%
    ;

<id_list>			-- RETURNS: str, idList
    = ID
    %%
        %<id_list>.str = newString(%ID.id->string);
        %<id_list>.idList = newList(%ID.id, ID_LIST);
    %%

    ! <id_list> ',' ID
    %%
        %<id_list>.str = %<id_list>.str;
        %<id_list>.idList = concat(%<id_list>.idList, %ID.id, ID_LIST);
    %%
    ;

<optional_integer>	-- RETURNS: str
    =
    %%
        %<optional_integer>.str = NULL;
    %%

    ! Integer
    %%
        %<optional_integer>.str = newString(%Integer.chars);
    %%
    ;

<optional_minus>			-- RETURNS: minus
    =
    %%
        %<optional_minus>.minus = FALSE;
    %%

    ! '-'
    %%
        %<optional_minus>.minus = TRUE;
    %%
    ;

ID
    = Identifier
    %%
        %ID.id = newId(%Identifier.srcp, %Identifier.chars);
    %%

-- Possibly we could add further keywords here. But let's not at this point
-- Remember to change scanner so that the characters are copied for the
-- added keyword too.
-- NOTE that in order for the string for the id you also have to add a
-- rule in the scanner to transfer it for this particular keyword
-- (which it otherwise throws away)
    ! 'location'		-- Must be allowed, predefined class
    %%
        %ID.id = newId(%'location'.srcp, %'location'.chars);
    %%

    ! 'actor'			-- Must be allowed, predefined class
    %%
        %ID.id = newId(%'actor'.srcp, %'actor'.chars);
    %%

    ! 'opaque'			-- Must be allowed since there is a predefined attribute.
    %%
        %ID.id = newId(%'opaque'.srcp, %'opaque'.chars);
    %%

    ! 'visits'			-- Must be allowed since there is a predefined attribute.
    %%
        %ID.id = newId(%'visits'.srcp, %'visits'.chars);
    %%

    ! 'contains'
    %%
        %ID.id = newId(%'contains'.srcp, %'contains'.chars);
    %%

    ! 'on'
    %%
        %ID.id = newId(%'on'.srcp, %'on'.chars);
    %%

    ! 'it'
    %%
        %ID.id = newId(%'it'.srcp, %'it'.chars);
    %%

    ! 'of'
    %%
        %ID.id = newId(%'of'.srcp, %'of'.chars);
    %%

    ! 'first'
    %%
        %ID.id = newId(%'first'.srcp, %'first'.chars);
    %%

    ! 'into'
    %%
        %ID.id = newId(%'into'.srcp, %'into'.chars);
    %%

    ! 'taking'
    %%
        %ID.id = newId(%'taking'.srcp, %'taking'.chars);
    %%

    ! 'off'
    %%
        %ID.id = newId(%'off'.srcp, %'off'.chars);
    %%
    ;

%%OPTIONS

	Prefix 'pm';
	Listerprefix 'lm';
	List Grammar, Statistics;
	StackLimit 64;
	Pack RDS;
	No Resolve;

%%IMPORT

#include "Adventure.h"

#include "Alternative.h"
#include "Attribute.h"
#include "Check.h"
#include "Class.h"
#include "Container.h"
#include "Does.h"
#include "Element.h"
#include "Event.h"
#include "Exit.h"
#include "Expression.h"
#include "Id.h"
#include "Instance.h"
#include "Limit.h"
#include "List.h"
#include "Restriction.h"
#include "Rule.h"
#include "Script.h"
#include "Srcp.h"
#include "Statement.h"
#include "Step.h"
#include "Synonym.h"
#include "Syntax.h"
#include "Token.h"
#include "Verb.h"
#include "What.h"
#include "Where.h"

#include "smScan.h"
#include "lmList.h"

#include "Option.h"
#include "Score.h"


%%SCANNER

    smScan(lexContext, token);

%%INSERTSYMBOL

    /* Make the requested token */
    sym->code = code;
    strcpy(sym->chars, sstr);


%%DECLARATIONS

#ifdef _PROTOTYPES_
static int value(char str[])
#else
static int value(str)
     char str[];
#endif
{
  int temp;

  sscanf(str, "%d", &temp);
  return(temp);
}


%%ATTRIBUTES

	aggregateKind %% AggregateKind %1%%,
	alternative %% Alternative *%1%%,
	alternativeList %% List *%1%%,
	attribute %% Attribute *%1%%,
	attributeList %% List *%1%%,
	check %% Check *%1%%,
	checkList %% List *%1%%,
	class %% Class *%1%%,
	container %% Container *%1%%,
	description %% List *%1%%,
	does %% Does *%1%%,
	element %% Element *%1%%,
	elementList %% List *%1%%,
	event %% Event *%1%%,
	eventList %% List *%1%%,
	expression %% Expression *%1%%,
	exit %% Exit *%1%%,
	exitList %% List *%1%%,
	instance %% Instance *%1%%,
	limit %% Limit *%1%%,
	limitList %% List *%1%%,
	mentioned %% List *%1%%,
	minus %% Bool %1%%,
	id %% Id *%1%%,
	idList %% List *%1%%,
	not %% Bool %1%%,
	operator %% OperatorKind %1%%,
	qualifier %% DoesKind %1%%,
	restriction %% Restriction *%1%%,
	restrictionKind %% RestrictionKind %1%%,
	restrictionList %% List *%1%%,
	rule %% Rule *%1%%,
	ruleList %% List *%1%%,
	script %% Script *%1%%,
	scriptList %% List *%1%%,
	single %% Bool %1%%,
	surroundings %% List *%1%%,
	srcp %% Srcp %1%%,
	statement %% Statement *%1%%,
	statementList %% List *%1%%,
	step %% Step *%1%%,
	stepList %% List *%1%%,
	string %% char *%1%%,
	syntax %% Syntax *%1%%,
	syntaxList %% List *%1%%,
	synonym %% Synonym *%1%%,
	synonymList %% List *%1%%,
	value %% int %1%%,
	verb %% Verb *%1%%,
	verbList %% List *%1%%,
	where %% Where *%1%%,
	what %% What *%1%%;

%%RECOVERY

    Fiducial('VERB', 'DOES', 'EXIT', 'ACTOR', 'EVENT', 'START', 'THE',
		'SYNTAX', 'SCRIPT', 'SYNONYMS', 'CONTAINER', 'EVERY', 'DOES',
		'MENTIONED', 'DESCRIPTION', 'END', 'CHECK');

    Separator(',');

    Skip(IDENTIFIER, INTEGER, '.');

%%RULES

--> ADVENTURE
<adventure>
    = <optional options> <units> <start>
    ;

---> OPTIONS
<optional options>			-- RETURNS: <nothing>
    =
    ! 'OPTIONS' <options>
    ;

<options>				-- RETURNS: <nothing>
    = <option>
    ! <options> <option>
    ;

<option>				-- RETURNS: <nothing>
    = <id> '.'
    %% booleanOption(%<id>.id); %%

    ! <id> <id> '.'
    %% enumeratedOption(%<id>.id, %2<id>.id); %%

    ! <id> INTEGER '.'
    %% integerOption(%<id>.id, value(%INTEGER.chars)); %%
    ;


---> UNITS
<units>
    = <unit>
    ! <units> <unit>
    ;

<unit>
    = <object default>
    %% adventure.objectAttributes = combine(adventure.objectAttributes, %<object default>.attributeList); %%

    ! <actor default>
    %% adventure.actorAttributes = combine(adventure.actorAttributes, %<actor default>.attributeList); %%

    ! <location default>
    %% adventure.locationAttributes = combine(adventure.locationAttributes, %<location default>.attributeList); %%

    ! <synonyms>
    %% adventure.synonyms = combine(adventure.synonyms, %<synonyms>.synonymList); %%

    ! <syntax>
    %% adventure.syntaxes = combine(adventure.syntaxes, %<syntax>.syntaxList); %%

    ! <verb>
    %% adventure.verbs = append(adventure.verbs, %<verb>.verb); %%
	
    ! <class>
    %% adventure.classes = append(adventure.classes, %<class>.class); %%
	
    ! <instance>
    %% adventure.instances = append(adventure.instances, %<instance>.instance); %%

    ! <event>
    %% adventure.events = append(adventure.events, %<event>.event); %%

    ! <rule>
    %% adventure.rules = append(adventure.rules, %<rule>.rule); %%
    ;


----> DEFAULTS
<location default>			-- RETURNS: attributes
    = 'LOCATION' 'ATTRIBUTES' <attribute list>
    %% %<location default>.attributeList = %<attribute list>.attributeList; %%
    ;

<object default>			-- RETURNS: attributes
    = 'OBJECT' 'ATTRIBUTES' <attribute list>
    %% %<object default>.attributeList = %<attribute list>.attributeList; %%
    ;

<actor default>				-- RETURNS: attributes
    = 'ACTOR' 'ATTRIBUTES' <attribute list>
    %% %<actor default>.attributeList = %<attribute list>.attributeList; %%
    ;


---> SYNONYMS
<synonyms>			-- RETURNS: synonymList
    = 'SYNONYMS' <synonym list>
    %% %<synonyms>.synonymList = %<synonym list>.synonymList; %%
    ;

<synonym list>			-- RETURNS: synonymList
    = <synonym>
    %% %<synonym list>.synonymList = append(NULL, %<synonym>.synonym); %%

    ! <synonym list> <synonym>
    %% %<synonym list>.synonymList = append(%<synonym list>.synonymList, %<synonym>.synonym); %%
    ;

<synonym>				-- RETURNS: synonym
    = <id list> '=' <id> '.'
    %%
	%<synonym>.synonym = newSynonym(`&%'='.srcp,
			      %<id list>.idList,
			      %<id>.id);
    %%
    ;

---> SYNTAX			-- RETURNS: syntaxList
<syntax>
    = 'SYNTAX' <syntax list>
    %% %<syntax>.syntaxList = %<syntax list>.syntaxList; %%
    ;

<syntax list>			-- RETURNS: syntaxList
    = <syntax item>
    %% %<syntax list>.syntaxList = append(NULL, %<syntax item>.syntax); %%

    ! <syntax list> <syntax item>
    %% %<syntax list>.syntaxList = append(%<syntax list>.syntaxList, %<syntax item>.syntax); %%
    ;

<syntax item>			-- RETURNS: syntax
    = <id> '=' <syntax elements> <optional class restrictions>
    %%
	%<syntax item>.syntax = newSyntax(`&%'='.srcp,
					%<id>.id,
					%<syntax elements>.elementList,
					%<optional class restrictions>.restrictionList);
    %%
    ;

<syntax elements>			-- RETURNS: elementList
    = <syntax element>
    %% %<syntax elements>.elementList = append(NULL, %<syntax element>.element); %%

    ! <syntax elements> <syntax element>
    %% %<syntax elements>.elementList = append(%<syntax elements>.elementList, %<syntax element>.element); %%
    ;

<syntax element>			-- RETURNS: element
    = <id>
    %%
	%<syntax element>.element = newElement(`&%<id>.id->srcp,
						WORD_ELEMENT,
						%<id>.id,
						FALSE);
    %%

    ! '(' <id> ')' <optional multiple indicator>
    %%
	%<syntax element>.element = newElement(`&%<id>.id->srcp,
						PARAMETER_ELEMENT,
						%<id>.id,
						!%<optional multiple indicator>.single);
    %%
    ;

<optional multiple indicator>		-- RETURNS: single
    =
    %% %<optional multiple indicator>.single = TRUE; %%

    ! '*'
    %% %<optional multiple indicator>.single = FALSE; %%
    ;


<optional class restrictions>		-- RETURNS: restrictionList
    = '.'
    %% %<optional class restrictions>.restrictionList = NULL; %%

    ! 'WHERE' <class restrictions>
    %% %<optional class restrictions>.restrictionList = %<class restrictions>.restrictionList; %%
    ;

<class restrictions>			-- RETURNS: restrictionList
    = <class restriction>
    %% %<class restrictions>.restrictionList = append(NULL, %<class restriction>.restriction); %%

    ! <class restrictions> 'AND' <class restriction>
    %% %<class restrictions>.restrictionList = append(%<class restrictions>.restrictionList, %<class restriction>.restriction); %%
    ;

<class restriction>			-- RETURNS: restriction
    = <id> 'ISA' <class identifier> 'ELSE' <statements>
    %%
	%<class restriction>.restriction = newRestriction(`&%'ISA'.srcp,
							%<id>.id,
							%<class identifier>.restrictionKind,
							%<class identifier>.id,
							%<statements>.statementList);
    %%
    ;

<class identifier>			-- RETURNS: restrictionKind, id
    = <heritage id>
    %%
	%<class identifier>.restrictionKind = ID_RESTRICTION;
	%<class identifier>.id = %<heritage id>.id;
    %%

    ! 'INTEGER'
    %%
	%<class identifier>.restrictionKind = INTEGER_RESTRICTION;
	%<class identifier>.id = NULL;
    %%

    ! 'STRING'
    %%
	%<class identifier>.restrictionKind = STRING_RESTRICTION;
	%<class identifier>.id = NULL;
    %%
    ;    


---> VERBS
<optional verbs>		-- RETURNS: verbList
    =
    %% %<optional verbs>.verbList = NULL; %%

    ! <verbs>
    %% %<optional verbs>.verbList = %<verbs>.verbList; %%
    ;

<verbs>			-- RETURNS: verbList
    = <verb>
    %% %<verbs>.verbList = append(NULL, %<verb>.verb); %%

    ! <verbs> <verb>
    %% %<verbs>.verbList = append(%<verbs>.verbList, %<verb>.verb); %%
    ;

<verb>			-- RETURNS: verb
    = <verb header> <verb body> <verb tail>
    %%
	%<verb>.verb = newVerb(`&%<verb header>.srcp,
			   %<verb header>.idList,
			   %<verb body>.alternativeList);
	if (%<verb tail>.id != NULL)  /* END-id given */
	    if (!equalIds(%<verb header>.idList->the.id, %<verb tail>.id))
		lmLog(`&%<verb tail>.id->srcp, 201, sevWAR, %<verb header>.idList->the.id->string);
    %%
    ;

<verb header>		-- RETURNS: srcp, idList
    = 'VERB' <id list>
    %%
	%<verb header>.srcp   = %'VERB'.srcp;
	%<verb header>.idList   = %<id list>.idList;
    %%
    ;

<verb body>			-- RETURNS: alternativeList
    = <simple verb body>
    %%
	%<verb body>.alternativeList = append(NULL,
				 newAlternative(`&nullSrcp,
					NULL,
					%<simple verb body>.checkList,
					%<simple verb body>.does));
    %%

    ! <verb alternatives>
    %% %<verb body>.alternativeList = %<verb alternatives>.alternativeList; %%
    ;

<verb alternatives>		-- RETURNS: alternativeList
    = <verb alternative>
    %% %<verb alternatives>.alternativeList = append(NULL, %<verb alternative>.alternative); %%

    ! <verb alternatives> <verb alternative>
    %% %<verb alternatives>.alternativeList = append(%<verb alternatives>.alternativeList, %<verb alternative>.alternative); %%
    ;

<verb alternative>		-- RETURNS: alternative
    = 'WHEN' <id> <simple verb body>
    %%
	%<verb alternative>.alternative = newAlternative(`&%'WHEN'.srcp,
							%<id>.id,
							%<simple verb body>.checkList,
							%<simple verb body>.does);
    %%
    ;

<simple verb body>		-- RETURNS: checkList, dos
    = <optional checks> <optional does>
    %%
	%<simple verb body>.checkList = %<optional checks>.checkList;
	%<simple verb body>.does = %<optional does>.does;
    %%
    ;

<verb tail>		-- RETURNS: id
    = 'END' 'VERB' <optional id> '.'
    %% %<verb tail>.id = %<optional id>.id; %%
    ;

----> CHECKS
<optional checks>		-- RETURNS: checkList
    =
    %% %<optional checks>.checkList = NULL; %%

    ! 'CHECK' <statements>
    %% %<optional checks>.checkList = append(NULL, newCheck(NULL, %<statements>.statementList)); %%

    ! 'CHECK' <check list>
    %% %<optional checks>.checkList = %<check list>.checkList; %%
    ;

<check list>		-- RETURNS: checkList
    = <check>
    %%
	%<check list>.checkList = append(NULL, %<check>.check);
    %%

    ! <check list> 'AND' <check>
    %%
	%<check list>.checkList = append(%<check list>.checkList, %<check>.check);
    %%
    ;

<check>			-- RETURNS: check
    = <expression> 'ELSE' <statements>
    %%
	%<check>.check = newCheck(%<expression>.expression, %<statements>.statementList);
    %%
    ;

----> DOES
<optional does>		-- RETURNS: dos
    =
    %% %<optional does>.does = NULL; %%

    ! <does>
    %% %<optional does>.does = %<does>.does; %%
    ;

<does>			-- RETURNS: dos
    = 'DOES' <optional qualifier> <statements>
    %% %<does>.does = newDoes(`&%'DOES'.srcp, %<optional qualifier>.qualifier, %<statements>.statementList); %%
    ;


----> ATTRIBUTES
<optional attributes>	-- RETURNS: attributeList
    =
    %% %<optional attributes>.attributeList = NULL; %%

    ! <attributes>
    %% %<optional attributes>.attributeList = %<attributes>.attributeList; %%
    ;

<attributes>		-- RETURNS: attributeList
    = <is> <attribute list>
    %% %<attributes>.attributeList = %<attribute list>.attributeList; %%

    ! <attributes> <is> <attribute list>
    %% %<attributes>.attributeList = combine(%<attributes>.attributeList, %<attribute list>.attributeList); %%
    ;

<attribute list>		-- RETURNS: attributeList
    = <attribute> '.'
    %% %<attribute list>.attributeList = append(NULL, %<attribute>.attribute); %%

    ! <attribute list> <attribute> '.'
    %% %<attribute list>.attributeList = append(%<attribute list>.attributeList, %<attribute>.attribute); %%
    ;

<attribute>		-- RETURNS: attribute
    = <id>
    %%
	%<attribute>.attribute = newAttribute(`&%<id>.srcp,
						BOOLEAN_TYPE,
						%<id>.id,
						TRUE, 0, 0);
    %%

    ! 'NOT' <id>
    %%
	%<attribute>.attribute = newAttribute(`&%<id>.id->srcp,
					BOOLEAN_TYPE,
					%<id>.id,
					FALSE, 0, 0);
    %%

    ! <id> <optional minus> INTEGER
    %%
	if (%<optional minus>.minus)
		%<attribute>.attribute = newAttribute(`&%<id>.id->srcp,
						INTEGER_TYPE,
						%<id>.id,
						-value(%INTEGER.chars), 0, 0);
	else
		%<attribute>.attribute = newAttribute(`&%<id>.id->srcp,
					INTEGER_TYPE,
					%<id>.id,
					value(%INTEGER.chars), 0, 0);
    %%

    ! <id> STRING	
    %%
	%<attribute>.attribute = newAttribute(`&%<id>.id->srcp,
						STRING_TYPE,
						%<id>.id,
						0, %STRING.fpos, %STRING.len);
    %%
    ;

<is>			-- RETURNS: srcp
    = 'IS'
    %% %<is>.srcp = %'IS'.srcp; %%

    ! 'ARE'
    %% %<is>.srcp = %'ARE'.srcp; %%

    ! 'HAS'
    %% %<is>.srcp = %'HAS'.srcp; %%
    ;


---> CLASS
<class>			-- RETURNS: cla
    = 'EVERY' <id> <heritage> <slots> <class tail>
    %%
	%<class>.class = newClass(`&%'EVERY'.srcp,
				%<id>.id,
				newSlot(%<heritage>.idList,
					%<slots>.idList,
					%<slots>.where,
					%<slots>.attributeList,
					%<slots>.container,
					%<slots>.surroundings,
					%<slots>.description,
					%<slots>.mentioned,
					%<slots>.does,
					%<slots>.exitList,
					%<slots>.verbList,
					%<slots>.scriptList));
	if (%<class tail>.id != NULL)  /* END-id given */
	    if (!equalIds(%<id>.id, %<class tail>.id))
		lmLog(`&%<class tail>.id->srcp, 201, sevWAR, %<id>.id->string);
    %%
    ;

<class tail>		-- RETURNS: id
    = 'END' 'EVERY' <optional id> '.'
    %% %<class tail>.id = %<optional id>.id; %%
    ;


---> INSTANCE
<instance>			-- RETURNS: ins
    = 'THE' <id> <heritage> <slots> <instance tail>
    %%
	%<instance>.instance = newInstance(`&%'THE'.srcp,
					%<id>.id,
					newSlot(%<heritage>.idList,
						%<slots>.idList,
						%<slots>.where,
						%<slots>.attributeList,
						%<slots>.container,
						%<slots>.surroundings,
						%<slots>.description,
						%<slots>.mentioned,
						%<slots>.does,
						%<slots>.exitList,
						%<slots>.verbList,
						%<slots>.scriptList));
	if (%<instance tail>.id != NULL)  /* END-id given */
	    if (!equalIds(%<id>.id, %<instance tail>.id))
		lmLog(`&%<instance tail>.id->srcp, 201, sevWAR, %<id>.id->string);
    %%
    ;

<instance tail>		-- RETURNS: id
    = 'END' 'THE' <optional id> '.'
    %% %<instance tail>.id = %<optional id>.id; %%
    ;

<heritage>		-- RETURNS: idList
    = 'ISA' <heritage list>
    %% %<heritage>.idList = %<heritage list>.idList; %%
    ;

<heritage list>		-- RETURNS: idList
    = <heritage list> ',' <heritage id>
    %% %<heritage list>.idList = append(%<heritage list>.idList,
					%<heritage id>.id); %%

    ! <heritage id>
    %% %<heritage list>.idList = append(NULL, %<heritage id>.id); %%
    ;

<heritage id>
    = <id>
    %% %<heritage id>.id = %<id>.id; %%
    ! 'THING'
    %% %<heritage id>.id = newId(`&%'THING'.srcp, "thing"); %%
    ! 'LOCATION'
    %% %<heritage id>.id = newId(`&%'LOCATION'.srcp, "location"); %%
    ! 'OBJECT'
    %% %<heritage id>.id = newId(`&%'OBJECT'.srcp, "object"); %%
    ! 'ACTOR'
    %% %<heritage id>.id = newId(`&%'ACTOR'.srcp, "actor"); %%
    ! 'CONTAINER'
    %% %<heritage id>.id = newId(`&%'CONTAINER'.srcp, "container"); %%
    ;


<slots>			-- RETURNS: all!
    = <optional name> <optional where> <optional attributes> <optional container>
	<optional surroundings> <optional description> <optional mentioned>
	<optional does> <optional exits> <optional verbs> <optional scripts>
    %%
	%<slots>.idList = %<optional name>.idList;
	%<slots>.where = %<optional where>.where;
	%<slots>.attributeList = %<optional attributes>.attributeList;
	%<slots>.container = %<optional container>.container;
	%<slots>.surroundings = %<optional surroundings>.surroundings;
	%<slots>.description = %<optional description>.description;
	%<slots>.mentioned = %<optional mentioned>.mentioned;
	%<slots>.does = %<optional does>.does;
	%<slots>.exitList = %<optional exits>.exitList;
	%<slots>.verbList = %<optional verbs>.verbList;
	%<slots>.scriptList = %<optional scripts>.scriptList;
    %%
    ;

----> EXITS
<optional exits>		-- RETURNS: exitList
    =
    %% %<optional exits>.exitList = NULL; %%

    ! <exits>
    %% %<optional exits>.exitList = %<exits>.exitList; %%
    ;

<exits>			-- RETURNS: exitList
    = <exit>
    %%
	%<exits>.exitList = append(NULL, %<exit>.exit);
    %%

    ! <exits> <exit>
    %%
	%<exits>.exitList = append(%<exits>.exitList, %<exit>.exit);
    %%
    ;

<exit>			-- RETURNS: exit
    = 'EXIT' <id list> 'TO' <id> <optional exit body> '.'
    %%
	%<exit>.exit = newExit(`&%'EXIT'.srcp,
			   %<id list>.idList,
			   %<id>.id,
			   %<optional exit body>.checkList,
			   %<optional exit body>.does);
	if (%<optional exit body>.id != NULL)  /* END-id given */
	    if (!equalIds(%<id list>.idList->the.id, %<optional exit body>.id) != 0)
		lmLog(`&%<optional exit body>.id->srcp, 201, sevWAR, %<id list>.idList->the.id->string);
    %%
    ;

<optional exit body>	-- RETURNS: checkList, does, id
    =
    %%
	%<optional exit body>.checkList = NULL;
	%<optional exit body>.does = NULL;
	%<optional exit body>.id = NULL;
    %%

    ! <optional checks> <optional does> 'END' 'EXIT' <optional id>
    %%
	%<optional exit body>.checkList = %<optional checks>.checkList;
	%<optional exit body>.does = %<optional does>.does;
	if (%<optional does>.does && %<optional does>.does->kind != DOES_DEFAULT)
	     lmLog(`&%<optional does>.srcp, 210, sevERR, "");
	%<optional exit body>.id = %<optional id>.id;
    %%
    ;


-- SURROUNDINGS
<optional surroundings>		-- RETURNS: statementList
    =
    %% %<optional surroundings>.statementList = NULL; %%

    ! <surroundings>
    %% %<optional surroundings>.statementList = %<surroundings>.statementList; %%
    ;

<surroundings>
    = 'SURROUNDINGS' 
    %%
	%<surroundings>.statementList = append(NULL, newStatement(`&%'SURROUNDINGS'.srcp,
						NOP_STATEMENT));
    %%

    ! 'SURROUNDINGS' <statements>
    %%
	%<surroundings>.statementList = %<statements>.statementList;
    %%
    ;


-- DESCRIPTION
<optional description>		-- RETURNS: statementList
    =
    %% %<optional description>.statementList = NULL; %%

    ! <description>
    %% %<optional description>.statementList = %<description>.statementList; %%
    ;

<description>
    = 'DESCRIPTION' 
    %%
	%<description>.statementList = append(NULL, newStatement(`&%'DESCRIPTION'.srcp,
						NOP_STATEMENT));
    %%

    ! 'DESCRIPTION' <statements>
    %%
	%<description>.statementList = %<statements>.statementList;
    %%
    ;


-- MENTIONED
<optional mentioned>	-- RETURNS: statementList
    =
    %% %<optional mentioned>.statementList = NULL; %%

    ! <mentioned>
    %% %<optional mentioned>.statementList = %<mentioned>.statementList; %%
    ;

<mentioned>		-- RETURNS: statementList
    = 'MENTIONED' <statements>
    %%
	%<mentioned>.statementList = %<statements>.statementList;
    %%
    ;


-- NAME
<optional name>		-- RETURNS: idList
    = 
    %% %<optional name>.idList = NULL; %%

    ! name
    %% %<optional name>.idList = %name.idList; %%
    ;

name			-- RETURNS: idList
    = 'NAME' <ids>
    %% %name.idList = %<ids>.idList; %%
    ;

---> CONTAINER PROPERTIES
<optional container>	-- RETURNS: container
    =
    %% %<optional container>.container = NULL; %%

    ! <container>
    %% %<optional container>.container = %<container>.container; %%
    ;

<container>		-- RETURNS: container
    =  'CONTAINER' <optional limits> <optional header> <optional empty>
    %%
	%<container>.container = newContainer(`&%'CONTAINER'.srcp, %<optional limits>.limitList,
				%<optional header>.statementList, %<optional empty>.statementList);
    %%
    ;

<optional limits>		-- RETURNS: limitList
    =
    %% %<optional limits>.limitList = NULL; %%

    ! 'LIMITS' <limits>
    %% %<optional limits>.limitList = %<limits>.limitList; %%
    ;

<limits>			-- RETURNS: limitList
    = <limit>
    %% %<limits>.limitList = append(NULL, %<limit>.limit); %%

    ! <limits> <limit>
    %% %<limits>.limitList = append(%<limits>.limitList, %<limit>.limit); %%
    ;

<limit>			-- RETURNS: limit
    = <attribute> 'THEN' <statements>
    %%
	%<limit>.limit = newLimit(`&%'THEN'.srcp,
			    %<attribute>.attribute,
			    %<statements>.statementList);
    %%
    ;


<optional header>		-- RETURNS: statementList
    =
    %% %<optional header>.statementList = NULL; %%

    ! 'HEADER' <statements>
    %% %<optional header>.statementList = %<statements>.statementList; %%
    ;

<optional empty>		-- RETURNS: statementList
    =
    %% %<optional empty>.statementList = NULL; %%

    ! 'ELSE' <statements>
    %% %<optional empty>.statementList = %<statements>.statementList; %%
    ;

---> EVENTS
<event>			-- RETURNS: event
    = event_header <statements> event_tail
    %%
	%<event>.event = newEvent(`&%event_header.srcp,
			    %event_header.id,
			    %<statements>.statementList);
	if (%event_tail.id != NULL) /* END-id given */
	    if (!equalIds(%event_header.id, %event_tail.id))
		lmLog(`&%event_tail.id->srcp, 201, sevWAR, %event_header.id->string);
    %%
    ;

event_header		-- RETURNS: srcp, id
    ='EVENT' <id>
    %%
	%event_header.srcp = %'EVENT'.srcp;
	%event_header.id  = %<id>.id;
    %%
    ;

event_tail		-- RETURNS: id
    = 'END' 'EVENT' <optional id> '.'
    %% %event_tail.id = %<optional id>.id; %%
    ;


----> SCRIPTS
<optional scripts>	-- RETURNS: scriptList
    =
    %% %<optional scripts>.scriptList = NULL; %%

    ! <optional scripts> <script>
    %% %<optional scripts>.scriptList = append(%<optional scripts>.scriptList, %<script>.script); %%
    ;

<script>			-- RETURNS: script
    = 'SCRIPT' <id> '.' <optional description> <step list>
    %%
	%<script>.script = newScript(`&%'SCRIPT'.srcp,
			     %<id>.id,
			     %<optional description>.statementList,
			     %<step list>.stepList);
    %%
    ;

<step list>		-- RETURNS: stepList
    = <step>
    %% %<step list>.stepList = append(NULL, %<step>.step); %%

    ! <step list> <step>
    %% %<step list>.stepList = append(%<step list>.stepList, %<step>.step); %%
    ;

<step>			-- RETURNS: step
    = 'STEP' <statements>
    %%
	%<step>.step = newStep(`&%'STEP'.srcp,
			   0,
			   NULL,
			   %<statements>.statementList);
    %%

    ! 'STEP' 'AFTER' <expression> <statements>
    %%
	%<step>.step = newStep(`&%'STEP'.srcp,
			   %<expression>.expression,
			   NULL,
			   %<statements>.statementList);
    %%

    ! 'STEP' 'WAIT' 'UNTIL' <expression> <statements>
    %%
	%<step>.step = newStep(`&%'STEP'.srcp,
			   0,
			   %<expression>.expression,
			   %<statements>.statementList);
    %%
    ;

----> RULES
<rule>			-- RETURNS: rule
    = 'WHEN' <expression> '=>' <statements>
    %%
	%<rule>.rule = newRule(`&%'WHEN'.srcp,
			   %<expression>.expression,
			   %<statements>.statementList);
    %%
    ;

---> START
<start>
    = 'START' <where> '.' <optional statements>
    %%
	adventure.where	 = %<where>.where;
	adventure.statements = %<optional statements>.statementList;
    %%
    ;

---> STATEMENTS
<optional statements>	-- RETURNS: statementList
    =
    %% %<optional statements>.statementList = NULL; %%

    ! <statements>
    %% %<optional statements>.statementList = %<statements>.statementList; %%
    ;

<statements>		-- RETURNS: statementList
    = <statement>
    %% %<statements>.statementList = append(NULL, %<statement>.statement); %%

    ! <statements> <statement>
    %% %<statements>.statementList = append(%<statements>.statementList, %<statement>.statement); %%
    ;

<statement>		-- RETURNS: statement
    = <output statement>
    %% %<statement>.statement = %<output statement>.statement; %%

    ! <manipulation statement>
    %% %<statement>.statement = %<manipulation statement>.statement; %%

    ! <assignment statement>
    %% %<statement>.statement = %<assignment statement>.statement; %%

    ! <if statement>
    %% %<statement>.statement = %<if statement>.statement; %%

    ! <actor statement>
    %% %<statement>.statement = %<actor statement>.statement; %%

    ! <event statement>
    %% %<statement>.statement = %<event statement>.statement; %%

    ! <special statement>
    %% %<statement>.statement = %<special statement>.statement; %%
    ;

<output statement>		-- RETURNS: statement
    = STRING
    %%
	%<output statement>.statement = newStatement(`&%STRING.srcp, PRINT_STATEMENT);
	%<output statement>.statement->fields.print.fpos = %STRING.fpos;
	%<output statement>.statement->fields.print.len = %STRING.len;
    %%

    ! 'DESCRIBE' <what> '.'
    %%
	%<output statement>.statement = newStatement(`&%'DESCRIBE'.srcp, DESCRIBE_STATEMENT);
	%<output statement>.statement->fields.describe.what = %<what>.what;
    %%

    ! 'SAY' <expression> '.'
    %%
	%<output statement>.statement = newStatement(`&%'SAY'.srcp, SAY_STATEMENT);
	%<output statement>.statement->fields.say.expression = %<expression>.expression;
    %%

    ! 'LIST' <what> '.'
    %%
	%<output statement>.statement = newStatement(`&%'LIST'.srcp, LIST_STATEMENT);
	%<output statement>.statement->fields.list.what = %<what>.what;
    %%	  
    ;

<special statement>	-- RETURNS: statement
    = 'QUIT' '.'
    %% %<special statement>.statement = newStatement(`&%'QUIT'.srcp, QUIT_STATEMENT); %%

    ! 'LOOK' '.'
    %% %<special statement>.statement = newStatement(`&%'LOOK'.srcp, LOOK_STATEMENT); %%

    ! 'SAVE' '.'
    %% %<special statement>.statement = newStatement(`&%'SAVE'.srcp, SAVE_STATEMENT); %%

    ! 'RESTORE' '.'
    %% %<special statement>.statement = newStatement(`&%'RESTORE'.srcp, RESTORE_STATEMENT); %%

    ! 'SCORE' <optional integer> '.'
    %%
	%<special statement>.statement = newStatement(`&%'SCORE'.srcp, SCORE_STATEMENT);
	if (%<optional integer>.string != NULL) {
	    %<special statement>.statement->fields.score.score =
						value(%<optional integer>.string);
	    %<special statement>.statement->fields.score.count = ++scoreCount;
	} else
	    %<special statement>.statement->fields.score.count = 0;
    %%

    ! 'VISITS' INTEGER '.'
    %%
	%<special statement>.statement = newStatement(`&%'VISITS'.srcp, VISITS_STATEMENT);
	%<special statement>.statement->fields.visits.count = value(%INTEGER.chars);
    %%

    ! 'SYSTEM' STRING '.'
    %%
	%<special statement>.statement = newStatement(`&%'SYSTEM'.srcp, SYSTEM_STATEMENT);
	%<special statement>.statement->fields.system.fpos = %STRING.fpos;
	%<special statement>.statement->fields.system.len = %STRING.len;
    %%
    ;
	


<manipulation statement>	-- RETURNS: statement
    = 'EMPTY' <what> <optional where> '.'
    %%
	%<manipulation statement>.statement = newStatement(`&%'EMPTY'.srcp, EMPTY_STATEMENT);
	%<manipulation statement>.statement->fields.empty.what = %<what>.what;
	%<manipulation statement>.statement->fields.empty.where = %<optional where>.where;
    %%	  

    ! 'LOCATE' <what> <where> '.'
    %%
	%<manipulation statement>.statement = newStatement(`&%'LOCATE'.srcp, LOCATE_STATEMENT);
	%<manipulation statement>.statement->fields.locate.what = %<what>.what;
	%<manipulation statement>.statement->fields.locate.where = %<where>.where;
    %%	  
    ;

<event statement>			-- RETURNS: statement
    = 'SCHEDULE' <id> <optional where> 'AFTER' <expression> '.'
    %%
	%<event statement>.statement = newStatement(`&%'SCHEDULE'.srcp, SCHEDULE_STATEMENT);
	%<event statement>.statement->fields.schedule.id  = %<id>.id;
	%<event statement>.statement->fields.schedule.where  = %<optional where>.where;
	%<event statement>.statement->fields.schedule.after = %<expression>.expression;
    %%	  

    ! 'CANCEL' <id> '.'
    %%
	%<event statement>.statement = newStatement(`&%'CANCEL'.srcp, CANCEL_STATEMENT);
	%<event statement>.statement->fields.cancel.id = %<id>.id;
    %%	  
    ;

<assignment statement>		-- RETURNS: statement
    = 'MAKE' <what> <something> '.'
    %%
	%<assignment statement>.statement = newStatement(`&%'MAKE'.srcp, MAKE_STATEMENT);
	%<assignment statement>.statement->fields.make.what = %<what>.what;
	%<assignment statement>.statement->fields.make.not = %<something>.not;
	%<assignment statement>.statement->fields.make.attribute = %<something>.id;
    %%

    ! 'SET' <attribute reference> 'TO' <expression> '.'
    %%
	%<assignment statement>.statement = newStatement(`&%'SET'.srcp, SET_STATEMENT);
	%<assignment statement>.statement->fields.set.attribute = %<attribute reference>.id;
	%<assignment statement>.statement->fields.set.what = %<attribute reference>.what;
	%<assignment statement>.statement->fields.set.expression = %<expression>.expression;
    %%

    ! 'INCREASE' <attribute reference> <optional by clause> '.'
    %%
	%<assignment statement>.statement = newStatement(`&%'INCREASE'.srcp, INCR_STATEMENT);
	%<assignment statement>.statement->fields.incr.attribute = %<attribute reference>.id;
	%<assignment statement>.statement->fields.incr.what = %<attribute reference>.what;
	%<assignment statement>.statement->fields.incr.by = %<optional by clause>.expression;
    %%

    ! 'DECREASE' <attribute reference> <optional by clause> '.'
    %%
	%<assignment statement>.statement = newStatement(`&%'DECREASE'.srcp, DECR_STATEMENT);
	%<assignment statement>.statement->fields.incr.attribute = %<attribute reference>.id;
	%<assignment statement>.statement->fields.incr.what = %<attribute reference>.what;
	%<assignment statement>.statement->fields.incr.by = %<optional by clause>.expression;
    %%
    ;

<optional by clause>
    =
    %% %<optional by clause>.expression = NULL; %%

    ! 'BY' <expression>
    %% %<optional by clause>.expression = %<expression>.expression; %%
    ;

<if statement>			-- RETURNS: statement
    = 'IF' <expression> 'THEN' <statements> <optional elsif list> <optional else part> 'END' 'IF' '.'
    %%
	%<if statement>.statement = newStatement(`&%'IF'.srcp, IF_STATEMENT);
	%<if statement>.statement->fields.iff.expression = %<expression>.expression;
	%<if statement>.statement->fields.iff.thn = %<statements>.statementList;
	if (%<optional elsif list>.statementList == NULL)
	    %<if statement>.statement->fields.iff.els = %<optional else part>.statementList;
	else {
	    /* Connect the else_part to the elsif_list */
	    List *l;
	    for (l = %<optional elsif list>.statementList; l->next; l = l->next); /* Go to end */
	    l->the.statement->fields.iff.els = %<optional else part>.statementList;
	    %<optional elsif list>.statementList->next = NULL;
	    %<if statement>.statement->fields.iff.els = %<optional elsif list>.statementList;
	}
    %%
    ;

<optional elsif list>
    =
    %% %<optional elsif list>.statementList = NULL; %%

    ! <elsif list>
    %% %<optional elsif list>.statementList = %<elsif list>.statementList; %%
    ;
    
<elsif list>		-- RETURNS: statementList
    = 'ELSIF' <expression> 'THEN' <statements>
    %%{
	Statement *statement;

	statement = newStatement(`&%'ELSIF'.srcp, IF_STATEMENT);
	statement->fields.iff.expression = %<expression>.expression;
	statement->fields.iff.thn = %<statements>.statementList;
	statement->fields.iff.els = NULL;

	/* Now make a list of the ELSIF */
	%<elsif list>.statementList = append(NULL, statement);
    }%%

    ! <elsif list> 'ELSIF' <expression> 'THEN' <statements>
    %%{
	Statement *statement;
	List *l;

	statement = newStatement(`&%'ELSIF'.srcp, IF_STATEMENT);
	statement->fields.iff.expression = %<expression>.expression;
	statement->fields.iff.thn = %<statements>.statementList;
	statement->fields.iff.els = NULL;

	/* Now connect it to the previous ELSIFs, I.e connect the */
	/* else-part of the last element in the <elsif list> to this */
	/* IF-statement and also append this element to the list so */
	/* we'll know were the end is next time */
	for (l = %<elsif list>.statementList; l->next; l = l->next); /* Go to end */
	l->the.statement->fields.iff.els = append(NULL, statement);
	%<elsif list>.statementList = append(%<elsif list>.statementList, statement);
    }%%
    ;

<optional else part>		-- RETURNS: statementList
    =
    %% %<optional else part>.statementList = NULL; %%

    ! 'ELSE' <statements>
    %% %<optional else part>.statementList = %<statements>.statementList; %%
    ;

<actor statement>			-- RETURNS: statement
    = 'USE' <id> <optional for actor> '.'
    %%
	%<actor statement>.statement = newStatement(`&%'USE'.srcp, USE_STATEMENT);
	%<actor statement>.statement->fields.use.script = %<id>.id;
	%<actor statement>.statement->fields.use.actor = %<optional for actor>.id;
    %%
    ;

<optional for actor>	-- RETURNS: id
    =
    %% %<optional for actor>.id = NULL; %%

    ! 'FOR' <id>
    %% %<optional for actor>.id = %<id>.id; %%
    ;


---> EXPRESSIONS
<expression>		-- RETURNS: exp
    = <term>
    %% %<expression>.expression = %<term>.expression; %%

    ! <expression> 'OR' <term>
    %% { Expression *expression;
	expression = newExpression(`&%'OR'.srcp, BINARY_EXPRESSION);
	expression->not	      = FALSE;
	expression->fields.binary.operator = OR_OPERATOR;
	expression->fields.binary.left = %<expression>.expression;
	expression->fields.binary.right = %<term>.expression;
	%<expression>.expression = expression;
    } %%
    ;

<term>			-- RETURNS: expression
    = <factor>
    %% %<term>.expression = %<factor>.expression; %%

    ! <term> 'AND' <factor>
    %% { Expression *expression;
	expression = newExpression(`&%'AND'.srcp, BINARY_EXPRESSION);
	expression->not	      = FALSE;
	expression->fields.binary.operator = AND_OPERATOR;
	expression->fields.binary.left  = %<term>.expression;
	expression->fields.binary.right = %<factor>.expression;
	%<term>.expression = expression;
    } %%
    ;

<factor>			-- RETURNS: expression
    = <primary>
    %% %<factor>.expression = %<primary>.expression; %%

    ! <primary> binop <primary>
    %% { Expression *expression;
	expression = newExpression(`&%binop.srcp, BINARY_EXPRESSION);
	expression->fields.binary.operator = %binop.operator;
	expression->fields.binary.left = %1<primary>.expression;
	expression->fields.binary.right = %2<primary>.expression;
	%<factor>.expression = expression;
    } %%

    ! <primary> <optional not> relop <primary>
    %% { Expression *expression;
	expression = newExpression(`&%relop.srcp, BINARY_EXPRESSION);
	expression->not = %<optional not>.not;
	expression->fields.binary.operator = %relop.operator;
	expression->fields.binary.left = %1<primary>.expression;
	expression->fields.binary.right = %2<primary>.expression;
	%<factor>.expression = expression;
    } %%

    ! <primary> <optional not> <where>
    %% { Expression *expression;
	expression = newExpression(`&%<where>.srcp, WHERE_EXPRESSION);
	expression->not = %<optional not>.not;
	expression->fields.where.what = %<primary>.expression;
	expression->fields.where.where = %<where>.where;
	%<factor>.expression = expression;
    } %%

    ! <primary> <is> <something>
    %% { Expression *expression;
	expression = newExpression(`&%<is>.srcp, ATTRIBUTE_EXPRESSION);
	expression->not = %<something>.not;
	expression->fields.attribute.what = %<primary>.expression;
	expression->fields.attribute.attribute = %<something>.id;
	%<factor>.expression = expression;
    } %%
    ;


<primary>				-- RETURNS: expression
    = '(' <expression> ')'
    %% %<primary>.expression = %<expression>.expression; %%

    ! <optional minus> INTEGER
    %%
	%<primary>.expression = newExpression(`&%INTEGER.srcp, INTEGER_EXPRESSION);
	if (%<optional minus>.minus)
	  %<primary>.expression->fields.value.value = -value(%INTEGER.chars);
	else
	  %<primary>.expression->fields.value.value = value(%INTEGER.chars);
    %%

    ! STRING
    %%
	%<primary>.expression = newExpression(&%STRING.srcp, STRING_EXPRESSION);
	%<primary>.expression->fields.string.fpos = %STRING.fpos;
	%<primary>.expression->fields.string.len = %STRING.len;
    %%

    ! <what>
    %%
	%<primary>.expression = newExpression(`&%<what>.srcp, WHAT_EXPRESSION);
	%<primary>.expression->fields.what.what = %<what>.what;
    %%

    ! <attribute reference>
    %%
	%<primary>.expression = newExpression(`&%<attribute reference>.srcp, ATTRIBUTE_EXPRESSION);
	%<primary>.expression->fields.attribute.attribute = %<attribute reference>.id;
	%<primary>.expression->fields.attribute.what = newExpression(`&%<attribute reference>.srcp, WHAT_EXPRESSION);
	%<primary>.expression->fields.attribute.what->fields.what.what = %<attribute reference>.what;
    %%

    ! <aggregate> <where>
    %%
	%<primary>.expression = newExpression(`&%<aggregate>.srcp, AGGREGATE_EXPRESSION);
	%<primary>.expression->fields.aggregate.kind = %<aggregate>.aggregateKind;
	%<primary>.expression->fields.aggregate.attribute = %<aggregate>.id;
	%<primary>.expression->fields.aggregate.where	= %<where>.where;
    %%

    ! 'RANDOM' INTEGER 'TO' INTEGER
    %%
	%<primary>.expression = newExpression(`&%'RANDOM'.srcp, RANDOM_EXPRESSION);
	%<primary>.expression->fields.random.from = value(%1INTEGER.chars);
	%<primary>.expression->fields.random.to	= value(%2INTEGER.chars);
    %%

    ! 'SCORE'
    %% %<primary>.expression = newExpression(`&%'SCORE'.srcp, SCORE_EXPRESSION); %%
    ;


<aggregate>			-- RETURNS: srcp, agr, id
    = 'SUM' 'OF' <id>
    %%
	%<aggregate>.srcp = %'SUM'.srcp;
	%<aggregate>.aggregateKind = SUM_AGGREGATE;
	%<aggregate>.id = %<id>.id;
    %%

    ! 'MAX' 'OF' <id>
    %%
	%<aggregate>.srcp = %'MAX'.srcp;
	%<aggregate>.aggregateKind = MAX_AGGREGATE;
	%<aggregate>.id = %<id>.id;
    %%

    ! 'COUNT'
    %%
	%<aggregate>.srcp = %'COUNT'.srcp;
	%<aggregate>.aggregateKind = COUNT_AGGREGATE;
	%<aggregate>.id = NULL;
    %%
    ;

---> SOMETHING
<something>		-- RETURNS: not, id
    = <optional not> <id>
    %%
	%<something>.not = %<optional not>.not;
	%<something>.id = %<id>.id;
    %%
    ;

<what>			-- RETURNS: srcp, what
    = 'LOCATION'
    %%
	%<what>.what = newWhat(`&%'LOCATION'.srcp, WHAT_LOCATION, NULL);
	%<what>.srcp = %'LOCATION'.srcp;
    %%

    ! 'ACTOR'
    %%
	%<what>.what = newWhat(`&%'ACTOR'.srcp, WHAT_ACTOR, NULL);
	%<what>.srcp = %'ACTOR'.srcp;
    %%

    ! <id>
    %%
	%<what>.what = newWhat(`&%<id>.id->srcp, WHAT_ID, %<id>.id);
	%<what>.srcp = %<id>.id->srcp;
    %%
    ;


---> WHERE
<optional where>		-- RETURNS: where
    =
    %% %<optional where>.where = newWhere(`&nullSrcp, WHERE_DEFAULT, NULL); %%
    
    ! <where>
    %% %<optional where>.where = %<where>.where; %%
    ;

<where>			-- RETURNS: srcp, where
    = 'HERE'
    %%
        %<where>.where = newWhere(`&%'HERE'.srcp, WHERE_HERE, NULL);
	%<where>.srcp = %'HERE'.srcp;
    %%

    ! 'NEARBY'
    %%
        %<where>.where = newWhere(`&%'NEARBY'.srcp, WHERE_NEAR, NULL);
	%<where>.srcp = %'NEARBY'.srcp;
    %%

    ! 'AT' <what>
    %%
        %<where>.where = newWhere(`&%'AT'.srcp, WHERE_AT, %<what>.what);
	%<where>.srcp = %'AT'.srcp;
    %%

    ! 'IN' <what>
    %%
        %<where>.where = newWhere(`&%'IN'.srcp, WHERE_IN, %<what>.what);
	%<where>.srcp = %'IN'.srcp;
    %%
    ;


-- BINARY OPERATORS
binop			-- RETURNS: op, srcp
    = '+'
    %%
	%binop.operator = PLUS_OPERATOR;
	%binop.srcp = %'+'.srcp;
    %%

    ! '-'
    %%
	%binop.operator = MINUS_OPERATOR;
	%binop.srcp = %'-'.srcp;
    %%
    ;


relop			-- RETURNS: op, srcp
    = '<>'
    %%
        %relop.operator   = NE_OPERATOR;
	%relop.srcp = %'<>'.srcp;
    %%

    ! '='
    %%
        %relop.operator   = EQ_OPERATOR;
	%relop.srcp = %'='.srcp;
    %%

    ! '=='
    %%
        %relop.operator   = EXACT_OPERATOR;
	%relop.srcp = %'=='.srcp;
    %%

    ! '>='
    %%
        %relop.operator   = GE_OPERATOR;
	%relop.srcp = %'>='.srcp;
    %%

    ! '<='
    %%
        %relop.operator   = LE_OPERATOR;
	%relop.srcp = %'<='.srcp;
    %%

    ! '>'
    %%
        %relop.operator   = GT_OPERATOR;
	%relop.srcp = %'>'.srcp;
    %%

    ! '<'
    %%
        %relop.operator   = LT_OPERATOR;
	%relop.srcp = %'<'.srcp;
    %%
    ;


-- QUALIFIERS
<optional qualifier>		-- RETURNS: qual, srcp
    =
    %%
        %<optional qualifier>.qualifier = DOES_DEFAULT;
    %%

    ! 'BEFORE'
    %%
        %<optional qualifier>.qualifier = DOES_BEFORE;
        %<optional qualifier>.srcp = %'BEFORE'.srcp;
    %%

    ! 'AFTER'
    %%
        %<optional qualifier>.qualifier = DOES_AFTER;
        %<optional qualifier>.srcp = %'AFTER'.srcp;
    %%

    ! 'ONLY'
    %%
        %<optional qualifier>.qualifier = DOES_ONLY;
        %<optional qualifier>.srcp = %'ONLY'.srcp;
    %%
    ;


---> MISCELLANEOUS
<optional not>
    =
    %% %<optional not>.not = FALSE; %%

    ! 'NOT'
    %% %<optional not>.not = TRUE; %%
    ;

<optional id>
    =
    %% %<optional id>.id = NULL; %%

    ! <id>
    %% %<optional id>.id = %<id>.id; %%
    ;

<ids>			-- RETURNS: idList
    = <id>
    %% %<ids>.idList = append(NULL, %<id>.id); %%

    ! <ids> <id>
    %% %<ids>.idList = append(%<ids>.idList, %<id>.id); %%
    ;

<id list>			-- RETURNS: idList
    = <id>
    %%
        %<id list>.idList = append(NULL, %<id>.id);
    %%

    ! <id list> ',' <id>
    %%
        %<id list>.idList = append(%<id list>.idList, %<id>.id);
    %%
    ;


<id>					-- RETURNS: id
    = IDENTIFIER
    %% %<id>.id = newId(`&%IDENTIFIER.srcp, %IDENTIFIER.chars); %%
    ;


<optional integer>			-- RETURNS: str
    =
    %% %<optional integer>.string = NULL; %%

    ! INTEGER
    %%
	%<optional integer>.string = (char *)malloc(strlen(%INTEGER.chars)+1);
	strcpy(%<optional integer>.string, %INTEGER.chars);
    %%
    ;

<optional minus>			-- RETURNS: minus
    =
    %% %<optional minus>.minus = FALSE; %%

    ! '-'
    %% %<optional minus>.minus = TRUE; %%
    ;

<attribute reference>			-- RETURNS: what, id
    = <id> 'OF' <what>
    %%
	%<attribute reference>.srcp = %'OF'.srcp;
	%<attribute reference>.id = %<id>.id;
	%<attribute reference>.what = %<what>.what;
    %%
    ;

%%OPTIONS

	Prefix 'pm';
	Listerprefix 'lm';
--	List Grammar, Statistics;
	List Grammar, Statistics, Items;
	StackLimit 64;
	Pack RDS;
	Line;
--	Debug;
	No Resolve;

%%IMPORT

#include "util.h"
#include "../interpreter/acode.h"

#include "types.h"
#include "smScan.h"
#include "token.h"

#include "lmList.h"

#include "alt.h"                /* ALT-nodes */
#include "evt.h"                /* EVT-nodes */
#include "lim.h"		/* LIM-nodes */
#include "msg.h"                /* MSG-nodes */
#include "opt.h"		/* OPTIONS */
#include "rul.h"                /* RUL-nodes */
#include "sco.h"                /* SCORES */
#include "str.h"		/* STRINGS */
#include "syn.h"                /* SYN-nodes */

#include "adv_x.h"
#include "add_x.h"
#include "atr_x.h"
#include "cla_x.h"
#include "chk_x.h"
#include "cnt_x.h"
#include "elm_x.h"
#include "exp_x.h"
#include "ext_x.h"
#include "id_x.h"
#include "ins_x.h"
#include "lst_x.h"
#include "prop_x.h"
#include "res_x.h"
#include "scr_x.h"
#include "stm_x.h"
#include "stp_x.h"
#include "stx_x.h"
#include "sym_x.h"
#include "vrb_x.h"
#include "whr_x.h"
#include "wht_x.h"

%%SCANNER

    smScan(lexContext, token);


%%INSERTSYMBOL

{
  static int idno = 1;

    /* Make the requested token */
    token->code = code;
    if (token->code == sm_MAIN_IDENTIFIER_Token) {
      sprintf(token->chars, "<generated identifier #%d>", idno++);
      strcat(insStr, " ('");
      strcat(insStr, token->chars);
      strcat(insStr, "')");
    } else
      strcpy(token->chars, symString);
}

%%DECLARATIONS

static int val(char str[])
{
  int temp;

  sscanf(str, "%d", &temp);
  return(temp);
}


%%ATTRIBUTES

  add %% AddNode *%1%%,
  agr %% AggregateKind %1%%,
  alt %% AltNod *%1%%,
  alts %% List *%1%%,
  article %% List *%1%%,		-- of StmNod: article-clause,
  definite %% List *%1%%,		-- of StmNod: article-clause,
  definiteSrcp %% Srcp %1%%,
  indefinite %% List *%1%%,		-- of StmNod: article-clause,
  indefiniteSrcp %% Srcp %1%%,
  atr %% Attribute *%1%%,
  atrs %% List *%1%%,
  bits %% int %1%%,
  cases %% List *%1%%,
  chk %% ChkNod *%1%%,
  chks %% List *%1%%,
  cla %% ClaNod *%1%%,
  clas %% List *%1%%,
  cnt %% Container *%1%%,
  cnts %% List *%1%%,
  descriptionChecks %% List *%1%%,	-- of Checks: descriptionCheck-clause,
  descriptionCheckSrcp %% Srcp %1%%,
  descriptionDoes %% List *%1%%,	-- of Statements: descriptionDoes-clause,
  descriptionSrcp %% Srcp %1%%,
  elm %% Element *%1%%,
  elms %% List *%1%%,
  entered %% List *%1%%,
  enteredSrcp %% Srcp %1%%,
  evt %% EvtNod *%1%%,
  evts %% List *%1%%,
  exp %% Expression *%1%%,
  exps %% List *%1%%,
  expKd %% ExpressionKind %1%%,
  ext %% ExtNod *%1%%,
  exts %% List *%1%%,
  form %% SayForm %1%%,
  id %% IdNode *%1%%,
  idList %% List *%1%%,
  idList2 %% List *%1%%,
  ins %% Instance *%1%%,		-- Instance
  inss %% List *%1%%,			-- of Instances
  lim %% LimNod *%1%%,
  lims %% List *%1%%,
  mentioned %% List *%1%%,		-- of StmNod: mentioned-clause,
  mentionedSrcp %% Srcp %1%%,
  minus %% Bool %1%%,
  msg %% MsgNod *%1%%,
  msgs %% List *%1%%,
  nam %% List *%1%%,		-- of NamNod: name-clause
  nams %% List *%1%%,		-- of NamNods: name-clause list (list of lists)
  not %% Bool %1%%,
  op %% OperatorKind %1%%,
  opaque %% Bool %1%%,
  qual %% QualKind %1%%,
  res %% ResNod *%1%%,
  ress %% List *%1%%,
  restrictionKind %% RestrictionKind %1%%,
  rul %% RulNod *%1%%,
  ruls %% List *%1%%,
  scr %% Script *%1%%,
  scrs %% List *%1%%,
  srcp %% Srcp %1%%,
  srcp2 %% Srcp %1%%,
  stm %% StmNod *%1%%,
  stms %% List *%1%%,
  stms2 %% List *%1%%,
  stms3 %% List *%1%%,
  stp %% Step *%1%%,
  stps %% List *%1%%,
  str %% char *%1%%,
  stx %% Syntax *%1%%,
  stxs %% List *%1%%,
  syn %% SynNod *%1%%,
  syns %% List *%1%%,
  val %% int %1%%,
  vrb %% Verb *%1%%,
  vrbs %% List *%1%%,
  whr %% Where *%1%%,
  wht %% What *%1%%;

%%TERMINALS

    Identifier = 2,1,1 => 'Identifier';

%%RECOVERY

    Fiducial('VERB', 'DOES', 'EXIT', 'EVENT', 'START',
		'SYNTAX', 'SCRIPT', 'SYNONYMS', 'CONTAINER', 'WHEN',
		'MENTIONED', 'ATTRIBUTES', 'DESCRIPTION', 'END', 'CHECK');

    Separator(',');

    Skip(Identifier, Integer, '.');

%%RULES

--> ADVENTURE
<adventure>
    = <optional_options> <declarations> <start>
    ;

---> OPTIONS
<optional_options>	-- RETURNS: <nothing>
    =
    ! ('OPTIONS'|'OPTION') <options>
    ;

<options>			-- RETURNS: <nothing>
    = <option>
    ! <options> <option>
    ;

<option>			-- RETURNS: <nothing>
    = ID '.'
    %%
	optBool(%ID.id->string, `&%ID.id->srcp, TRUE);
    %%

    ! ID ID '.'
    %%
	optenum(%ID.id->string, `&%ID.id->srcp, %2ID.id->string);
    %%

    ! ID Integer '.'
    %%
	optint(%ID.id->string, `&%ID.id->srcp, val(%Integer.chars));
    %%
    ;

---> DECLARATIONS
<declarations>
    =
    ! <declarations> <declaration>
    ;

<declaration>
    = <synonyms>
    %% adv.syns = combine(adv.syns, %<synonyms>.syns);%%

    ! <messages>
    %% adv.msgs = combine(adv.msgs, %<messages>.msgs); %%

    ! <syntax>
    %% adv.stxs = combine(adv.stxs, %<syntax>.stxs); %%

    ! <verb>
    %% adv.vrbs = concat(adv.vrbs, %<verb>.vrb, VERB_LIST); %%

    ! <class>
    %% adv.clas = concat(adv.clas, %<class>.cla, CLASS_LIST); %%

    ! <addition>
    %% adv.adds = concat(adv.adds, %<addition>.add, ADD_LIST); %%

    ! <instance>
    %% adv.inss = concat(adv.inss, %<instance>.ins, INSTANCE_LIST); %%

    ! <event>
    %% adv.evts = concat(adv.evts, %<event>.evt, EVENT_LIST); %%

    ! <rule>
    %% adv.ruls = concat(adv.ruls, %<rule>.rul, RULE_LIST); %%
    ;

----> ATTRIBUTES
<attributes>		-- RETURNS: atrs
    = <attribute definition> '.'
    %%
	%<attributes>.atrs = concat(NULL, %<attribute definition>.atr, ATTRIBUTE_LIST);
    %%

    ! <attributes> <attribute definition> '.'
    %%
	%<attributes>.atrs = concat(%<attributes>.atrs, %<attribute definition>.atr, ATTRIBUTE_LIST);
    %%
    ;

<attribute definition>		-- RETURNS: atr
    = ID
    %%
	%<attribute definition>.atr = newAttribute(`&%ID.id->srcp,
						BOOLEAN_TYPE,
						%ID.id,
						TRUE, 0, 0);
    %%

    ! 'NOT' ID
    %%
	%<attribute definition>.atr = newAttribute(`&%ID.id->srcp,
						BOOLEAN_TYPE,
						%ID.id,
						FALSE, 0, 0);
    %%

    ! ID <optional_minus> Integer
    %%
	if (%<optional_minus>.minus)
		%<attribute definition>.atr = newAttribute(`&%ID.id->srcp,
							INTEGER_TYPE,
							%ID.id,
							-val(%Integer.chars), 0, 0);
	else
		%<attribute definition>.atr = newAttribute(`&%ID.id->srcp,
							INTEGER_TYPE,
							%ID.id,
							val(%Integer.chars), 0, 0);
    %%

    ! ID STRING	
    %%
	%<attribute definition>.atr = newAttribute(`&%ID.id->srcp,
						STRING_TYPE,
						%ID.id,
						0, %STRING.fpos, %STRING.len);
    %%
    ;

---> <SYNONYMS>
<synonyms>			-- RETURNS: syns
    = 'SYNONYMS' <synonym_list>
    %%
	%<synonyms>.syns = %<synonym_list>.syns;
    %%
    ;

<synonym_list>			-- RETURNS: syns
    = <synonym_declaration>
    %%
	%<synonym_list>.syns = concat(NULL, %<synonym_declaration>.syn, SYNONYM_LIST);
    %%

    ! <synonym_list> <synonym_declaration>
    %%
	%<synonym_list>.syns = concat(%<synonym_list>.syns, %<synonym_declaration>.syn, SYNONYM_LIST);
    %%
    ;

<synonym_declaration>				-- RETURNS: syn
    = <id_list> '=' ID '.'
    %%
	%<synonym_declaration>.syn = newsyn(`&%'='.srcp,
			     			%<id_list>.idList,
			      			%ID.id);
    %%
    ;

---> <MESSAGES>
<messages>			-- RETURNS: msgs
    = 'MESSAGE' <message_list>
    %%
	%<messages>.msgs = %<message_list>.msgs;
    %%
    ;

<message_list>			-- RETURNS: msgs
    = <message>
    %%
	%<message_list>.msgs = concat(NULL, %<message>.msg, MESSAGE_LIST);
    %%

    ! <message_list> <message>
    %%
	%<message_list>.msgs = concat(%<message_list>.msgs, %<message>.msg, MESSAGE_LIST);
    %%
    ;

<message>				-- RETURNS: msg
    = ID ':' <statements>
    %%
	%<message>.msg = newmsg(`&%':'.srcp,
			      %ID.id,
			      %<statements>.stms);
    %%
    ;

---> <SYNTAX>				-- RETURNS: stxs
<syntax>
    = 'SYNTAX' <syntax_list>
    %%
	%<syntax>.stxs = %<syntax_list>.stxs;
    %%
    ;

<syntax_list>
    = <syntax_item>
    %%
	%<syntax_list>.stxs = concat(NULL, %<syntax_item>.stx, SYNTAX_LIST);
    %%

    ! <syntax_list> <syntax_item>
    %%
	%<syntax_list>.stxs = concat(%<syntax_list>.stxs, %<syntax_item>.stx, SYNTAX_LIST);
    %%
    ;

<syntax_item>
    = ID '=' <syntax_elements> <optional_syntax_restrictions>
    %%
	%<syntax_item>.stx = newSyntax(%'='.srcp,
				  	%ID.id,
				  	concat(%<syntax_elements>.elms,
				        	newElement(`&%ID.id->srcp,
							   END_OF_SYNTAX,
							   NULL,
							   FALSE),
						ELEMENT_LIST),
					%<optional_syntax_restrictions>.ress,
					%<optional_syntax_restrictions>.srcp);
    %%
    ;

<syntax_elements>
    = <syntax_element>
    %%
	%<syntax_elements>.elms = concat(NULL, %<syntax_element>.elm, ELEMENT_LIST);
    %%

    ! <syntax_elements> <syntax_element>
    %%
	%<syntax_elements>.elms = concat(%<syntax_elements>.elms,
				       %<syntax_element>.elm,
	                                ELEMENT_LIST);
    %%
    ;

<syntax_element>
    = ID
    %%
	%<syntax_element>.elm = newElement(`&%ID.id->srcp, WORD_ELEMENT,
					   %ID.id,
					   FALSE);
    %%

    ! '(' ID ')' <optional_indicators>

    %%
	%<syntax_element>.elm = newElement(`&%ID.id->srcp, PARAMETER_ELEMENT,
					   %ID.id,
					   %<optional_indicators>.bits);
    %%
    ;

<optional_indicators>
    =
    %%
	%<optional_indicators>.bits = 0;
    %%

    ! <optional_indicators> <indicator>
    %%
	%<optional_indicators>.bits |= %<indicator>.bits;
    %%
    ;

<indicator>
    = '*'
    %%
	%<indicator>.bits = MULTIPLEBIT;
    %%

    ! '!'
    %%
	%<indicator>.bits = OMNIBIT;
    %%
    ;

-- A syntax restriction is a definition of which classes a syntax parameter may
-- belong to. A parameter can be restricted to a list of classes in the same
-- restriction clause. It is also possible to restrict a parameter using
-- multiple clauses since we want different ELSE printouts depending on what
-- it was not. Also inheritance will make a parameter be restricted in multiple
-- clauses following the class hierarchy.
<syntax_restriction_clauses>
    = <syntax_restriction>
    %%
	%<syntax_restriction_clauses>.ress = concat(NULL, %<syntax_restriction>.res, RESTRICTION_LIST);
    %%

    ! <syntax_restriction_clauses> 'AND' <syntax_restriction>
    %%
	%<syntax_restriction_clauses>.ress = concat(%<syntax_restriction_clauses>.ress,
				       %<syntax_restriction>.res, RESTRICTION_LIST);
    %%
    ;

<syntax_restriction>
    = ID 'ISA' <restriction_class> 'ELSE' <statements>
    %%
	%<syntax_restriction>.res = newRestriction(`&%'ISA'.srcp,
			  			  %ID.id,
						  %<restriction_class>.restrictionKind,
						  %<restriction_class>.id,
						  %<statements>.stms);
    %%
    ;

<restriction_class>			-- RETURNS: id, restrictionKind
    = ID
    %%
	%<restriction_class>.id = %ID.id;
	%<restriction_class>.restrictionKind = ID_RESTRICTION;
    %%

    ! 'CONTAINER'
    %%
	%<restriction_class>.id = NULL;
	%<restriction_class>.restrictionKind = CONTAINER_RESTRICTION;
    %%
    ;

<optional_syntax_restrictions>
    = '.'
    %%
	%<optional_syntax_restrictions>.ress = NULL;
    %%

    ! 'WHERE' <syntax_restriction_clauses>
    %%
	%<optional_syntax_restrictions>.srcp = %'WHERE'.srcp;
	%<optional_syntax_restrictions>.ress = %<syntax_restriction_clauses>.ress;
    %%
    ;


---> VERBS
<verb>			-- RETURNS: vrb
    = <verb_header> <verb_body> <verb_tail>
    %%
	%<verb>.vrb = newVerb(`&%<verb_header>.srcp,
			   %<verb_header>.idList,
			   %<verb_body>.alts);
	if (%<verb_tail>.id != NULL) { /* END-id given */
	    if (strcmp(%<verb_header>.str, %<verb_tail>.id->string) != 0)
		lmLog(`&%<verb_tail>.id->srcp, 200, sevWAR, %<verb_header>.str);
	}
    %%
    ;

<verb_header>		-- RETURNS: srcp, str, idList
    = 'VERB' <id_list>
    %%
	%<verb_header>.srcp   = %'VERB'.srcp;
	%<verb_header>.str    = %<id_list>.str;
	%<verb_header>.idList   = %<id_list>.idList;
    %%
    ;

<verb_body>
    = <simple_verb_body>
    %%
	%<verb_body>.alts = concat(NULL,
				 newalt(`&%<simple_verb_body>.srcp,
					NULL,
					%<simple_verb_body>.chks,
					%<simple_verb_body>.qual,
					%<simple_verb_body>.stms),
				   ALTERNATIVE_LIST);
    %%

    ! <verb_alternatives>
    %%
	%<verb_body>.alts = %<verb_alternatives>.alts;
    %%
    ;

<verb_alternatives>
    = <verb_alternative>
    %%
	%<verb_alternatives>.alts = concat(NULL, %<verb_alternative>.alt, ALTERNATIVE_LIST);
    %%

    ! <verb_alternatives> <verb_alternative>
    %%
	%<verb_alternatives>.alts = concat(%<verb_alternatives>.alts,
					 %<verb_alternative>.alt,
	     				ALTERNATIVE_LIST);
    %%
    ;

<verb_alternative>
    = 'WHEN' ID <simple_verb_body>
    %%
	%<verb_alternative>.alt = newalt(`&%'WHEN'.srcp,
				       %ID.id,
				       %<simple_verb_body>.chks,
				       %<simple_verb_body>.qual,
				       %<simple_verb_body>.stms);
    %%
    ;

<simple_verb_body>		-- RETURNS: srcp, chks, stms, qual
    = <optional_checks> <optional_does>
    %%
	if (%<optional_does>.stms == NULL) /* No DOES */
	  %<simple_verb_body>.srcp = %<optional_checks>.srcp;
	else
	  %<simple_verb_body>.srcp = %<optional_does>.srcp;
	%<simple_verb_body>.chks = %<optional_checks>.chks;
	%<simple_verb_body>.qual = %<optional_does>.qual;
	%<simple_verb_body>.stms = %<optional_does>.stms;
    %%
    ;

<verb_tail>		-- RETURNS: id
    = 'END' 'VERB' <optional_id> '.'
    %%
	%<verb_tail>.id = %<optional_id>.id;
    %%
    ;

----> CHECKS
<optional_checks>		-- RETURNS: srcp, chks
    =
    %%
	%<optional_checks>.chks = NULL;
	%<optional_checks>.srcp = nulsrcp;
    %%

    ! 'CHECK' <statements>
    %%
	%<optional_checks>.srcp = %'CHECK'.srcp;
	%<optional_checks>.chks = concat(NULL, newchk(NULL, %<statements>.stms), CHECK_LIST);
    %%

    ! 'CHECK' <check_list>
    %%
	%<optional_checks>.srcp = %'CHECK'.srcp;
	%<optional_checks>.chks = %<check_list>.chks;
    %%
    ;

<check_list>		-- RETURNS: chks
    = <check>
    %%
	%<check_list>.chks = concat(NULL, %<check>.chk, CHECK_LIST);
    %%

    ! <check_list> 'AND' <check>
    %%
	%<check_list>.chks = concat(%<check_list>.chks, %<check>.chk, CHECK_LIST);
    %%
    ;

<check>			-- RETURNS: chk
    = <expression> 'ELSE' <statements>
    %%
	%<check>.chk = newchk(%<expression>.exp, %<statements>.stms);
    %%
    ;

----> DOES
<optional_does>		-- RETURNS: qual, srcp, stms
    =
    %%
	%<optional_does>.qual = QUAL_DEFAULT;
	%<optional_does>.stms = NULL;
    %%

    ! <does>
    -- Propagate!
    ;

<does>
    = 'DOES' <optional_qual> <statements>
    %%
	%<does>.qual = %<optional_qual>.qual;
	%<does>.srcp = %'DOES'.srcp;
	%<does>.stms = %<statements>.stms;
    %%
    ;


---> CLASS
<class>			-- RETURNS: cla
    = 'EVERY' ID <optional_heritage> <properties> <class_tail>
    %%
	%<class>.cla = newClass(`&%'EVERY'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newProps(%<properties>.nams,
					%<properties>.whr,
					%<properties>.atrs,
					%<properties>.cnt,
					%<properties>.descriptionCheckSrcp,
					%<properties>.descriptionChecks,
					%<properties>.descriptionSrcp,
					%<properties>.descriptionDoes,
					%<properties>.entered,
					%<properties>.enteredSrcp,
					%<properties>.mentioned,
					%<properties>.mentionedSrcp,
					%<properties>.definite,
					%<properties>.definiteSrcp,
					%<properties>.indefinite,
					%<properties>.indefiniteSrcp,
					%<properties>.exts,
					%<properties>.vrbs,
					%<properties>.scrs));
	if (%<class_tail>.id != NULL)  /* END-id given */
	    if (!equalId(%ID.id, %<class_tail>.id))
		lmLog(`&%<class_tail>.id->srcp, 200, sevWAR, %ID.id->string);
    %%
    ;

<class_tail>		-- RETURNS: id
    = 'END' 'EVERY' <optional_id> ['.']
    %% %<class_tail>.id = %<optional_id>.id; %%
    ;


---> ADDITION
<addition>			-- RETURNS: cla
    = 'ADD' 'TO' ['EVERY'] ID <optional_heritage> <properties> <add_tail>
    %%
	%<addition>.add = newAdd(`&%'ADD'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newProps(%<properties>.nams,
					%<properties>.whr,
					%<properties>.atrs,
					%<properties>.cnt,
					%<properties>.descriptionCheckSrcp,
					%<properties>.descriptionChecks,
					%<properties>.descriptionSrcp,
					%<properties>.descriptionDoes,
					%<properties>.entered,
					%<properties>.enteredSrcp,
					%<properties>.mentioned,
					%<properties>.mentionedSrcp,
					%<properties>.definite,
					%<properties>.definiteSrcp,
					%<properties>.indefinite,
					%<properties>.indefiniteSrcp,
					%<properties>.exts,
					%<properties>.vrbs,
					%<properties>.scrs));
	if (%<add_tail>.id != NULL)  /* END-id given */
	    if (!equalId(%ID.id, %<add_tail>.id))
		lmLog(`&%<add_tail>.id->srcp, 200, sevWAR, %ID.id->string);
    %%
    ;

<add_tail>		-- RETURNS: id
    = 'END' 'ADD' [ 'TO' ] <optional_id> ['.']
    %% %<add_tail>.id = %<optional_id>.id; %%
    ;


---> INSTANCE
<instance>			-- RETURNS: ins
    = 'THE' ID <optional_heritage> <properties> <instance tail>
    %%
	%<instance>.ins = newInstance(`&%'THE'.srcp,
				%ID.id,
				%<optional_heritage>.id,
				newProps(%<properties>.nams,
					%<properties>.whr,
					%<properties>.atrs,
					%<properties>.cnt,
					%<properties>.descriptionCheckSrcp,
					%<properties>.descriptionChecks,
					%<properties>.descriptionSrcp,
					%<properties>.descriptionDoes,
					%<properties>.entered,
					%<properties>.enteredSrcp,
					%<properties>.mentioned,
					%<properties>.mentionedSrcp,
					%<properties>.definite,
					%<properties>.definiteSrcp,
					%<properties>.indefinite,
					%<properties>.indefiniteSrcp,
					%<properties>.exts,
					%<properties>.vrbs,
					%<properties>.scrs));
	if (%<instance tail>.id != NULL)  /* END-id given */
	    if (!equalId(%ID.id, %<instance tail>.id))
		lmLog(`&%<instance tail>.id->srcp, 200, sevWAR, %ID.id->string);
    %%
    ;

<instance tail>		-- RETURNS: id
    = 'END' 'THE' <optional_id> ['.']
    %% %<instance tail>.id = %<optional_id>.id; %%
    ;

<optional_heritage>		-- RETURNS: id
    =
    %%
	%<optional_heritage>.id = NULL;
    %%

    ! <heritage>
    %%
	%<optional_heritage>.id = %<heritage>.id;
    %%
    ;

<heritage>		-- RETURNS: id
    = 'ISA' ID ['.']
    %% %<heritage>.id = %ID.id; %%
    ;

<properties>			-- RETURNS: all!
    = 
    %%
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out all fields */
    %%

    ! <properties> <property>
    %%
	%<properties>.nams = concat(%<properties>.nams, %<property>.nam, NAME_LIST);

        if (%<property>.whr != NULL) {
            if (%<properties>.whr != NULL) 
                /* WHERE clause already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "WHERE", "class/instance", NULL);
	    else
	        %<properties>.whr = %<property>.whr;
        }

	%<properties>.atrs = combine(%<properties>.atrs, %<property>.atrs);

	if (%<property>.cnt != NULL) {
            if (%<properties>.cnt != NULL)
                /* CONTAINER properties already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "CONTAINER properties", "class/instance", NULL);
	    else 
	        %<properties>.cnt = %<property>.cnt;
        }

	if (%<property>.descriptionChecks != NULL) {
            if(%<properties>.descriptionChecks != NULL)
                /* DESCRIPTION CHECK already declared */
	        lmLogv(`&%<property>.srcp2, 204, sevERR, "DESCRIPTION CHECK", "class/instance", NULL);
	    else {
	        %<properties>.descriptionChecks = %<property>.descriptionChecks;
		%<properties>.descriptionCheckSrcp = %<property>.srcp2;
	    }
        }

	if (%<property>.descriptionDoes != NULL) {
            if (%<properties>.descriptionDoes != NULL)
	        /* DESCRIPTION CHECK already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "DESCRIPTION", "class/instance", NULL);
	    else 
	        %<properties>.descriptionDoes = %<property>.descriptionDoes;
		%<properties>.descriptionSrcp = %<property>.srcp;
        }

	if (%<property>.entered != NULL) {
            if (%<properties>.entered != NULL)
                /* ENTERED already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "ENTERED", "class/instance", NULL);
	    else {
                %<properties>.entered = %<property>.entered;
		%<properties>.enteredSrcp = %<property>.srcp;
	    }
        }

	if (%<property>.mentioned != NULL) {
            if (%<properties>.mentioned != NULL)
                /* MENTIONED already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "MENTIONED", "class/instance", NULL);
	    else {
                %<properties>.mentioned = %<property>.mentioned;
		%<properties>.mentionedSrcp = %<property>.srcp;
	    }
        }

	if (%<property>.indefinite != NULL) {
            if (%<properties>.indefinite != NULL)
                /* Indefinite Article/Form already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "[Indefinite] Article/Form", "class/instance", NULL);
            else { 
	        %<properties>.indefinite = %<property>.indefinite;
		%<properties>.indefiniteSrcp = %<property>.srcp;
	    }
        }

	if (%<property>.definite != NULL) {
            if (%<properties>.definite != NULL)
                /* Definite Article/Form already declared */
	        lmLogv(`&%<property>.srcp, 204, sevERR, "Definite Article/Form", "class/instance", NULL);
            else { 
	        %<properties>.definite = %<property>.definite;
		%<properties>.definiteSrcp = %<property>.srcp;
	    }
        }

	%<properties>.exts = concat(%<properties>.exts, %<property>.ext, EXIT_LIST);
	%<properties>.vrbs = concat(%<properties>.vrbs, %<property>.vrb, VERB_LIST);
	%<properties>.scrs = concat(%<properties>.scrs, %<property>.scr, SCRIPT_LIST);
    %%
    ;


<property>
    = <name>
    %%{ List *nam = %<name>.nam;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.nam = nam;
    }%%

    ! <where> ['.']
    %%{
        Where *whr = %<where>.whr;
        Srcp srcp = %<where>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.whr = whr;
	%<property>.srcp = srcp;
    }%%

    ! <is> <attributes>						%+('OPAQUE')
    %%
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.atrs = %<attributes>.atrs;
    %%

    ! <container properties>
    %%{
        Container *cnt = %<container properties>.cnt;
        Srcp srcp = %<container properties>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.cnt = cnt;
	%<property>.srcp = srcp;
    }%%

    ! <description>
    %%{
        Srcp srcp2 = %<description>.srcp2;
        List *descriptionChecks = %<description>.chks;
        Srcp srcp = %<description>.srcp;
        List *descriptionDoes = %<description>.stms;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */

	%<property>.srcp2 = srcp2;
	%<property>.descriptionChecks = descriptionChecks;
	%<property>.srcp = srcp;
	%<property>.descriptionDoes = descriptionDoes;
    }%%

    ! <entered>
    %%{
        List *entered = %<entered>.stms;
        Srcp srcp = %<entered>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.entered = entered;
	%<property>.srcp = srcp;
    }%%

    ! <mentioned>
    %%{
        List *ment = %<mentioned>.stms;
        Srcp srcp = %<mentioned>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.mentioned = ment;
	%<property>.srcp = srcp;
    }%%

    ! ['INDEFINITE'] <article>
    %%{ List *indefinite = %<article>.article;
        Srcp srcp = %<article>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.indefinite = indefinite;
	%<property>.srcp = srcp;
    }%%


    ! 'DEFINITE' <article>
    %%{ List *definite = %<article>.article;
        Srcp srcp = %<article>.srcp;

	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.definite = definite;
	%<property>.srcp = srcp;
    }%%


    ! <exit>
    %%{ ExtNod *ext = %<exit>.ext;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.ext = ext;
    }%%

    ! <verb>
    %%{ Verb *vrb = %<verb>.vrb;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.vrb = vrb;
    }%%

    ! <script>
    %%{ Script *scr = %<script>.scr;
	memset(&pmSeSt[pmStkP+1], 0, sizeof(pmSeSt[pmStkP+1])); /* Zero out other fields */
	%<property>.scr = scr;
    }%%
    ;


----> EXITS
<exit>			-- RETURNS: ext
    = 'EXIT' <id_list> 'TO' ID <optional_exit_body> '.'
    %%
	%<exit>.ext = newext(`&%'EXIT'.srcp,
			   %<id_list>.idList,
			   %ID.id,
			   %<optional_exit_body>.chks,
			   %<optional_exit_body>.stms);
	if (%<optional_exit_body>.id != NULL) { /* END-id given */
	    if (strcmp(%<id_list>.str, %<optional_exit_body>.id->string) != 0)
		lmLog(`&%<optional_exit_body>.id->srcp, 200, sevWAR, %<id_list>.str);
	}
    %%
    ;

<optional_exit_body>	-- RETURNS: chks, stms, id
    =
    %%
	%<optional_exit_body>.chks = NULL;
	%<optional_exit_body>.stms = NULL;
	%<optional_exit_body>.id = NULL;
    %%

    ! <optional_checks> <optional_does> 'END' 'EXIT' <optional_id>
    %%
	%<optional_exit_body>.chks = %<optional_checks>.chks;
	%<optional_exit_body>.stms = %<optional_does>.stms;
	if (%<optional_does>.qual != QUAL_DEFAULT)
	     lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
	%<optional_exit_body>.id = %<optional_id>.id;
    %%
    ;

--
-- Attributes
--

<optional_attributes>	-- RETURNS: atrs
    =
    %%
	%<optional_attributes>.atrs = NULL;
    %%

    ! <optional_attributes> <is> <attributes>
    %%
	%<optional_attributes>.atrs = combine(%<optional_attributes>.atrs, %<attributes>.atrs);
    %%
    ;

<is>			-- RETURNS: srcp
    = 'IS'
    %%
	%<is>.srcp = %'IS'.srcp;
    %%

    ! 'ARE'
    %%
	%<is>.srcp = %'ARE'.srcp;
    %%

    ! 'HAS'
    %%
	%<is>.srcp = %'HAS'.srcp;
    %%
    ;

<optional_description>	-- RETURNS: chks, stms
    =
    %%
	%<optional_description>.chks = NULL;
	%<optional_description>.stms = NULL;
    %%

    ! <description> 
    -- Propagate!
    ;

<description>		-- RETURNS: chks, stms, srcp, srcp2
    = 'DESCRIPTION' <optional_checks> <optional_does>
    %%
	if (%<optional_checks>.chks == NULL && %<optional_does>.stms == NULL) {
	  %<description>.chks = NULL;
	  %<description>.stms = concat(NULL, newStatement(`&%'DESCRIPTION'.srcp,
						NOP_STATEMENT), STATEMENT_LIST);
          %<description>.srcp = %'DESCRIPTION'.srcp;
          %<description>.srcp2 = nulsrcp;
	} else {
	  if (%<optional_checks>.chks != NULL)
	    %<description>.srcp2 = %<optional_checks>.srcp;
	  else
	    %<description>.srcp2 = nulsrcp;
	  if (%<optional_does>.stms != NULL)
	    %<description>.srcp = %<optional_does>.srcp;
	  else
	    %<description>.srcp = %'DESCRIPTION'.srcp;
	  %<description>.chks = %<optional_checks>.chks;
	  %<description>.stms = %<optional_does>.stms;

	  if (%<optional_does>.qual != QUAL_DEFAULT)
	    lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
	}
    %%

    ! 'DESCRIPTION' <statements>
    %%
	%<description>.stms = %<statements>.stms;
	%<description>.srcp = %'DESCRIPTION'.srcp;
	%<description>.srcp2 = nulsrcp;
    %%
    ;

<article>			-- RETURNS: article, srcp
    = 'ARTICLE' 
    %%
	%<article>.article = concat(NULL, newStatement(`&%'ARTICLE'.srcp,
							NOP_STATEMENT), STATEMENT_LIST);
	%<article>.srcp = %'ARTICLE'.srcp;
    %%

    ! 'ARTICLE' <statements>
    %%
	%<article>.article = %<statements>.stms;
	%<article>.srcp = %'ARTICLE'.srcp;
    %%
    ;


<entered>		-- RETURNS: stms, srcp
    = 'ENTERED' <statements>
    %%
	%<entered>.stms = %<statements>.stms;
	%<entered>.srcp = %'ENTERED'.srcp;
    %%
    ;


<mentioned>		-- RETURNS: stms, srcp
    = 'MENTIONED' <statements>
    %%
	%<mentioned>.stms = %<statements>.stms;
	%<mentioned>.srcp = %'MENTIONED'.srcp;
    %%
    ;


<optional_names>		-- RETURNS: nams (a list of nam)
    =
    %%
	%<optional_names>.nams = NULL;
    %%

    ! <optional_names> <name>
    %%
	%<optional_names>.nams = concat(%<optional_names>.nams,
					%<name>.nam, NAME_LIST);
    %%
    ;

<name>			-- RETURNS: nam
    = 'NAME' <ids> <optional_full_stop>
    %%
	%<name>.nam = %<ids>.idList;
    %%
    ;

<optional_full_stop>
    =							%+('OPAQUE')
    ! '.'
    ;

---> CONTAINERS
<container properties>					-- RETURNS: cnt, srcp
    = [ 'WITH' ] <optionally_opaque> 'CONTAINER' <container_body>
    %%
	%<container properties>.cnt = newContainer(newContainerBody(`&%'CONTAINER'.srcp,
					%<optionally_opaque>.opaque,
					%<container_body>.lims,
					%<container_body>.stms,
					%<container_body>.stms2,
					%<container_body>.chks,
					%<container_body>.stms3));
        %<container properties>.srcp = %'CONTAINER'.srcp;
    %%
    ;


<optionally_opaque>
    =
    %% %<optionally_opaque>.opaque = FALSE; %%
    ! 'OPAQUE'
    %% %<optionally_opaque>.opaque = TRUE; %%
    ;


<container_body>		-- RETURNS: lims, stms, stms2
    =  <optional_limits> <optional_header> <optional_empty> <optional_extract>
    %%
	%<container_body>.lims  = %<optional_limits>.lims;
	%<container_body>.stms  = %<optional_header>.stms;
	%<container_body>.stms2 = %<optional_empty>.stms;
	%<container_body>.chks = %<optional_extract>.chks;
	%<container_body>.stms3 = %<optional_extract>.stms;
    %%
    ;

<optional_limits>		-- RETURNS: lims
    =
    %%
	%<optional_limits>.lims = NULL;
    %%

    ! 'LIMITS' <limits>						%+('OPAQUE')
    %%
	%<optional_limits>.lims = %<limits>.lims;
    %%
    ;

<limits>			-- RETURNS: lims
    = <limit>
    %%
	%<limits>.lims = concat(NULL, %<limit>.lim, LIMIT_LIST);
    %%

    ! <limits> <limit>
    %%
	%<limits>.lims = concat(%<limits>.lims, %<limit>.lim, LIMIT_LIST);
    %%
    ;

<limit>			-- RETURNS: lim
    = <limit_attribute> 'THEN' <statements>
    %%
	%<limit>.lim = newlim(`&%'THEN'.srcp,
			    %<limit_attribute>.atr,
			    %<statements>.stms);
    %%
    ;

<limit_attribute>		-- RETURNS: atr
    = <attribute definition>
    %%
	%<limit_attribute>.atr = %<attribute definition>.atr;
    %%

    ! 'COUNT' Integer
    %%
	%<limit_attribute>.atr = newAttribute(`&%'COUNT'.srcp,
				      INTEGER_TYPE,
				      newId(`&%'COUNT'.srcp, "count"),
				      val(%Integer.chars), 0, 0);
    %%
    ;

<optional_header>		-- RETURNS: stms
    =
    %%
	%<optional_header>.stms = NULL;
    %%

    ! 'HEADER' <statements>
    %%
	%<optional_header>.stms = %<statements>.stms;
    %%
    ;

<optional_empty>		-- RETURNS: stms
    =
    %%
	%<optional_empty>.stms = NULL;
    %%

    ! 'ELSE' <statements>
    %%
	%<optional_empty>.stms = %<statements>.stms;
    %%
    ;

<optional_extract>		-- RETURNS: chks, stms
    =
    %%
	%<optional_extract>.chks = NULL;
	%<optional_extract>.stms = NULL;
    %%

    ! 'EXTRACT' <optional_checks> <optional_does>
    %%
	%<optional_extract>.chks = %<optional_checks>.chks;
	%<optional_extract>.stms = %<optional_does>.stms;
	if (%<optional_does>.qual != QUAL_DEFAULT)
	  lmLog(`&%<optional_does>.srcp, 210, sevERR, "");
    %%

    ! 'EXTRACT' <statements>
    %%
	%<optional_extract>.chk = NULL;
	%<optional_extract>.stms = %<statements>.stms;
    %%

    ;

---> EVENTS
<event>			-- RETURNS: evt
    = <event_header> <statements> <event_tail>
    %%
	%<event>.evt = newevt(`&%<event_header>.srcp,
			    %<event_header>.id,
			    %<statements>.stms);
	if (%<event_tail>.id != NULL) { /* END-id given */
	    if (!equalId(%<event_header>.id, %<event_tail>.id))
		lmLog(`&%<event_tail>.id->srcp, 200, sevWAR, %<event_header>.id->string);
	}
    %%
    ;

<event_header>		-- RETURNS: srcp, id
    ='EVENT' ID
    %%
	%<event_header>.srcp = %'EVENT'.srcp;
	%<event_header>.id  = %ID.id;
    %%
    ;

<event_tail>		-- RETURNS: id
    = 'END' 'EVENT' <optional_id> '.'
    %%
	%<event_tail>.id = %<optional_id>.id;
    %%
    ;

----> SCRIPTS
<script>			-- RETURNS: scr
    = 'SCRIPT' ID ['.'] <optional_description> <step_list>
    %%
	%<script>.scr = newScript(`&%'SCRIPT'.srcp,
			          %ID.id,
			          %<optional_description>.stms,
			          %<step_list>.stps);
    %%
    ;

<step_list>		-- RETURNS: stps
    = <step>
    %%
	%<step_list>.stps = concat(NULL, %<step>.stp, STEP_LIST);
    %%

    ! <step_list> <step>
    %%
	%<step_list>.stps = concat(%<step_list>.stps, %<step>.stp, STEP_LIST);
    %%
    ;

<step>			-- RETURNS: stp
    = 'STEP' <statements>
    %%
	%<step>.stp = newStep(`&%'STEP'.srcp,
			   0,
			   NULL,
			   %<statements>.stms);
    %%

    ! 'STEP' 'AFTER' Integer <statements>
    %%
	%<step>.stp = newStep(`&%'STEP'.srcp,
			   val(%Integer.chars),
			   NULL,
			   %<statements>.stms);
    %%

    ! 'STEP' 'WAIT' 'UNTIL' <expression> <statements>
    %%
	%<step>.stp = newStep(`&%'STEP'.srcp,
			   0,
			   %<expression>.exp,
			   %<statements>.stms);
    %%
    ;

----> RULES
<rule>			-- RETURNS: rul
    = 'WHEN' <expression> <then> <statements> <optional_end_when>
    %%
	%<rule>.rul = newrul(`&%'WHEN'.srcp,
			   %<expression>.exp,
			   %<statements>.stms);
    %%
    ;

<then>
    = '=>'
    ! 'THEN'
    ;

<optional_end_when>
    =
    ! 'END' 'WHEN' ['.']
    ;

---> START
<start>
    = 'START' <where> '.' <optional_statements>
    %%
	adv.whr	 = %<where>.whr;
	adv.stms = %<optional_statements>.stms;
    %%
    ;

---> STATEMENTS
<optional_statements>	-- RETURNS: stms
    =
    %%
	%<optional_statements>.stms = NULL;
    %%

    ! <statements>
    %%
	%<optional_statements>.stms = %<statements>.stms;
    %%
    ;

<statements>		-- RETURNS: stms
    = <statement>
    %%
	%<statements>.stms = concat(NULL, %<statement>.stm, STATEMENT_LIST);
    %%

    ! <statements> <statement>
    %%
	%<statements>.stms = concat(%<statements>.stms, %<statement>.stm, STATEMENT_LIST);
    %%
    ;

<statement>		-- RETURNS: stm
    = <output_statement>
    %%
	%<statement>.stm = %<output_statement>.stm;
    %%

    ! <manipulation_statement>
    %%
	%<statement>.stm = %<manipulation_statement>.stm;
    %%

    ! <assignment_statement>
    %%
	%<statement>.stm = %<assignment_statement>.stm;
    %%

    ! <conditional_statement>
    %%
	%<statement>.stm = %<conditional_statement>.stm;
    %%

    ! <repetition_statement>
    %%
	%<statement>.stm = %<repetition_statement>.stm;
    %%

    ! <actor_statement>
    %%
	%<statement>.stm = %<actor_statement>.stm;
    %%

    ! <event_statement>
    %%
	%<statement>.stm = %<event_statement>.stm;
    %%

    ! <special_statement>
    %%
	%<statement>.stm = %<special_statement>.stm;
    %%
    ;

----> Output Statements
<output_statement>		-- RETURNS: stm
    = STRING		%-('IS', 'ARE', 'HAS', 'AT', 'HERE', 'IN', 'NEARBY')
    %%
	%<output_statement>.stm = newStatement(`&%STRING.srcp, PRINT_STATEMENT);
	%<output_statement>.stm->fields.print.fpos = %STRING.fpos;
	%<output_statement>.stm->fields.print.len = %STRING.len;
    %%

    ! 'DESCRIBE' <what> '.'
    %%
	%<output_statement>.stm = newStatement(`&%'DESCRIBE'.srcp, DESCRIBE_STATEMENT);
	%<output_statement>.stm->fields.describe.wht = %<what>.wht;
    %%

    ! 'SAY' <say_form> <expression> '.'
    %%
	%<output_statement>.stm = newStatement(`&%'SAY'.srcp, SAY_STATEMENT);
	%<output_statement>.stm->fields.say.exp = %<expression>.exp;
	%<output_statement>.stm->fields.say.form = %<say_form>.form;
    %%

    ! 'LIST' <what> '.'
    %%
	%<output_statement>.stm = newStatement(`&%'LIST'.srcp, LIST_STATEMENT);
	%<output_statement>.stm->fields.list.wht = %<what>.wht;
    %%	  

    ! 'SHOW' ID '.'
    %%
	%<output_statement>.stm = newStatement(`&%'SHOW'.srcp, SHOW_STATEMENT);
	%<output_statement>.stm->fields.show.filename = %ID.id;
    %%	  
    ;

<say_form>
    =
	%% %<say_form>.form = SAY_SIMPLE; %%
    ! 'THE'
	%% %<say_form>.form = SAY_DEFINITE; %%
    ! 'AN'
	%% %<say_form>.form = SAY_INDEFINITE; %%
    ;


----> Manipulation Statements
<manipulation_statement>			-- RETURNS: stm
    = 'EMPTY' <what> <optional_where> '.'
    %%
	%<manipulation_statement>.stm = newStatement(`&%'EMPTY'.srcp, EMPTY_STATEMENT);
	%<manipulation_statement>.stm->fields.empty.wht = %<what>.wht;
	%<manipulation_statement>.stm->fields.empty.where = %<optional_where>.whr;
    %%	  

    ! 'LOCATE' <what> <where> '.'
    %%
	%<manipulation_statement>.stm = newStatement(`&%'LOCATE'.srcp, LOCATE_STATEMENT);
	%<manipulation_statement>.stm->fields.locate.wht = %<what>.wht;
	%<manipulation_statement>.stm->fields.locate.whr = %<where>.whr;
    %%	  
    ;


----> Event Statements
<event_statement>			-- RETURNS: stm
    = 'SCHEDULE' ID <optional_where> 'AFTER' <expression> '.'
    %%
	%<event_statement>.stm = newStatement(`&%'SCHEDULE'.srcp, SCHEDULE_STATEMENT);
	%<event_statement>.stm->fields.schedule.id  = %ID.id;
	%<event_statement>.stm->fields.schedule.whr  = %<optional_where>.whr;
	%<event_statement>.stm->fields.schedule.when = %<expression>.exp;
    %%	  

    ! 'CANCEL' ID '.'
    %%
	%<event_statement>.stm = newStatement(`&%'CANCEL'.srcp, CANCEL_STATEMENT);
	%<event_statement>.stm->fields.cancel.id = %ID.id;
    %%	  
    ;


----> Assignment Statements
<assignment_statement>		-- RETURNS: stm
    = 'MAKE' <what> <something> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'MAKE'.srcp, MAKE_STATEMENT);
	%<assignment_statement>.stm->fields.make.wht = %<what>.wht;
	%<assignment_statement>.stm->fields.make.not = %<something>.not;
	%<assignment_statement>.stm->fields.make.atr = %<something>.id;
    %%

    ! 'SET' <attribute_reference> 'TO' <expression> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'SET'.srcp, SET_STATEMENT);
	%<assignment_statement>.stm->fields.set.atr = %<attribute_reference>.id;
	%<assignment_statement>.stm->fields.set.wht = %<attribute_reference>.wht;
	%<assignment_statement>.stm->fields.set.exp = %<expression>.exp;
    %%

    ! 'INCREASE' <attribute_reference> <optional_by_clause> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'INCREASE'.srcp, INCREASE_STATEMENT);
	%<assignment_statement>.stm->fields.incr.atr = %<attribute_reference>.id;
	%<assignment_statement>.stm->fields.incr.wht = %<attribute_reference>.wht;
	%<assignment_statement>.stm->fields.incr.step = %<optional_by_clause>.exp;
    %%

    ! 'DECREASE' <attribute_reference> <optional_by_clause> '.'
    %%
	%<assignment_statement>.stm = newStatement(`&%'DECREASE'.srcp, DECREASE_STATEMENT);
	%<assignment_statement>.stm->fields.incr.atr = %<attribute_reference>.id;
	%<assignment_statement>.stm->fields.incr.wht = %<attribute_reference>.wht;
	%<assignment_statement>.stm->fields.incr.step = %<optional_by_clause>.exp;
    %%
    ;

<optional_by_clause>
    =
    %%
	%<optional_by_clause>.exp = NULL;
    %%

    ! 'BY' <expression>
    %%
	%<optional_by_clause>.exp = %<expression>.exp;
    %%
    ;


----> Conditional Statements
<conditional_statement>
    = <if_statement>
    %%
	%<conditional_statement>.stm = %<if_statement>.stm;
    %%

    ! <depending_statement>
    %%
	%<conditional_statement>.stm = %<depending_statement>.stm;
    %%
    ;


<if_statement>			-- RETURNS: stm
    = 'IF' <expression> 'THEN' <statements> <optional_elsif_list> <optional_else_part> 'END' 'IF' '.'
    %%
	%<if_statement>.stm = newStatement(`&%'IF'.srcp, IF_STATEMENT);
	%<if_statement>.stm->fields.iff.exp = %<expression>.exp;
	%<if_statement>.stm->fields.iff.thn = %<statements>.stms;
	if (%<optional_elsif_list>.stms == NULL)
	    %<if_statement>.stm->fields.iff.els = %<optional_else_part>.stms;
	else {
	    /* Connect the else_part to the elsif_list */
	    (tailOf(%<optional_elsif_list>.stms))->element.stm->fields.iff.els =
			%<optional_else_part>.stms;
	    %<optional_elsif_list>.stms->next = NULL;
	    %<if_statement>.stm->fields.iff.els = %<optional_elsif_list>.stms;
	}
    %%
    ;

<optional_elsif_list>
    =
    %%
	%<optional_elsif_list>.stms = NULL;
    %%

    ! <elsif_list>
    %%
	%<optional_elsif_list>.stms = %<elsif_list>.stms;
    %%
    ;
    
<elsif_list>		-- RETURNS: stms
    = 'ELSIF' <expression> 'THEN' <statements>
    %%{
	StmNod *stm;

	stm = newStatement(`&%'ELSIF'.srcp, IF_STATEMENT);
	stm->fields.iff.exp = %<expression>.exp;
	stm->fields.iff.thn = %<statements>.stms;
	stm->fields.iff.els = NULL;

	/* Now make a list of the ELSIF */
	%<elsif_list>.stms = concat(NULL, stm, STATEMENT_LIST);
    }%%

    ! <elsif_list> 'ELSIF' <expression> 'THEN' <statements>
    %%{
	StmNod *stm;

	stm = newStatement(`&%'ELSIF'.srcp, IF_STATEMENT);
	stm->fields.iff.exp = %<expression>.exp;
	stm->fields.iff.thn = %<statements>.stms;
	stm->fields.iff.els = NULL;

	/* Now connect it to the previous ELSIFs, I.e connect the */
	/* else-part of the last element in the elsif_list to this */
	/* IF-statement and also concat this element to the list so */
	/* we'll know were the end is next time */
	(tailOf(%<elsif_list>.stms))->element.stm->fields.iff.els = concat(NULL, stm, STATEMENT_LIST);
	%<elsif_list>.stms = concat(%<elsif_list>.stms, stm, STATEMENT_LIST);
    }%%
    ;

<optional_else_part>		-- RETURNS: stms
    =
    %%
	%<optional_else_part>.stms = NULL;
    %%

    ! 'ELSE' <statements>
    %%
	%<optional_else_part>.stms = %<statements>.stms;
    %%
    ;

<depending_statement>
    = 'DEPENDING' 'ON' <primary> <depend_cases> 'END' ('DEPEND'|'DEPENDING') '.'
    %%{ StmNod *stm;
	stm = newStatement(`&%'DEPENDING'.srcp, DEPEND_STATEMENT);
	stm->fields.depend.exp = %<primary>.exp;
	stm->fields.depend.cases = %<depend_cases>.cases;

	%<depending_statement>.stm = stm;
    }%%
    ;

<depend_cases>				-- RETURNS: cases
    = <depend_case>
    %%
	%<depend_cases>.cases = concat(NULL, %<depend_case>.stm, CASE_LIST);
    %%

    ! <depend_cases> <depend_case>
    %%
	%<depend_cases>.cases = concat(%<depend_cases>.cases, %<depend_case>.stm, CASE_LIST);
    %%
    ;

<depend_case>				-- RETURNS: stm
    = <right_hand_side> ':' <statements>
    %%
        %<depend_case>.stm = newStatement(`&%':'.srcp, DEPENDCASE_STATEMENT);
        %<depend_case>.stm->fields.depcase.exp = %<right_hand_side>.exp;
        %<depend_case>.stm->fields.depcase.stms = %<statements>.stms;
    %%

    ! 'ELSE' <statements>
    %%
        %<depend_case>.stm = newStatement(`&%'ELSE'.srcp, DEPENDCASE_STATEMENT);
        %<depend_case>.stm->fields.depcase.exp = NULL;
        %<depend_case>.stm->fields.depcase.stms = %<statements>.stms;
    %%
    ;

----> Repetition statement
<repetition_statement>			-- RETURNS: stm
    = 'FOR' 'EACH' ID <optional_loop_restriction> 'DO' <statements> 'END' <for_each> ['.']
    %%
	%<repetition_statement>.stm = newStatement(`&%'FOR'.srcp, EACH_STATEMENT);
	%<repetition_statement>.stm->fields.each.stms = %<statements>.stms;
	%<repetition_statement>.stm->fields.each.loopId = %ID.id;
	%<repetition_statement>.stm->fields.each.classId = %<optional_loop_restriction>.id;
    %%
    ;

<optional_loop_restriction>		-- RETURNS: ID
    =
    %%
	%<optional_loop_restriction>.id = NULL;
    %%
    ! 'ISA' ID
    %%
	%<optional_loop_restriction>.id = %ID.id;
    %%
    ;

<for_each>
    = 'FOR'
    ! 'EACH'
    ! 'FOR' 'EACH'
    ;

----> Actor statement
<actor_statement>			-- RETURNS: stm
    = 'USE' 'SCRIPT' ID <optional_for_actor> '.'
    %%
	%<actor_statement>.stm = newStatement(`&%'USE'.srcp, USE_STATEMENT);
	%<actor_statement>.stm->fields.use.script = %ID.id;
	%<actor_statement>.stm->fields.use.actor = %<optional_for_actor>.id;
    %%

    ! 'STOP' ID '.'
    %%
	%<actor_statement>.stm = newStatement(`&%'STOP'.srcp, STOP_STATEMENT);
	%<actor_statement>.stm->fields.stop.actor = %ID.id;
    %%
    ;

<optional_for_actor>	-- RETURNS: id
    =
    %%
	%<optional_for_actor>.id = NULL;
    %%

    ! 'FOR' ID
    %%
	%<optional_for_actor>.id = %ID.id;
    %%
    ;


<special_statement>	-- RETURNS: stm
    = 'QUIT' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'QUIT'.srcp, QUIT_STATEMENT);
    %%

    ! 'LOOK' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'LOOK'.srcp, LOOK_STATEMENT);
    %%

    ! 'SAVE' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'SAVE'.srcp, SAVE_STATEMENT);
    %%

    ! 'RESTORE' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'RESTORE'.srcp, RESTORE_STATEMENT);
    %%

    ! 'RESTART' '.'
    %%
	%<special_statement>.stm = newStatement(`&%'RESTART'.srcp, RESTART_STATEMENT);
    %%

    ! 'SCORE' <optional_integer> '.'
    %%
	%<special_statement>.stm = newStatement(`&%'SCORE'.srcp, SCORE_STATEMENT);
	if (%<optional_integer>.str != NULL) {
	    %<special_statement>.stm->fields.score.score =
						val(%<optional_integer>.str);
	    %<special_statement>.stm->fields.score.count = ++scoreCount;
	} else
	    %<special_statement>.stm->fields.score.count = 0;
    %%

    ! 'VISITS' Integer '.'
    %%
	%<special_statement>.stm = newStatement(`&%'VISITS'.srcp, VISITS_STATEMENT);
	%<special_statement>.stm->fields.visits.count = val(%Integer.chars);
    %%

    ! 'SYSTEM' STRING '.'
    %%
	%<special_statement>.stm = newStatement(`&%'SYSTEM'.srcp, SYSTEM_STATEMENT);
	%<special_statement>.stm->fields.system.fpos = %STRING.fpos;
	%<special_statement>.stm->fields.system.len = %STRING.len;
    %%
    ;
	

---> EXPRESSIONS
<expression>		-- RETURNS: exp
    = <term>
    %%
	%<expression>.exp = %<term>.exp;
    %%

    ! <expression> 'OR' <term>
    %% { Expression *exp;
	exp = newexp(`&%'OR'.srcp, BINARY_EXPRESSION);
	exp->not	      = FALSE;
	exp->fields.bin.op    = OR_OPERATOR;;
	exp->fields.bin.left  = %<expression>.exp;
	exp->fields.bin.right = %<term>.exp;
	%<expression>.exp = exp;
    } %%
    ;

<term>			-- RETURNS: exp
    = <factor>
    %%
	%<term>.exp = %<factor>.exp;
    %%

    ! <term> 'AND' <factor>
    %% { Expression *exp;
	exp = newexp(`&%'AND'.srcp, BINARY_EXPRESSION);
	exp->not	      = FALSE;
	exp->fields.bin.op    = AND_OPERATOR;
	exp->fields.bin.left  = %<term>.exp;
	exp->fields.bin.right = %<factor>.exp;
	%<term>.exp = exp;
    } %%
    ;

<factor>			-- RETURNS: exp
    = <arithmetic>
    %%
	%<factor>.exp = %<arithmetic>.exp;
    %%

    ! <factor> <optional_not> <relop> <arithmetic>
    %% { Expression *exp;
	exp = newexp(`&%<relop>.srcp, BINARY_EXPRESSION);
	exp->fields.bin.left = %<factor>.exp;
	exp->not = %<optional_not>.not;
	exp->fields.bin.op = %<relop>.op;
	exp->fields.bin.right = %<arithmetic>.exp;
	%<factor>.exp = exp;
        %<factor>.expKd = BINARY_EXPRESSION;
    } %%

    ! <factor> <optional_not> <where>
    %% { Expression *exp;
	exp = newexp(`&%<where>.srcp, WHERE_EXPRESSION);
	exp->fields.whr.wht = %<factor>.exp;
	exp->not = %<optional_not>.not;
	exp->fields.whr.whr = %<where>.whr;
	%<factor>.exp = exp;
        %<factor>.expKd = WHERE_EXPRESSION;
    } %%

    ! <factor> <optional_not> 'BETWEEN' <arithmetic> 'AND' <arithmetic>
    %% { Expression *exp;
	exp = newexp(`&%'BETWEEN'.srcp, BETWEEN_EXPRESSION);
	exp->fields.btw.val = %<factor>.exp;
	exp->not = %<optional_not>.not;
	exp->fields.btw.low = %1<arithmetic>.exp;
	exp->fields.btw.high = %2<arithmetic>.exp;
	%<factor>.exp = exp;
        %<factor>.expKd = BETWEEN_EXPRESSION;
    } %%

    ! <factor> <optional_not> 'CONTAINS' <arithmetic>
    %% { Expression *exp;
	exp = newexp(`&%'CONTAINS'.srcp, BINARY_EXPRESSION);
	exp->fields.bin.left = %<factor>.exp;
	exp->not = %<optional_not>.not;
	exp->fields.bin.op = CONTAINS_OPERATOR;
	exp->fields.bin.right = %<arithmetic>.exp;
	%<factor>.exp = exp;
        %<factor>.expKd = BINARY_EXPRESSION;
    } %%
    ;


<arithmetic>
    = <primary>
    %%
	%<arithmetic>.exp = %<primary>.exp;
    %%

    ! <primary> 'ISA' ID
    %% { Expression *exp;
	exp = newexp(`&%'ISA'.srcp, ISA_EXPRESSION);
	exp->fields.isa.wht = %<primary>.exp;
	exp->not = FALSE;
	exp->fields.isa.id = %ID.id;
	%<arithmetic>.exp = exp;
        %<arithmetic>.expKd = ISA_EXPRESSION;
    } %%

    ! <primary> <is> <something>
    %% { Expression *exp;
	exp = newexp(`&%<is>.srcp, ATTRIBUTE_EXPRESSION);
	exp->fields.atr.wht = %<primary>.exp;
	exp->not = %<something>.not;
	exp->fields.atr.atr = %<something>.id;
	%<arithmetic>.exp = exp;
        %<arithmetic>.expKd = ATTRIBUTE_EXPRESSION;
    } %%

    ! <arithmetic> <binop> <primary>
    %% { Expression *exp;
	exp = newexp(`&%<binop>.srcp, BINARY_EXPRESSION);
 	exp->not = FALSE;
	exp->fields.bin.op = %<binop>.op;
	exp->fields.bin.left = %<arithmetic>.exp;
	exp->fields.bin.right = %<primary>.exp;
	%<arithmetic>.exp = exp;
        %<arithmetic>.expKd = BINARY_EXPRESSION;
    } %%

    ! <aggregate> <aggregation_filters>
    %%
	%<arithmetic>.exp = newexp(`&%<aggregate>.srcp, AGGREGATE_EXPRESSION);
	%<arithmetic>.exp->fields.agr.kind = %<aggregate>.agr;
	%<arithmetic>.exp->fields.agr.attribute = %<aggregate>.id;
	%<arithmetic>.exp->fields.agr.filters = %<aggregation_filters>.exps;
    %%
    ;


<aggregation_filters>					-- RETURNS: exps
    = <aggregation_filter>
    %%
        %<aggregation_filters>.exps = concat(NULL, %<aggregation_filter>.exp, EXPRESSION_LIST);
    %%

    ! <aggregation_filters> ',' <aggregation_filter>
    %%
        %<aggregation_filters>.exps = concat(%<aggregation_filters>.exps, %<aggregation_filter>.exp, EXPRESSION_LIST);
    %%
    ;

<aggregation_filter>				-- RETURNS: exp, expKd
    = <optional_not> <where>
    %% { Expression *exp;
	exp = newexp(`&%<where>.srcp, WHERE_EXPRESSION);
	exp->not = %<optional_not>.not;
	exp->fields.whr.whr = %<where>.whr;
	%<aggregation_filter>.exp = exp;
        %<aggregation_filter>.expKd = WHERE_EXPRESSION;
    } %%

    ! <optional_not> 'ISA' ID
    %% { Expression *exp;
	exp = newexp(`&%'ISA'.srcp, ISA_EXPRESSION);
	exp->not = %<optional_not>.not;
	exp->fields.isa.id = %ID.id;
	%<aggregation_filter>.exp = exp;
        %<aggregation_filter>.expKd = ISA_EXPRESSION;
    } %%

    ! <is> <something>
    %% { Expression *exp;
	exp = newexp(`&%<is>.srcp, ATTRIBUTE_EXPRESSION);
	exp->not = %<something>.not;
	exp->fields.atr.atr = %<something>.id;
	%<aggregation_filter>.exp = exp;
        %<aggregation_filter>.expKd = ATTRIBUTE_EXPRESSION;
    } %%
    ;

<right_hand_side>
    = <optional_not> <relop> <primary>
    %% { Expression *exp;
        %<right_hand_side>.expKd = BINARY_EXPRESSION;
	exp = newexp(`&%<relop>.srcp, BINARY_EXPRESSION);
	exp->not = %<optional_not>.not;
	exp->fields.bin.op = %<relop>.op;
	exp->fields.bin.right = %<primary>.exp;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> 'BETWEEN' <factor> 'AND' <factor>
    %% { Expression *exp;
        %<right_hand_side>.expKd = BETWEEN_EXPRESSION;
	exp = newexp(`&%'BETWEEN'.srcp, BETWEEN_EXPRESSION);
	exp->not = %<optional_not>.not;
	exp->fields.btw.low = %1<factor>.exp;
	exp->fields.btw.high = %2<factor>.exp;
	%<right_hand_side>.exp = exp;
    } %%

    ! <optional_not> 'CONTAINS' <factor>
    %% { Expression *exp;
        %<right_hand_side>.expKd = BINARY_EXPRESSION;
	exp = newexp(`&%'CONTAINS'.srcp, BINARY_EXPRESSION);
	exp->not = %<optional_not>.not;
	exp->fields.bin.op = CONTAINS_OPERATOR;
	exp->fields.bin.right = %<factor>.exp;
	%<right_hand_side>.exp = exp;
    } %%

    ! <aggregation_filter>
    ;


<primary>				-- RETURNS: exp
    = '(' <expression> ')'
    %%
	%<primary>.exp = %<expression>.exp;
    %%

    ! <optional_minus> Integer
    %%
	%<primary>.exp = newexp(`&%Integer.srcp, INTEGER_EXPRESSION);
	if (%<optional_minus>.minus)
	  %<primary>.exp->fields.val.val = -val(%Integer.chars);
	else
	  %<primary>.exp->fields.val.val = val(%Integer.chars);
    %%

    ! STRING		%+('IS', 'ARE', 'HAS', 'AT', 'HERE', 'IN', 'NEARBY')
    %%
	%<primary>.exp = newexp(&%STRING.srcp, STRING_EXPRESSION);
	%<primary>.exp->fields.str.fpos = %STRING.fpos;
	%<primary>.exp->fields.str.len = %STRING.len;
    %%

    ! <what>
    %%
	%<primary>.exp = newexp(`&%<what>.srcp, WHAT_EXPRESSION);
	%<primary>.exp->fields.wht.wht = %<what>.wht;
    %%

    ! <attribute_reference>
    %%
	%<primary>.exp = newexp(`&%<attribute_reference>.srcp, ATTRIBUTE_EXPRESSION);
	%<primary>.exp->fields.atr.atr = %<attribute_reference>.id;
	%<primary>.exp->fields.atr.wht = newexp(`&%<attribute_reference>.srcp, WHAT_EXPRESSION);
	%<primary>.exp->fields.atr.wht->fields.wht.wht = %<attribute_reference>.wht;
    %%

    ! 'RANDOM' <primary> 'TO' <primary>
    %%
	%<primary>.exp = newexp(`&%'RANDOM'.srcp, RANDOM_EXPRESSION);
	%<primary>.exp->fields.rnd.from	= %2<primary>.exp;
	%<primary>.exp->fields.rnd.to	= %3<primary>.exp;
    %%

    ! 'SCORE'
    %%
	%<primary>.exp = newexp(`&%'SCORE'.srcp, SCORE_EXPRESSION);
    %%
    ;


<aggregate>			-- RETURNS: srcp, agr, id
    = <aggregator> 'OF' ID
    %%
	%<aggregate>.srcp = %<aggregator>.srcp;
	%<aggregate>.agr = %<aggregator>.agr;
	%<aggregate>.id = %ID.id;
    %%

    ! 'COUNT'
    %%
	%<aggregate>.srcp = %'COUNT'.srcp;
	%<aggregate>.agr = COUNT_AGGREGATE;
	%<aggregate>.id = NULL;
    %%
    ;

<aggregator>
    = 'MAX'
    %%
	%<aggregator>.srcp = %'MAX'.srcp;
	%<aggregator>.agr = MAX_AGGREGATE;
    %%

    ! 'MIN'
    %%
	%<aggregator>.srcp = %'MIN'.srcp;
	%<aggregator>.agr = MIN_AGGREGATE;
    %%

    ! 'SUM'
    %%
	%<aggregator>.srcp = %'SUM'.srcp;
	%<aggregator>.agr = SUM_AGGREGATE;
    %%
    ;

---> MISCELLANEOUS
<something>		-- RETURNS: not, id
    = <optional_not> ID
    %%
	%<something>.not = %<optional_not>.not;
	%<something>.id = %ID.id;
    %%
    ;

<what>			-- RETURNS: srcp, wht
    = ID
    %%
	%<what>.wht = newWhat(`&%ID.id->srcp, WHAT_ID, %ID.id);
	%<what>.srcp = %ID.id->srcp;
    %%

    ! 'CURRENT' 'ACTOR'
    %%
	%<what>.wht = newWhat(`&%'CURRENT'.srcp, WHAT_ACTOR, NULL);
	%<what>.srcp = %'CURRENT'.srcp;
    %%

    ! 'CURRENT' 'LOCATION'
    %%
	%<what>.wht = newWhat(`&%'CURRENT'.srcp, WHAT_LOCATION, NULL);
	%<what>.srcp = %'CURRENT'.srcp;
    %%

    ! 'THIS'
    %%
	%<what>.wht = newWhat(`&%'THIS'.srcp, WHAT_THIS, NULL);
	%<what>.srcp = %'THIS'.srcp;
    %%
    ;


<optional_where>		-- RETURNS: whr
    =
    %%
        %<optional_where>.whr = newwhr(`&nulsrcp, WHR_DEFAULT, NULL);
    %%
    
    ! <where>
    %%
        %<optional_where>.whr = %<where>.whr;
    %%
    ;

<where>			-- RETURNS: srcp, whr
    = 'HERE'
    %%
        %<where>.whr = newwhr(`&%'HERE'.srcp, WHR_HERE, NULL);
	%<where>.srcp = %'HERE'.srcp;
    %%

    ! 'NEARBY'
    %%
        %<where>.whr = newwhr(`&%'NEARBY'.srcp, WHR_NEAR, NULL);
	%<where>.srcp = %'NEARBY'.srcp;
    %%

    ! 'AT' <what>
    %%
        %<where>.whr = newwhr(`&%'AT'.srcp, WHERE_AT, %<what>.wht);
	%<where>.srcp = %'AT'.srcp;
    %%

    ! 'IN' <what>
    %%
        %<where>.whr = newwhr(`&%'IN'.srcp, WHR_IN, %<what>.wht);
	%<where>.srcp = %'IN'.srcp;
    %%
    ;

<binop>			-- RETURNS: op, srcp
    = '+'
    %%
	%<binop>.op = PLUS_OPERATOR;
	%<binop>.srcp = %'+'.srcp;
    %%

    ! '-'
    %%
	%<binop>.op = MINUS_OPERATOR;
	%<binop>.srcp = %'-'.srcp;
    %%

    ! '*'
    %%
	%<binop>.op = MULT_OPERATOR;
	%<binop>.srcp = %'*'.srcp;
    %%

    ! '/'
    %%
	%<binop>.op = DIV_OPERATOR;
	%<binop>.srcp = %'/'.srcp;
    %%
    ;


<relop>			-- RETURNS: op, srcp
    = '<>'
    %%
        %<relop>.op   = NE_OPERATOR;
	%<relop>.srcp = %'<>'.srcp;
    %%

    ! '='
    %%
        %<relop>.op   = EQ_OPERATOR;
	%<relop>.srcp = %'='.srcp;
    %%

    ! '=='
    %%
        %<relop>.op   = EXACT_OPERATOR;
	%<relop>.srcp = %'=='.srcp;
    %%

    ! '>='
    %%
        %<relop>.op   = GE_OPERATOR;
	%<relop>.srcp = %'>='.srcp;
    %%

    ! '<='
    %%
        %<relop>.op   = LE_OPERATOR;
	%<relop>.srcp = %'<='.srcp;
    %%

    ! '>'
    %%
        %<relop>.op   = GT_OPERATOR;
	%<relop>.srcp = %'>'.srcp;
    %%

    ! '<'
    %%
        %<relop>.op   = LT_OPERATOR;
	%<relop>.srcp = %'<'.srcp;
    %%
    ;



<optional_qual>		-- RETURNS: qual, srcp
    =
    %%
        %<optional_qual>.qual = QUAL_DEFAULT;
    %%

    ! 'BEFORE'
    %%
        %<optional_qual>.qual = QUAL_BEFORE;
        %<optional_qual>.srcp = %'BEFORE'.srcp;
    %%

    ! 'AFTER'
    %%
        %<optional_qual>.qual = QUAL_AFTER;
        %<optional_qual>.srcp = %'AFTER'.srcp;
    %%

    ! 'ONLY'
    %%
        %<optional_qual>.qual = QUAL_ONLY;
        %<optional_qual>.srcp = %'ONLY'.srcp;
    %%
    ;


<optional_not>
    =
    %%
        %<optional_not>.not = FALSE;
    %%

    ! 'NOT'
    %%
        %<optional_not>.not = TRUE;
    %%
    ;

<optional_id>
    =
    %%
        %<optional_id>.id = NULL;
    %%

    ! ID
    %%
        %<optional_id>.id = %ID.id;
    %%
    ;

<ids>			-- RETURNS: idList
    = ID
    %%
        %<ids>.idList = concat(NULL, %ID.id, ID_LIST);
    %%

    ! <ids> ID
    %%
        %<ids>.idList = concat(%<ids>.idList, %ID.id, ID_LIST);
    %%
    ;

<id_list>			-- RETURNS: str, idList
    = ID
    %%
        %<id_list>.str = newString(%ID.id->string);
        %<id_list>.idList = concat(NULL, %ID.id, ID_LIST);
    %%

    ! <id_list> ',' ID
    %%
        %<id_list>.str = %<id_list>.str;
        %<id_list>.idList = concat(%<id_list>.idList, %ID.id, ID_LIST);
    %%
    ;

<optional_integer>	-- RETURNS: str
    =
    %%
        %<optional_integer>.str = NULL;
    %%

    ! Integer
    %%
        %<optional_integer>.str = newString(%Integer.chars);
    %%
    ;

<optional_minus>			-- RETURNS: minus
    =
    %%
	%<optional_minus>.minus = FALSE;
    %%

    ! '-'
    %%
	%<optional_minus>.minus = TRUE;
    %%
    ;

<attribute_reference>		-- RETURNS: srcp, wht, id
    = ID 'OF' <what>
    %%
	%<attribute_reference>.srcp = %'OF'.srcp;
	%<attribute_reference>.id = %ID.id;
	%<attribute_reference>.wht = %<what>.wht;
    %%
    ;

ID
    = Identifier
    %%
	%ID.id = newId(`&%Identifier.srcp, %Identifier.chars);
    %%

    ! 'LOCATION'
    %%
	%ID.id = newId(`&%'LOCATION'.srcp, "location");
    %%

    ! 'ACTOR'
    %%
	%ID.id = newId(`&%'ACTOR'.srcp, "actor");
    %%

    ! 'OPAQUE'
    %%
	%ID.id = newId(`&%'OPAQUE'.srcp, "opaque");
    %%

    ! 'ON'
    %%
	%ID.id = newId(`&%'ON'.srcp, "on");
    %%

    ! 'OF'
    %%
	%ID.id = newId(`&%'OF'.srcp, "of");
    %%

-- Possibly we could add further keywords here. But let's not at this point
    ;


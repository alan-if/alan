#include <cgreen/mocks.h>

#include "exp_x.h"

#include "util.h"


/* DATA: */


/* FUNCTIONS: */

Expression *newAttributeExpression(Srcp srcp, Id *attributeId,
                                   bool not, Expression *ofWhat) {
    Expression *expression = (Expression*)NEW(Expression);
    expression->kind = ATTRIBUTE_EXPRESSION;
    expression->srcp = srcp;
    expression->fields.atr.id = attributeId;
    expression->fields.atr.wht = ofWhat;
    expression->not = not;
    return expression;
}

Expression *newIsaExpression(Srcp srcp, Expression *what, bool not,
                             Id *class) {
    Expression *exp = NEW(Expression);
    exp->srcp = srcp;
    exp->kind = ISA_EXPRESSION;
    exp->fields.isa.what = what;
    exp->fields.isa.class = class;
    exp->not = not;
    return exp;
}

Expression *newWhatExpression(Srcp srcp, What *what) {
    Expression *exp = NEW(Expression);
    exp->kind = WHAT_EXPRESSION;
    exp->srcp = srcp;
    exp->fields.wht.wht = what;
    return exp;
}

Expression *newBinaryExpression(Srcp srcp, Expression *left, bool not,
                                OperatorKind operator,
                                Expression *right) {
    return (Expression*)mock(&srcp, left, not, operator, right);
}
Expression *newBetweenExpression(Srcp srcp, Expression *exp, bool not,
                                 Expression *low, Expression *high) {
    return (Expression*)mock(&srcp, exp, not, low, high);
}
Expression *newStringExpression(Srcp srcp, long fpos, int len) {
    return (Expression*)mock(&srcp, fpos, len);
}
Expression *newSetExpression(Srcp srcp, List *set) {
    return (Expression*)mock(&srcp, set);
}
Expression *newScoreExpression(Srcp srcp) {
    return (Expression*)mock(&srcp);
}
Expression *newIntegerExpression(Srcp srcp, int value) {
    return (Expression*)mock(&srcp, value);
}

Expression *newWhereExpression(Srcp srcp, Expression *what, bool not, Where *where) {
    return (Expression*)mock(&srcp, what, not, where);
}
Expression *newAggregateExpression(Srcp srcp, AggregateKind kind,
                                   Id *attribute, List *filters) {
    return (Expression*)mock(&srcp, kind, attribute, filters);
}
Expression *newRandomRangeExpression(Srcp srcp, Expression *from,
                                     Expression *to) {
    return (Expression*)mock(&srcp, from, to);
}
Expression *newRandomInExpression(Srcp srcp, Expression *what, Transitivity transitivity) {
    return (Expression*)mock(&srcp, what, transitivity);
}

void symbolizeExpression(Expression *exp) {
    mock(exp);
}
void analyzeExpression(Expression *exp, Context *context) {
    mock(exp, context);
}
bool analyzeFilterExpressions(char *message, List *filters,
                              Context *context, Symbol **foundClass) {
    return (bool)mock(message, filters, context, foundClass);
}
bool isConstantIdentifier(Id *id) {
    return (bool)mock(id);
}
bool isConstantExpression(Expression *exp) {
    return (bool)mock(exp);
}
Symbol *containerContent(Expression *what, Transitivity transitivity, Context *context) {
    return (Symbol*)mock(what, transitivity, context);
}
bool verifyContainerExpression(Expression *what, Context *context,
                               char referer[]) {
    return (bool)mock(what, context, referer);
}
Symbol *symbolOfExpression(Expression *exp, Context *context) {
    return (Symbol*)mock(exp, context);
}
void generateExpression(Expression *exp) {
    mock(exp);
}
void generateFilter(Expression *exp) {
    mock(exp);
}
void generateBinaryOperator(Expression *exp) {
    mock(exp);
}
void generateLvalue(Expression *exp) {
    mock(exp);
}
void generateAttributeReference(Expression *exp) {
    mock(exp);
}
void generateAttributeAccess(Expression *exp) {
    mock(exp);
}
void generateBetweenCheck(Expression *exp) {
    mock(exp);
}
void dumpExpression(Expression *exp) {
    mock(exp);
}

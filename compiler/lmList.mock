#include <cgreen/mocks.h>

#include "alanCommon.h"

#include "lmList.h"


/* UNINITIALISED: */
/* Initialise the lmLister System */
void lmLiInit(char header[],
              char src[],
              lmMessages msect) {mock(header, src, msect);}

/* COLLECTING: */
/* Log a message at a source position */
void lmLog(Srcp *pos,
           int ecode,
           lmSev sev,
           char *istrs) { printf("LMLOG ***************** Error: %d %s\n", ecode, istrs);}

/* Log a message at a source position using va_arg handling */
void lmLogv(Srcp *pos,
            int ecode,
            lmSev sev,
            ...) {lmLog(pos, ecode, sev, "lmLogv");}

/* Turn listing completely off after a particular source position */
void lmLiOff(Srcp *pos) {mock(pos);}

/* Turn listing on again at a particular source position */
void lmLiOn(Srcp *pos) {mock(pos);}

/* Start reading an included file at a particular source position */
void lmLiEnter(Srcp *pos,
               Srcp *start,
               char fnm[]) {mock(pos, start, fnm);}

/* Stop reading from an included file prematurely */
void lmLiExit(Srcp *pos) {mock(pos);}

/* (Un)conditionally skip to a new page at a source position */
void lmLiPage(Srcp *pos,
              int lins) {mock(pos, lins);}

/* Read worst severity logged so far */
lmSev lmSeverity(void) {return (lmSev)mock();}
lmSev lmLocSeverity(void) {return (lmSev)mock();}
void lmResLocSeverity(void) {}

/* RETRIEVING: */
/* Create a listing of a selected type in a file or the screen */
void lmList(char ofnm[],
            int lins,
            int cols,
            lmTyp typ,
            lmSev sevs) {mock(ofnm, lins, cols, typ, sevs);}

/* Return the i'th formatted message, return 0 if not found */
int lmMsg(int i,
          Srcp *pos,
          char *msg) {return (int)mock(i, pos);}

/* Print a string on a line in the output file */
void lmLiPrint(char str[]) {puts(str);}

/* (Un)conditionally skip to a new page in the output file */
void lmSkipLines(int lins) {mock(lins);}

/* Terminate the lmLister system */
void lmLiTerminate(void) {}

#######################################################################
include ../mk/include_guard.mk
#
# Common rules for building Alan Interpreters

include ../mk/venum.mk

ifneq ($(INSIDE_EMACS),)
JREGROUTPUT = -noansi
endif

# Jenkins sets BUILD_NUMBER so use that if available
ifneq ($(BUILD_NUMBER),)
  BUILDNUMBER = $(BUILD_NUMBER)
  BUILDVERSION = -$(BUILDNUMBER)
  CFLAGS_BUILD = -DBUILD=$(BUILDNUMBER)
endif

# NOTE: for unittests -DUNITTESTING is automatically added
# so you can override system functions and other hacks
CFLAGS += -g -Og -Wall -MMD -funsigned-char $(CFLAGS_BUILD) $(COVERAGE)
LDFLAGS += $(COVERAGE)

COMPILE = $(CC) $(CFLAGS)
LINK = $(CC) $(LDFLAGS)


#######################################################################
#
# arun: Arun command line interpreter - native or cross
#
ARUN_OBJDIR = .arun
OBJDIRS += $(ARUN_OBJDIR)

ARUN_OBJECTS = $(addprefix $(ARUN_OBJDIR)/,${ARUNSRCS:.c=.o}) $(ARUN_OBJDIR)/alan.version.o

# Dependencies
-include $(ARUN_OBJECTS:.o=.d)

# Rule to compile objects to subdirectory
$(ARUN_OBJECTS): $(ARUN_OBJDIR)/%.o: %.c
	$(COMPILE) -o $@ -c $<

arun$(EXEEXT): $(ARUN_OBJECTS)
	$(LINK) $(LDFLAGS) -o $@$(EXEEXT) $(ARUN_OBJECTS) $(LDLIBS)
	cp -f $@$(EXEEXT) ../bin/


#######################################################################
#
# glkarun: Build glkterm based arun => glkarun
#
ifdef GLKARUN_ENABLED
EXTRA_TARGETS += glkarun
else
$(info NOT ENABLED: glkarun - Arun with curses text Glk)
endif

# From https://eblong.com/zarf/glk/ download GlkTerm with "wide"
# (=UTF-8) support.  Build it as instructed in the package to ensure
# UTF-8 support to get `glktermw` which uses ncursesw which supports
# UTF-8. (You *can* also use the non-wide glkterm...)
#
# Set GLKTERM_ROOT to point to the root of glkterm directory as a MAKE
# command option `make glkarun GLKTERM_ROOT=...` or in the
# Makefile.local (copy it from Makefile.local.template)
GLKTERM_DEFS = -DHAVE_GLK
GLKTERM_INCLUDE ?= -I$(GLKTERM_ROOT)
GLKTERM_LIBDIR ?= $(GLKTERM_ROOT)
#GLKTERM_LIB ?= -L$(GLKTERM_LIBDIR) -lglkterm
GLKTERM_LIB ?= -L$(GLKTERM_LIBDIR) -lglktermw

glkarun: CFLAGS += $(GLKTERM_INCLUDE) $(GLKTERM_DEFS)
glkarun: LDLIBS += $(GLKTERM_LIB) $(CURSESLIB)

GLKARUN_OBJDIR = .glkarun
OBJDIRS += $(GLKARUN_OBJDIR)

GLKARUN_OBJECTS = $(addprefix $(GLKARUN_OBJDIR)/,${GLKARUNSRCS:.c=.o}) $(GLKARUN_OBJDIR)/alan.version.o

-include $(GLKARUN_OBJECTS:.o=.d)

$(GLKARUN_OBJECTS): $(GLKARUN_OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

glkarun: $(GLKARUN_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(GLKARUN_OBJECTS) $(LDLIBS)
	cp -f $@ ../bin/


#######################################################################
#
# cross: a way to cross-build for Windows
#
# Add any other Windows-targets to EXTRA_CROSS_TARGETS and they will
# be built too.
#
# TODO: we should remember that we just built cross so remove all
# objects on next non-cross build...
#
cross: cross-clean
	$(MAKE) cross-build
# Need to have them on a separate target to override current ones
cross-build: CC=x86_64-w64-mingw32-gcc
cross-build: CFLAGS += -I(WINICONV_ROOT)
cross-build: LDLIBS= -L$(WINICONV_ROOT) -liconv
cross-build: EXEEXT=.exe
cross-build: build $(EXTRA_CROSS_TARGETS)

# We need to remove all *.o for the targets that may be cross built
# but are not by default
.PHONY: cross-clean
cross-clean:
	-rm -f $(ARUN_OBJDIR)/*.o arun


#######################################################################
#
# unit: Unit testing
#
# CGreen unit tests of two types:
#	- one library for all tests (*Tests.c) linked with every module that is needed
#	- one library per module (*_tests.c) with every thing needed mocked away
#
# Having both these types is just a intermediate state as all
# "linked_unittests" are being transformed into "isolated_unittests"

# Define UNITTESTING so modules can mock system function calls and other tricks
unit: CFLAGS += -DUNITTESTING

.PHONY: unit
ifeq ($(CGREEN),)
unit:
	@echo "No unit tests run, Cgreen not available"
else
unit: linked_unittests isolated_unittests

unit-coverage: COVERAGE=--coverage
unit-coverage: unit
	$(MAKE)	cov-data
endif

UNITTESTS_OBJDIR = .unittests
OBJDIRS += $(UNITTESTS_OBJDIR)

CGREENLINKLIB ?= -lcgreen

# Here's a little tricky, we need to use different readline.o for
# linked and isolated unittests because we need the isolated one to
# not call the real 'read()', so we replace the references in the
# linked unittests with the mocked version symlinked to
# readline.mock.c (we only need the references, noone is calling it)
LINKED_UNITTESTS_WITH_MOCKED_READLINE_SRCS = ${subst readline,readline.mock,$(LINKED_UNITTESTS_SRCS)}

LINKED_UNITTESTS_OBJECTS = $(addprefix $(UNITTESTS_OBJDIR)/,${LINKED_UNITTESTS_WITH_MOCKED_READLINE_SRCS:.c=.o}) $(UNITTESTS_OBJDIR)/alan.version.o

# Dependencies, if they don't exist yet
-include $(LINKED_UNITTESTS_OBJECTS:.o=.d)

# Rule to compile objects to subdirectory
$(UNITTESTS_OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<
$(UNITTESTS_OBJDIR)/%_tests.o: %_tests.c
	$(CC) $(CFLAGS) -o $@ -c $<

# Build one library with all linked tests...
unittests.$(SOEXTENSION): $(LINKED_UNITTESTS_OBJECTS)
	$(LINK) -shared -o $@ $(LINKED_UNITTESTS_OBJECTS) $(CGREENLINKLIB) $(LDLIBS)

# ... that can be run with the cgreen runner
linked_unittests: unittests.$(SOEXTENSION)
	cgreen-runner ./$^ --suite interpreter_unit_tests $(UNITOUTPUT)

#####################################################################
# Build isolated unittests in shared libs for each module where it can
# be tested in total isolation (with everything else mocked away,
# except some extra objects) using Cgreen

ISOLATED_UNITTESTS_EXTRA_MODULES = memory options lists sysdep set

isolated_unittests: SUITE = Interpreter

include ../mk/isolated_unittests.mk

#######################################################################
.PHONY: clean
clean:
	-rm -rf $(OBJDIRS) arun arun.exe glkarun alan3.exe winarun.exe MacArun*.zip gargoyle*.tgz gargoyle*.pkg ../bin/dumpacd$(EXEEXT) ../bin/glkarun$(EXEEXT) arun.res unittests.{so,dll,dylib}


##################################################################
.PHONY: coverage
coverage:
	$(MAKE) COVERAGE=--coverage unit
	$(MAKE) COVERAGE=--coverage arun
	$(MAKE) test
	$(MAKE) coverage-report

coverage-report: cov-data
	genhtml -q -o coverage-report coverage.info

cov-data:
	lcov -q -c -d . --exclude /usr/\* -o coverage.info
	@# Re-create separate gcov files from total.info for Emacs cov-mode
	@# with coverage in the fringe area and auto-update. Nice!
	@# See https://github.com/AdamNiederer/cov
	if command -v info2gcov > /dev/null 2>&1 ; then \
		info2gcov -q coverage.info ; \
	fi


###################################################################
#
# test: Run all tests!
#
# The interpreter is tested through the regression tests
#
UNITOUTPUT ?= -c

.PHONY: test
test:
	../bin/jregr -bin ../bin -dir ../regression $(JREGROUTPUT)
	../bin/jregr -bin ../bin -dir ../regression/versions/interpreter $(JREGROUTPUT)


#######################################################################
#
# dumpacd:
#
# Dump Acode file into text format
#
-include .dumpacd/*.d

DUMPACD_SRCS = dumpacd.c reverse.c lists.c sysdep.c compatibility.c types.c alan.version.o

DUMPACD_OBJDIR = .dumpacd
OBJDIRS += $(DUMPACDOBJDOR)

DUMPACDOBJECTS = $(addprefix $(DUMPACD_OBJDIR)/,${DUMPACD_SRCS:.c=.o}) $(DUMPACD_OBJDIR)/spa.o

$(DUMPACD_OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

$(DUMPACD_OBJDIR)/spa.o: ../compiler/spa.c
	$(CC) $(CFLAGS) -o $@ -c $<

dumpacd: $(DUMPACD_OBJDIR) $(DUMPACDOBJECTS)
	$(CC) $(LDFLAGS) -o dumpacd -ggdb $(DUMPACDOBJECTS)
	cp $@ ../bin/

#######################################################################
# GIT VERSION marking, only for modules that need them
GIT_VERSION := "$(shell git describe --abbrev=4 --dirty --always --tags)"
.arun/glkstart.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.arun/utils.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.winarun/glkstart.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.winarun/utils.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.gararun/glkstart.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.gararun/utils.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.glkarun/glkstart.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
.glkarun/utils.o: CFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"


# Create all objdirs if necessary (at parse time)
$(info $(shell mkdir -p $(OBJDIRS)))

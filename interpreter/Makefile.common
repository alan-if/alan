#######################################################################
include ../mk/include_guard.mk
#
# Common rules for building Alan Interpreters

include ../mk/venum.mk

ifneq ($(EMACS),)
JREGROUTPUT = -noansi
endif

ifneq ($(BUILDNUMBER),)
  # For snapshots we use buildnumber for version info in app and in filenames
  BUILDVERSION = -$(BUILDNUMBER)
  CFLAGS_BUILD = -DBUILD=$(BUILDNUMBER)
endif

# NOTE: for unittests -DUNITTESTING is automatically added
# so you can override system functions
CFLAGS += -g -Og -Wall -MMD -funsigned-char $(CFLAGS_BUILD) $(COVERAGE)
LDFLAGS += $(COVERAGE)

COMPILE = $(CC) $(CFLAGS)
LINK = $(CC) $(LDFLAGS)

#######################################################################
#
# arun: Arun command line interpreter - native or cross
#
ARUNOBJDIR = .arun
ARUNOBJECTS = $(addprefix $(ARUNOBJDIR)/,${ARUNSRCS:.c=.o}) $(ARUNOBJDIR)/alan.version.o

# Dependencies
-include $(ARUNOBJECTS:.o=.d)

# Rule to compile objects to subdirectory
$(ARUNOBJECTS): $(ARUNOBJDIR)/%.o: %.c
	$(COMPILE) -o $@ -c $<

$(ARUNOBJECTS): | $(ARUNOBJDIR)
$(ARUNOBJDIR):
	mkdir $(ARUNOBJDIR)

arun: $(ARUNOBJDIR) $(ARUNOBJECTS)
	$(LINK) $(LDFLAGS) -o $@$(EXEEXT) $(ARUNOBJECTS) $(LDLIBS)
	cp -f $@$(EXEEXT) ../bin/


#######################################################################
#
# glkarun: Build glkterm based arun => glkarun
#
ifdef GLKARUN_ENABLED
EXTRA_TARGETS += glkarun
else
$(info NOT ENABLED: glkarun - Arun with curses text Glk)
endif

# From https://eblong.com/zarf/glk/ download GlkTerm with "wide"
# (=UTF-8) support.  Build it as instructed in the package to ensure
# UTF-8 support to get `glktermw` which uses ncursesw which supports
# UTF-8. (You *can* also use the non-wide glkterm...)
#
# Set GLKTERM_ROOT to point to the root of glkterm directory as a MAKE
# command option `make glkarun GLKTERM_ROOT=...` or in the
# Makefile.local (copy it from Makefile.local.template)
GLKTERM_DEFS = -DHAVE_GLK
GLKTERM_INCLUDE ?= -I$(GLKTERM_ROOT)
GLKTERM_LIBDIR ?= $(GLKTERM_ROOT)
#GLKTERM_LIB ?= -L$(GLKTERM_LIBDIR) -lglkterm
GLKTERM_LIB ?= -L$(GLKTERM_LIBDIR) -lglktermw

glkarun: CFLAGS += $(GLKTERM_INCLUDE) $(GLKTERM_DEFS)
glkarun: LDLIBS += $(GLKTERM_LIB) $(CURSESLIB)

GLKARUNOBJDIR = .glkarun
GLKARUNOBJECTS = $(addprefix $(GLKARUNOBJDIR)/,${GLKARUNSRCS:.c=.o}) $(GLKARUNOBJDIR)/alan.version.o
-include $(GLKARUNOBJECTS:.o=.d)
$(GLKARUNOBJECTS): $(GLKARUNOBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

$(GLKARUNOBJDIR):
	mkdir $(GLKARUNOBJDIR)

glkarun: $(GLKARUNOBJDIR) $(GLKARUNOBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(GLKARUNOBJECTS) $(LDLIBS)
	cp -f $@ ../bin/


#######################################################################
#
# cross: a way to cross-build for Windows
#
# Add any other Windows-targets to EXTRA_CROSS_TARGETS and they will
# be built too.
#
# TODO: we should remember that we just built cross so remove all
# objects on next non-cross build...
#
cross: cross-clean
	$(MAKE) cross-build
# Need to have them on a separate target to override current ones
cross-build: CC=i686-w64-mingw32-gcc
cross-build: LDLIBS += -l:libiconv.a
cross-build: EXEEXT=.exe
cross-build: build $(EXTRA_CROSS_TARGETS)

# We need to remove all *.o for the targets that may be cross built
# but are not by default
.PHONY: cross-clean
cross-clean:
	-rm -f $(ARUNOBJDIR)/*.o


#######################################################################
#
# unit: Unit testing
#
# CGreen unit tests of two types:
#	- one library for all tests (*Tests.c) linked with every module that is needed
#	- one library per module (*_tests.c) with every thing needed mocked away
#
# Having both these types is just a intermediate state as all
# "linked_unittests" are being transformed into "isolated_unittests"
.PHONY: unit
ifneq ($(CGREEN),yes)
unit:
	@echo "No unit tests run, Cgreen not available"
else
unit: linked_unittests isolated_unittests

# Define UNITTESTING so modules can define system function calls with Cgreen mocks
unit: CFLAGS += -DUNITTESTING
endif

UNITTESTS_OBJDIR = .unittests

CGREENLINKLIB ?= -lcgreen

LINKED_UNITTESTS_WITH_MOCKED_READLINE_SRCS = ${subst readline,readline.mock,$(LINKED_UNITTESTS_SRCS)}
LINKED_UNITTESTS_OBJECTS = $(addprefix $(UNITTESTS_OBJDIR)/,${LINKED_UNITTESTS_WITH_MOCKED_READLINE_SRCS:.c=.o}) $(UNITTESTS_OBJDIR)/alan.version.o

# Dependencies, if they don't exist yet
-include $(LINKED_UNITTESTS_OBJECTS:.o=.d)

# Rule to compile objects to subdirectory
$(UNITTESTS_OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<
$(UNITTESTS_OBJDIR)/%_tests.o: %_tests.c
	$(CC) $(CFLAGS) -o $@ -c $<

$(UNITTESTSOBJECTS): | $(UNITTESTS_OBJDIR)

# Build one DLL with all runner tests...
unittests.$(SOEXTENSION): $(UNITTESTS_OBJDIR) $(LINKED_UNITTESTS_OBJECTS) sources.mk
	$(LINK) -shared -o $@ $(LINKED_UNITTESTS_OBJECTS) $(CGREENLINKLIB) $(LDLIBS)

# ... that can be run with the cgreen runner
linked_unittests: unittests.$(SOEXTENSION)
	cgreen-runner ./$^ --suite interpreter_unit_tests $(UNITOUTPUT)

#####################################################################
# Build isolated unittests in shared libs for each module where it can
# be tested in total isolation (with everything else mocked away,
# except some extra objects) using Cgreen

ISOLATED_UNITTESTS_EXTRA_MODULES = memory options lists sysdep set

isolated_unittests: SUITE = Interpreter

include ../mk/isolated_unittests.mk

#######################################################################
.PHONY: clean
clean:
	-rm -rf $(UNITTESTS_OBJDIR) $(ARUNOBJDIR) $(WINARUNOBJDIR) $(GLKARUNOBJDIR) arun arun.exe glkarun winarun.exe MacArun*.zip gargoyle*.tgz gargoyle*.pkg ../bin/arun ../bin/arun.exe ../bin/winarun.exe ../bin/dumpacd$(EXEEXT) ../bin/glkarun$(EXEEXT) arun.res *.so


##################################################################
.PHONY: coverage
coverage:
	$(MAKE) clean
	$(MAKE) COVERAGE=--coverage unit
	$(MAKE) COVERAGE=--coverage arun
	$(MAKE) test
	$(MAKE) coverage-report

coverage-report:
	lcov -q -c -d . --exclude /usr/\* -o coverage.info
	@# Re-create separate gcov files from total.info for Emacs cov-mode
	@# with coverage in the fringe area and auto-update. Nice!
	@# See https://github.com/AdamNiederer/cov
	if command -v info2gcov > /dev/null 2>&1 ; then \
		info2gcov -q coverage.info ; \
	fi
	genhtml -q -o coverage-report coverage.info



###################################################################
#
# test: Run all tests!
#
# The interpreter is tested through the regression tests
#
UNITOUTPUT ?= -c

.PHONY: test
test:
	../bin/jregr -bin ../bin -dir ../regression $(JREGROUTPUT)
	../bin/jregr -bin ../bin -dir ../regression/versions/interpreter $(JREGROUTPUT)


#######################################################################
#
# dumpacd:
#
# Dump Acode file into text format
#
-include .dumpacd/*.d

DUMPACDSRCS = dumpacd.c reverse.c lists.c sysdep.c compatibility.c types.c alan.version.o

DUMPACDOBJDIR = .dumpacd
$(DUMPACDOBJDIR):
	mkdir $(DUMPACDOBJDIR)

DUMPACDOBJECTS = $(addprefix $(DUMPACDOBJDIR)/,${DUMPACDSRCS:.c=.o}) $(DUMPACDOBJDIR)/spa.o
$(DUMPACDOBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

$(DUMPACDOBJDIR)/spa.o: ../compiler/spa.c
	$(CC) $(CFLAGS) -o $@ -c $<

dumpacd: $(DUMPACDOBJDIR) $(DUMPACDOBJECTS)
	$(CC) $(LDFLAGS) -o dumpacd -ggdb $(DUMPACDOBJECTS)
	cp $@ ../bin/

# Extra dependencies for WinGLK case, really needed? How to make them work in subdirs?
readline.o : resources.h
glkstart.o: glkstart.c args.h types.h sysdep.h acode.h main.h \
  glkstart.h glkio.h resources.h utils.h
glkio.o: glkio.c glkio.h

#######################################################################
#
# Check to see if we are running on ThoNi's machine, if so include
# special rules
ifeq ($(shell uname -n), thoni64)
	include Makefile.thoni
endif

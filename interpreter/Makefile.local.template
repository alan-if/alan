######################################################################
include ../mk/include_guard.mk
#
# Local settings Makefile for building various versions of
# Alan interpreter arun
#
# Copy this file to Makefile.local and enable extra targets that depend
# on third party libraries by uncommenting and adjusting below

# Enable WinArun:
#WINARUN_ENABLED = true
#
# You need a compiled and linkable version of the WindowsGLK library
# which you can get at https://github.com/DavidKinder/Windows-Glk
# or as a binary at
#     http://www.ifarchive.org/indexes/if-archiveXprogrammingXglkXimplementations.html
#
# Point the linker to the Windows GLK library
WINGLK_ROOT = ../../WindowsGlk-150
#
# If required you can set particular compiler and linker for an extra target
# like so (most likely we need to cross compile...):
# On Msys Mingw-variants you should just use gcc/windres
winarun: CC = i686-w64-mingw32-gcc
winarun: WINDRES = i686-w64-mingw32-windres
# And/or extra switches and flags:
winarun: CFLAGS += -mwindows
winarun: LDFLAGS += -mwindows
#

# Enable glkarun:
#GLKARUN_ENABLED = true
#GLKTERM_ROOT = ../../glktermw
# Requires curses and a glkterm library
CURSESLIB = -lncursesw
GLKTERM_LIB = $(GLKTERM_ROOT)/libglktermw.a

# Enable Gargoyle Arun:
#GARARUN_ENABLED = true
#
# This requires Gargoyle sources and needs to be built in the Gargoyle
# source directory using the build system Jam, which needs to be
# available too.  Gargoyle includes a version of Arun, built to a
# binary called 'alan3'. To build that using the current sources,
# remove the subdirectory terps/alan3 and create a link from there to
# this directory. Then 'make gararun' here will build it, if enabled.
GARGOYLE_ROOT = ../../garglk-current-alan3

# Enable MacArun
#MACARUN_ENABLED = true

# We might need to locate -lcgreen
cgreenrunnertests isolated_unittests: LDLIBS += -L/usr/local/lib

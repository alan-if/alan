######################################################################
include ../mk/include_guard.mk
#
# Local settings Makefile for building various versions of
# Alan interpreter arun
#
# Copy this file to Makefile.local and enable extra targets that depend
# on third party libraries by uncommenting and adjusting below

# Here's a way to cross-build command line arun for Windows
cross: CC=i686-w64-mingw32-gcc
cross: build

# Enable WinArun:
#WINARUN_ENABLED = true
#
# You need a compiled and linkable version of the WindowsGLK library
# which you can get at https://github.com/DavidKinder/Windows-Glk
# or as a binary at http://www.ifarchive.org/indexes/if-archiveXprogrammingXglkXimplementations.html
#
# Point the linker to the Windows GLK library
WINGLK_ROOT = /home/thomas/Utveckling/Alan/WindowsGlk-145
#
# If required you can set particular compiler and linker for an extra target:
winarun: CC = i686-w64-mingw32-gcc
winarun: WINDRES = i686-w64-mingw32-windres
# And/or extra switches and flags:
winarun: CFLAGS = -m32 -mwindows
winarun: LDFLAGS = -m32 -mwindows
#

# Enable glkarun:
#GLKARUN_ENABLED = true
# Requires curses and a glkterm library
CURSESLIB = -lncurses
GLKTERM_ROOT = /home/thomas/Utveckling/glkterm

# Enable Gargoyle Arun:
#GARARUN_ENABLED = true
#
# This requires Gargoyle sources and needs to be built in Gargoyle
# source directory using the build system Jam, which needs to be
# available too.  Gargoyle includes a version of Arun, built to a
# binary called 'alan3' To make it use the sources here, remove the
# subdirectory terps/alan3 and create a link from there to this
# directory. Then a build here will attempt to build that too.
GARGOYLE_ROOT = ../../garglk-current-alan3

# Enable MacArun
#MACARUN_ENABLED = true

#######################################################################
# This Makefile is for building the Alan Compiler from scratch
# It only works on ThoNi's machines, if you are porting try starting
# from one of the other Makefiles, e.g. Makefile.unix
# Copy it to Makefile and go from there
#######################################################################

# On cygwin we try to build without cygwin1.dll if we can, applications can unset this if they need to
PLATFORM = -mno-cygwin

OPTIMIZE = -ggdb

#Settings for memory debugging which is used unless building RELEASE
SMARTALLOC = -DSMARTALLOC

COMMONCOMPILEFLAGS = $(OPTIMIZE) $(PLATFORM) $(CRCLOG) $(SMARTALLOC) -funsigned-char
COMPILEFLAGS = $(COMMONCOMPILEFLAGS)
WARNINGFLAGS = -Wall

CFLAGS	= $(COMPILEFLAGS) $(WARNINGFLAGS)
CC = gcc

LINKFLAGS = $(PLATFORM)
LINK = gcc

# Define this to make interpreter log each crc calculation step
#CRCLOG = -DCRCLOG


# Include common source lists 
include sources.mk


###############################################################
all:
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" arun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" winarun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" glkarun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" gararun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" dumpacd


clean:
	-rm *.o



#######################################################################
# Settings for Release
release: SMARTALLOC =
release: PLATFORM = -mno-cygwin
release: OPTIMIZE=-O4
release: all


Makefile:
	ln -s Makefile.thoni Makefile


#######################################################################
# Settings for Standard Arun
arun: PLATFORM = # we build with cygwin.dll until the unit tests can be build without them

arun: unit checkTarget $(ARUNOBJECTS) dependencies.mk
	$(LINK) -o $@ $(OPTIMIZE) $(ARUNOBJECTS) $(LINKFLAGS) $(LIBS)
	cp $@ ../bin

VERSION = `cd ..; venum alan -print "\\$$v.\\$$r\\$$s\\$$c"`

#######################################################################
# Settings for Windows GLK variant
WINGLKROOT = ../../WindowsGLK
WINGLKDEFS = -DHAVE_WINGLK
WINGLKINCLUDE = -I$(WINGLKROOT)/Include
WINGLKLIB = $(WINGLKROOT)/Glk.lib

winarun: COMPILEFLAGS = $(COMMONCOMPILEFLAGS) $(WINGLKINCLUDE) $(WINGLKDEFS)
winarun: PLATFORM = -mno-cygwin 
winarun: LIBS = $(WINGLKLIB) -mwindows

winarun: checkTarget $(WINARUNOBJECTS)
	$(LINK) -o $@ $(OPTIMIZE) $(WINARUNOBJECTS) $(LINKFLAGS) $(LIBS)
	cp $@ ../bin

arun.res: arun.rc arun.ico resources.h alan.version.c
	echo $(VERSION)
	sed "s/WINARUNVERSION/$(VERSION)/" arun.rc > arun.rc2
	windres arun.rc2 -O coff -o $@


#######################################################################
# Settings for TermGLK => glkarun
TERMGLKROOT = ../../glkterm
TERMGLKDEFS = -DHAVE_GLK
TERMGLKINCLUDE = -I$(TERMGLKROOT)
TERMGLKLIB = -L$(TERMGLKROOT) -lglkterm -lncurses

glkarun: PLATFORM = # Cannot be build with -mno-cygwin since glkterm cannot be build with out cygwin since I have no curses library for windows
glkarun: COMPILEFLAGS = $(COMMONCOMPILEFLAGS) $(TERMGLKINCLUDE) $(TERMGLKDEFS)
glkarun: LIBS = $(TERMGLKLIB)

glkarun: checkTarget $(TERMARUNOBJECTS) arun.res
	$(LINK) -o $@ $(OPTIMIZE) $(TERMARUNOBJECTS) arun.res $(LINKFLAGS) $(LIBS)
	cp $@ ../bin


#######################################################################
# Settings for Gargoyle GLK variant (experimental!)
GARGLKROOT = ../../Gargoyle-2006-09-17/garglk
GARGLKDEFS = -DHAVE_GARGLK
GARGLKINCLUDE = -I$(GARGLKROOT)
GARGLKLIB = -L$(GARGLKROOT)/../build/cygwin.release/garglk -lgarglk -lgarglkmain -lpng12 `pkg-config --libs gtk+` -lgdk `pkg-config --libs freetype2` -ljpeg /home/thoni/fmodapi374win/api/lib/libfmod.a

gararun: COMPILEFLAGS = $(COMMONCOMPILEFLAGS) $(GARGLKINCLUDE) $(GARGLKDEFS)
gararun: LIBS = $(GARGLKLIB)

gararun: checkTarget $(GARARUNOBJECTS) arun.res
	$(LINK) -o $@ $(OPTIMIZE) $(GARARUNOBJECTS) arun.res $(LINKFLAGS) $(LIBS)
	cp $@ ../bin


#######################################################################
ARCH	= `echo $(COMPILEFLAGS)`
.PHONY: checkTarget
	#@echo "ARCH  = $(ARCH)"
	#@echo ".arch = `cat .arch`"
checkTarget:
	-@if test -f .arch; then :; else echo "none" > .arch; fi
	-@if test "`cat .arch`" != "$(ARCH)"; then \
		echo Removing objects for \'`cat .arch`\' ; \
		echo Re-building      for \'$(ARCH)\'... ; \
		rm *.o; \
		/bin/echo -n $(ARCH) > .arch; \
	fi

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Version number generation
#
alan.version.h : ../alan.version.h
	cp ../alan.version.h .

alan.version.c:  ../alan.version
	cp ../alan.version.c .

version.h : ../version.h
	cp ../version.h .

../alan.version.c: ../alan.version
../alan.version.h: ../alan.version
../version.h: ../alan.version

../alan.version: $(VERSIONSRCS) 
	cd ..; venum alan time


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# CGreen unit tests
#
CGREENROOT = ../cgreen
CGREENINCLUDE = -I$(CGREENROOT)/include
unittests: PLATFORM = # Cannot run with -mno-cygwin since cgreen cannot be compiled with it yet
unittests: CFLAGS = $(COMPILEFLAGS) $(CGREENINCLUDE)
unittests: LIBS = $(CGREENROOT)/libcgreen.a

unittests: checkTarget $(UNITTESTSOBJECTS) $(LIBS)
	$(LINK) -o unittests $(UNITTESTSOBJECTS) $(LINKFLAGS) $(LIBS)

.PHONY: unit
unit:
	-@if test -d $(CGREENROOT) ; then \
		$(MAKE) unittests ; \
		./unittests ; \
	fi

#+++++++++++++++++++++++++++++++++
#
# Run all tests!
#
test: unit


#######################################################################
#
# Misc programs:
#
# Dump Acode file into text format
#
dumpacd: checkTarget dumpacd.o reverse.o lists.o sysdep.o  ../compiler/spa.o smartall.o
	$(LINK) -Wall -o dumpacd -ggdb $(PLATFORM) dumpacd.o reverse.o lists.o sysdep.o smartall.o -DSTDIONONCONST ../compiler/spa.o
	cp $@ ../bin


###################################################################
#
# Test of about dialog
#
about: about.c arun.res
	$(LINK) -o $@ -ggdb -mwindows about.c arun.res


###################################################################
#
# Test program to generate a header of a particular version
#
headerGenerator: headerGenerator.c


###################################################################
# Dependencies are generated only for command line case
# Dependencies on libraries are only in the way for other cases,
# so special dependencies that we need are set explicitly below
#
CPP	= gcc
DEPENDFLAGS = -MM
DEPENDINCLUDES = $(WINGLKINCLUDE) $(CGREENINCLUDE)
depend:
	@-for f in $(UNITTESTSSRCS) $(MAINSRCS) dumpacd.c reverse.c ; \
	  do \
	  $(CPP) $(DEPENDFLAGS) $(DEPENDINCLUDES) $$f >> dependencies.new; \
	done
	mv dependencies.new dependencies.mk

# Extra dependencies for WinGLK case
readline.o : resources.h
glkstart.o: glkstart.c args.h types.h sysdep.h acode.h main.h \
  glkstart.h glkio.h resources.h utils.h
glkio.o: glkio.c glkio.h

include dependencies.mk

#######################################################################
# This Makefile is for building the Alan Interpreter from scratch
# It only works on ThoNi's machines, which are Windows machines
# It is included from Makefile if run on ThoNi's machine
#######################################################################

CGREEN = yes
CGREENINCLUDE = -I/usr/local/include
CGREENLIB = /usr/local/lib/libcgreen.a

# On cygwin we try to build without cygwin1.dll if we can
# Variants can unset this if they need to
PLATFORM = -mno-cygwin

unittests: PLATFORM =

COMMONCOMPILEFLAGS = $(OPTIMIZE) $(PLATFORM) $(CRCLOG) $(SMARTALLOC) -funsigned-char
COMPILEFLAGS = $(COMMONCOMPILEFLAGS)
WARNINGFLAGS = -Wall

CFLAGS	= $(COMPILEFLAGS) $(WARNINGFLAGS)
CC = gcc

LINKFLAGS = $(PLATFORM)
LINK = gcc

#######################################################################
#
# Some optional settings
#

# Define this to make interpreter log each crc calculation step
#CRCLOG = -DCRCLOG
#OPTIMIZE = -ggdb

#Settings for memory debugging which is used unless building RELEASE
#SMARTALLOC = -DSMARTALLOC


VERSION = `cd ..; venum alan -print "\\$$v.\\$$r\\$$s\\$$c"`


GLKLIBROOT = /cygdrive/c/Users/Thomas/Documents/Utveckling/Alan


###############################################################
# 'build' is the target the continuous integration will use
.PHONY: build
build:
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" arun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" winarun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" glkarun
#	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" gararun
	$(MAKE) "OPTIMIZE=$(OPTIMIZE)" "SMARTALLOC=$(SMARTALLOC)" dumpacd



#######################################################################
# Settings for Release
release: SMARTALLOC =
release: PLATFORM = -mno-cygwin
release: OPTIMIZE=-O4

.PHONY: release
release: all


#######################################################################
# Settings for Standard Arun
arun: PLATFORM = # we build with cygwin.dll until the unit tests can be built without it


#######################################################################
# Settings for Windows GLK variant
WINGLKROOT = $(GLKLIBROOT)/WindowsGLK
WINGLKDEFS = -DHAVE_WINGLK
WINGLKINCLUDE = -I$(WINGLKROOT)/Include
WINGLKLIB = $(WINGLKROOT)/Glk.lib

winarun: COMPILEFLAGS = $(COMMONCOMPILEFLAGS) $(WINGLKINCLUDE) $(WINGLKDEFS)
winarun: PLATFORM = -mno-cygwin 
winarun: LIBS = $(WINGLKLIB) -mwindows

winarun: checkTarget $(WINARUNOBJECTS)
	$(LINK) -o $@ $(OPTIMIZE) $(WINARUNOBJECTS) $(LINKFLAGS) $(LIBS)
	cp $@ ../bin

arun.res: arun.rc arun.ico resources.h alan.version.c
	echo $(VERSION)
	sed "s/WINARUNVERSION/$(VERSION)/" arun.rc > arun.rc2
	windres arun.rc2 -O coff -o $@


#######################################################################
# Settings for TermGLK => glkarun
TERMGLKROOT = $(GLKLIBROOT)/glkterm
TERMGLKDEFS = -DHAVE_GLK
TERMGLKINCLUDE = -I$(TERMGLKROOT)
TERMGLKLIB = -L$(TERMGLKROOT) -lglkterm -lncurses -lcurses

glkarun: PLATFORM = # Cannot be build with -mno-cygwin since glkterm cannot be build with out cygwin since I have no curses library for windows
glkarun: COMPILEFLAGS = $(COMMONCOMPILEFLAGS) $(TERMGLKINCLUDE) $(TERMGLKDEFS)
glkarun: LIBS = $(TERMGLKLIB)

glkarun: checkTarget $(TERMARUNOBJECTS) arun.res
	$(LINK) -o $@ $(OPTIMIZE) $(TERMARUNOBJECTS) arun.res $(LINKFLAGS) $(LIBS)
	cp $@ ../bin


#######################################################################
# Settings for Gargoyle GLK variant (experimental!)
GARGLKROOT = $(GLKLIBROOT)/Gargoyle-2006-09-17/garglk
GARGLKDEFS = -DHAVE_GARGLK
GARGLKINCLUDE = -I$(GARGLKROOT)
GARGLKLIB = -L$(GARGLKROOT)/../build/cygwin.release/garglk -lgarglk -lgarglkmain -lpng12 `pkg-config --libs gtk+` -lgdk `pkg-config --libs freetype2` -ljpeg /home/thoni/fmodapi374win/api/lib/libfmod.a

gararun: COMPILEFLAGS = $(COMMONCOMPILEFLAGS) $(GARGLKINCLUDE) $(GARGLKDEFS)
gararun: LIBS = $(GARGLKLIB)

gararun: checkTarget $(GARARUNOBJECTS) arun.res
	$(LINK) -o $@ $(OPTIMIZE) $(GARARUNOBJECTS) arun.res $(LINKFLAGS) $(LIBS)
	cp $@ ../bin


#######################################################################
#
# Misc programs:
#
# Dump Acode file into text format
#
dumpacd: checkTarget dumpacd.o reverse.o lists.o sysdep.o  ../compiler/spa.o smartall.o
	$(LINK) -Wall -o dumpacd -ggdb $(PLATFORM) dumpacd.o reverse.o lists.o sysdep.o smartall.o -DSTDIONONCONST ../compiler/spa.o
	cp $@ ../bin


###################################################################
#
# Test of about dialog
#
about: about.c arun.res
	$(LINK) -o $@ -ggdb -mwindows about.c arun.res


###################################################################
#
# Test program to generate a header of a particular version
#
headerGenerator: headerGenerator.c

Alan Library
------------

These files are the proposed Alan standard library version 0.2.

Files which are exactly the same as (or completely compatible with)
library version 0.1 have the following in their second line:

	-- Library version 0.1, 0.2

Files which are changed so that they are not *exactly* compatible have
only:

	-- Library version 0.2

This might make it easier to decide if a new version of the library
will affect your work. Note however that even very small incompatible
changes are considered *incompatible*. One example in this version is
the introduction of one single "the" in a message. This might seem
trivial but might change the appearance of the message if the author
had made allowance for this deficency in his work.

You can find an index of sorts in the file 'index.txt'.



About the structure of the library

The library consists of a set of files each focusing on one aspect of
player commands or actions. One such file should contain everything
that is necessary to use the Alan definitions.

E.g. the CHECKs in the EAT verbs in 'eat.i' refers to a edible
attribute, so the file should also define such an attribut to be
globally available for all OBJECTs. It should also (and does) contain
the necessary SYNTAX for the eat VERB.

Breaking up the library in many small pieces/files has one huge
advantage. If you need to do some modification to the library you can
do that in just one file. Further more, by using the include directory
switches/options to the Alan compiler you can keep the complete
library in a separate directory (say C:/ALAN/LIBRARY) and only copy
the file you want to modify to your games directory (say
C:/MY/GAME). The Alan compiler will always try to find an included
file in the current directory first and only if not found there try
the directories listed with -include options on the command line (or
equivalent).

So a viable set of commands to modify the eat.i file *just for this
game* would be:

	C:/MY/GAME> copy /ALAN/LIBRARY/eat.i eat.i
	C:/MY/GAME> edit eat.i
	C:/MY/GAME> alan -include /ALAN/LIBRARY game.alan

(supposing game.alan included the main library file std.i)

When a modified library is released it should (in theory) be possible
just to start using the new library, thus benefitting from new
features in the new version of the library, except where you made your
local modifications:

	C:/MY/GAME> alan -include /ALAN/2.8/LIBRARY game.alan


This is the reasoning behind the proposed structure. Comments and
expansions to this library are most welcome!

Many thanks goes to Stephen Griffiths (sg@xtra.co.nz) for helpful
comments to and additions to this library (but also to Alan in general).

	Thomas, <thoni@softlab.lejonet.se>



Visit the Alan Home Pages at

	http://www.pp.softlab.se/thomas.nilsson/alan

